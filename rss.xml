<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>XUNGE</title>
    <link>https://blog.xungejiang.com/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>哈工大 计算机科学博士在读</description>
    <pubDate>Sun, 18 Nov 2018 01:01:42 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>14 年 MacBook Pro 升级 Intel 760p NVME SSD</title>
      <link>https://blog.xungejiang.com/mac-change-ssd-760p/</link>
      <guid>https://blog.xungejiang.com/mac-change-ssd-760p/</guid>
      <pubDate>Sun, 18 Nov 2018 01:01:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;本教程适用于 13/14/15 年 MacBook Pro 升级非官方硬盘&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本教程适用于 13/14/15 年 MacBook Pro 升级非官方硬盘</p><a id="more"></a><p>由于 MacBook Pro 的硬盘接口是自己设计的，所以更换硬盘有两种选择：</p><ul><li><p>选择 苹果 自家接口的固态硬盘。优点：兼容性好；缺点：贵，速度慢</p></li><li><p>选择 M.2 接口且兼容的固态硬盘 + 转接卡。优点：便宜，速度快，兼容性也很好；缺点：自己动手有风险（很小），失去保修，不好出二手</p></li></ul><p>本文将介绍使用第三方 M.2 接口的固态硬盘和转接卡升级 MacBook Pro 硬盘的方案</p><h2 id="之前的准备"><a href="# 之前的准备" class="headerlink" title="之前的准备"></a>之前的准备</h2><h3 id="SSD- 与转接卡的选择"><a href="#SSD- 与转接卡的选择" class="headerlink" title="SSD 与转接卡的选择"></a>SSD 与转接卡的选择</h3><p>SSD 主要是根据广大网友的前车之鉴，目前比较推荐的有三星 SM951，Intel 760P 等。博主选择的是 Intel 760P，因为 SM951 目前很难买到新款，基本上都是拆机的二手货，没有质保，而 Intel 760P 有 5 年保修，价格也差不多。</p><p>转接卡在淘宝搜索 <code>苹果 SSD 转接卡 2014 mac book</code>，博主买的转接卡如下图所示。</p><img src="https://img.xungejiang.com/static/images/18-11-18/002.jpg"><h3 id="制作 -macOS- 系统盘"><a href="# 制作 -macOS- 系统盘" class="headerlink" title="制作 macOS 系统盘"></a>制作 macOS 系统盘 </h3><p> 因为在 macOS 10.13 High Sierra 版本后系统支持了 NVME 硬盘协议，所以我们安装的 macOS 版本必须是 10.13 之后的系统。本文选择的是 macOS 10.14 Mojave 版本，具体制作 macOS 系统盘的教程可以参考 <a href="https://blog.xungejiang.com/2016/07/03/install-macOS">本人博客</a></p><h3 id="TimeMachine- 备份系统"><a href="#TimeMachine- 备份系统" class="headerlink" title="TimeMachine 备份系统"></a>TimeMachine 备份系统 </h3><p> 硬盘有价，数据无价！</p><p>拆机时还需要 T5 的螺丝刀，这里建议购买 <code>米家 wiha 螺丝刀</code></p><h2 id="更换过程"><a href="# 更换过程" class="headerlink" title="更换过程"></a>更换过程 </h2><p> 拆机等详细步骤可以参考 <a href="https://www.ifixit.com/Guide/MacBook+Pro+13-Inch+Retina+Display+Mid+2014+SSD+Replacement/27849" rel="external nofollow noopener noreferrer" target="_blank">IFIXIT 更换 SSD 教程</a></p><p>拆机过程要注意上面两颗螺丝和其他八颗螺丝的长度是不一样的，重新装机的时候要注意。</p><img src="https://img.xungejiang.com/static/images/18-11-18/004.jpg"><p>后机盖和机身有两个卡扣固定，装机要确定卡扣卡紧再上螺丝。</p><img src="https://img.xungejiang.com/static/images/18-11-18/005.jpg"><p>更换完 SSD 是这样的</p><img src="https://img.xungejiang.com/static/images/18-11-18/003.jpg"><p>注意一定要将硬盘接头用力往里塞紧，并保证固定螺丝是可以拧上固定的状态。</p><h2 id="重装系统"><a href="# 重装系统" class="headerlink" title="重装系统"></a>重装系统 </h2><p> 插上刚才制作的 macOS 系统盘，按住 <code>option</code> 键开机，选择 install macOS 进入下面界面，选择磁盘工具，继续</p><img src="https://img.xungejiang.com/static/images/18-11-18/006.jpg"><p>将新安装的 SSD 抹掉，格式为 <code>Mac OS 扩展（日志式）</code>，方案为 <code>GUID 分区图</code>，如下图所示</p><img src="https://img.xungejiang.com/static/images/18-11-18/007.jpg"><p>若没有检测到新硬盘，则可能是硬盘没有插紧，或者硬盘不是全新的硬盘留有分区，只需要在 Windows 系统下删除卷即可</p><p>之后关闭磁盘工具，进入第二项 <code>安装 macOS</code> 即可成功安装。</p><p>新旧硬盘测速图如下（都是刚装完系统就测试的）：</p><img src="https://img.xungejiang.com/static/images/18-11-18/008.jpg"><p>sudo pmset -a hibernatemode 0 standby 0 autopoweroff 0</p><p>sudo pmset -a hibernatemode 3 standby 1 autopoweroff 1</p><h2 id="休眠无法唤醒的解决办法"><a href="# 休眠无法唤醒的解决办法" class="headerlink" title="休眠无法唤醒的解决办法"></a>休眠无法唤醒的解决办法 </h2><p> 如果将电脑扣盖休眠 8 小时后（或者电脑休眠至没电关机）再开机发现无法唤醒电脑（电脑屏幕亮，但无反应），那么你可能需要继续往下阅读</p><p>Mac 电脑默认模式下休眠时间超过 8 小时后会将内存中的资料存储在硬盘中并将内存断电，以达到更好的省电目的。可能因为转接卡或硬盘不兼容将资料从硬盘导入内存造成无法唤醒的现象。</p><h3 id="方法 1：重置 -Mac- 笔记本电脑上的 -SMC- 和 -NVRAM："><a href="# 方法 1：重置 -Mac- 笔记本电脑上的 -SMC- 和 -NVRAM：" class="headerlink" title="方法 1：重置 Mac 笔记本电脑上的 SMC 和 NVRAM："></a>方法 1：重置 Mac 笔记本电脑上的 SMC 和 NVRAM：</h3><p>以下来自苹果官网：</p><ol><li>如何重置 Mac 笔记本电脑上的 SMC：</li></ol><p>如果电池不可拆卸：<br>选取苹果菜单 &gt;“关机”。<br>等 Mac 关机后，按下内建键盘左侧的 Shift-Control-Option，然后同时按下电源按钮。按住这些按键和电源按钮 10 秒钟。<br>如果您的 MacBook Pro 带有触控 ID，则触控 ID 按钮也是电源按钮。<br>松开所有按键。<br>再次按下电源按钮以开启 Mac。</p><ol start="2"><li>如何重置 NVRAM</li></ol><p>将 Mac 关机，然后开机并立即同时按住以下四个按键：Option、Command、P 和 R。您可以在大约 20 秒后松开这些按键，在此</p><p>期间您的 Mac 可能看似在重新启动。</p><p>在发出启动声的 Mac 电脑上，您可以在两次启动声之后松开这些按键。<br>在 iMac Pro 上，您可以在 Apple 标志第二次出现并消失后松开这些按键。<br>如果您的 Mac 使用了固件密码，这个组合键将不起任何作用或导致您的 Mac 从 macOS 恢复功能启动。要重置 NVRAM，请先关闭固件密码。</p><p>在您的 Mac 完成启动后，您可能需要打开“系统偏好设置”并调整已重置的任何设置，例如音量、显示屏分辨率、启动磁盘选择或时区。</p><h3 id="方法 2："><a href="# 方法 2：" class="headerlink" title="方法 2："></a>方法 2：</h3>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/mac-change-ssd-760p/#disqus_thread</comments>
    </item>
    
    <item>
      <title>我是如何在黑苹果中编译安装 TensorFlow-GPU 1.8</title>
      <link>https://blog.xungejiang.com/2018-07-06-tensorflow-gpu-mac/</link>
      <guid>https://blog.xungejiang.com/2018-07-06-tensorflow-gpu-mac/</guid>
      <pubDate>Mon, 08 Oct 2018 03:32:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>content<br>{:toc}</li></ul><p>之前一直使用 Ubuntu Linux 系统作为 TensorFlow 机器学习的服务器，但是相对于 macOS 来说，无论是界面美化还是应用覆盖都是远远强于 Ubuntu 的，所以计划安装一个黑苹果作为 TensorFlow 的服务器</p><p>但是因为 TensorFlow 在 1.2 版本后不再支持 macOS 的 GPU 版本，只能通过编译源代码进行安装，过程较为繁杂，所以在此记录</p><p>首先确定 Mac 显卡是 NVIDIA 显卡，且 compute capabilities &gt;= 3.0，<a href="https://developer.nvidia.com/cuda-gpus" rel="external nofollow noopener noreferrer" target="_blank">点击这里</a> 查看你的显卡型号是否支持</p><h2 id="环境概览"><a href="# 环境概览" class="headerlink" title="环境概览"></a>环境概览</h2><table><thead><tr><th>软件</th><th>版本号</th></tr></thead><tbody><tr><td>macOS High Sierra</td><td>10.13.4</td></tr><tr><td>TensorFlow</td><td>1.8</td></tr><tr><td>python</td><td>3.6.4</td></tr><tr><td>NVIDIA Web-Drivers</td><td>387.10.10.10.30.106</td></tr><tr><td>CUDA-Drivers</td><td>387.178</td></tr><tr><td>CUDA Toolkit</td><td>9.1</td></tr><tr><td>cuDNN</td><td>7.0.5</td></tr><tr><td>bazel</td><td>0.10.0</td></tr><tr><td>Xcode</td><td>8.3.2</td></tr><tr><td>Command Line Tools for Xcode</td><td>8.3.2</td></tr></tbody></table><h2 id="环境搭建"><a href="# 环境搭建" class="headerlink" title="环境搭建"></a>环境搭建 </h2><h3 id="安装 -Homebrew"><a href="# 安装 -Homebrew" class="headerlink" title="安装 Homebrew"></a> 安装 Homebrew</h3><p>在终端输入下面命令安装 Homebrew</p><pre><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></pre><h3 id="安装 -coreutils，llvm，OpenMP"><a href="# 安装 -coreutils，llvm，OpenMP" class="headerlink" title="安装 coreutils，llvm，OpenMP"></a>安装 coreutils，llvm，OpenMP</h3><pre><code>brew install coreutils llvm cliutils/apple/libomp</code></pre><h3 id="安装 -Python- 依赖"><a href="# 安装 -Python- 依赖" class="headerlink" title="安装 Python 依赖"></a>安装 Python 依赖 </h3><p> 建议使用 Anaconda 包管理和 Virtualenv 虚拟环境等安装 Python</p><pre><code>pip install six numpy wheel</code></pre><h3 id="安装 -bazel"><a href="# 安装 -bazel" class="headerlink" title="安装 bazel"></a>安装 bazel</h3><p>下载 <a href="https://github.com/bazelbuild/bazel/releases" rel="external nofollow noopener noreferrer" target="_blank">0.10.0</a> 版本中的 <code>bazel-0.10.0-installer-darwin-x86_64.sh</code> 文件</p><p>需要注意，这里必须是 0.10.0 版本，新或旧都能导致编译失败</p><p>在下载目录打开终端，输入下面命令进行安装</p><pre><code>chmod +x bazel-0.10.0-installer-darwin-x86_64.sh./bazel-0.10.0-installer-darwin-x86_64.sh</code></pre><h3 id="降级 -Xcode- 到 -8-3-2"><a href="# 降级 -Xcode- 到 -8-3-2" class="headerlink" title="降级 Xcode 到 8.3.2"></a>降级 Xcode 到 8.3.2</h3><p>下载 <code>Xcode 8.3.2</code> 和 <code>Command Line Tools for Xcode 8.3.2</code>，Xcode 9 需要降级，因为编译 TensorFlow 只能使用 Xcode 8，官网下载需要登录苹果账号，<a href="https://developer.apple.com/download/more/" rel="external nofollow noopener noreferrer" target="_blank">官网下载链接</a>，按名称排列即可快速找到。</p><ul><li><code>Xcode8.3.2.xip</code> (4.49GB) 下载后解压，重命名为 <code>Xcode8.3.2</code> 并复制到 <code>应用程序</code> 即可</li><li><code>CommandLineToolsforXcode8.3.2.dmg</code> (166.1MB) 下载后安装即可</li></ul><p>使用下面的命令在终端激活 Xcode 8.3.2</p><pre><code>sudo xcode-select -s /Applications/Xcode8.3.2.app</code></pre><p>换回 Xcode 9 可以用</p><pre><code>$ sudo xcode-select -s /Applications/Xcode.app</code></pre><h3 id="NVIDIA"><a href="#NVIDIA" class="headerlink" title="NVIDIA"></a>NVIDIA</h3><h4 id="1- 安装 -NVIDIA-Web-Drivers"><a href="#1- 安装 -NVIDIA-Web-Drivers" class="headerlink" title="(1) 安装 NVIDIA Web-Drivers"></a>(1) 安装 NVIDIA Web-Drivers</h4><p>下载 <code>NVIDIA Web-Drivers</code> 驱动，根据不同的 Mac 系统进行下载，<a href="https://www.tonymacx86.com/nvidia-drivers/" rel="external nofollow noopener noreferrer" target="_blank">点击这里</a> 下载，支持 macOS 10.13.4 的版本为 387.10.10.10.30.106</p><ul><li><code>WebDriver-387.10.10.10.30.106.pkg</code> (63.9MB) 下载后安装即可</li></ul><h4 id="2- 安装 -CUDA-Drivers"><a href="#2- 安装 -CUDA-Drivers" class="headerlink" title="(2) 安装 CUDA-Drivers"></a>(2) 安装 CUDA-Drivers</h4><p>下载 <code>CUDA-Drivers</code> 驱动，支持 CUDA 9.1 的版本号为 387.178，<a href="https://www.nvidia.cn/object/macosx-cuda-387.178-driver-cn.html" rel="external nofollow noopener noreferrer" target="_blank">官网 </a> 下载、 <a href="https://pan.baidu.com/s/1GyoCyuh-hhJtEgFC0XS0IQ" rel="external nofollow noopener noreferrer" target="_blank"> 百度云</a> 下载</p><ul><li><code>cudadriver_387.178_macos.dmg</code> (39.9MB) 下载后安装即可</li></ul><h4 id="3- 安装 -CUDA-Toolkit-9-1"><a href="#3- 安装 -CUDA-Toolkit-9-1" class="headerlink" title="(3) 安装 CUDA Toolkit 9.1"></a>(3) 安装 CUDA Toolkit 9.1</h4><p>下载 <code>CUDA Toolkit 9.1</code>，<a href="https://developer.nvidia.com/cuda-91-download-archive?target_os=MacOSX&amp;target_arch=x86_64&amp;target_version=1013&amp;target_type=dmglocal" rel="external nofollow noopener noreferrer" target="_blank">官网 </a> 下载和 <a href="https://pan.baidu.com/s/1zPU_2aC6_uK3P2j7v-RtEw" rel="external nofollow noopener noreferrer" target="_blank"> 百度云</a> 下载</p><ul><li><code>cuda_9.1.128_mac.dmg</code> (1.53GB) 下载后安装即可</li></ul><p>配置 CUDA 环境，编辑 <code>~/.bash_profile</code> 文件，如果安装了 zsh 则编辑 <code>~/.zshrc</code> 文件，打开终端：</p><pre><code>open -e .bash_profile</code></pre><p>然后在弹出的文件中添加：</p><pre><code>export CUDA_HOME=/usr/local/cudaexport DYLD_LIBRARY_PATH=/usr/local/cuda/lib:/usr/local/cuda/extras/CUPTI/libexport LD_LIBRARY_PATH=$DYLD_LIBRARY_PATHexport PATH=$PATH:$DYLD_LIBRARY_PATH</code></pre><p>执行命令重启 bash_profile</p><pre><code>. ~/.bash_profile</code></pre><p>检测 CUDA 能否正常运行：</p><pre><code>cd /usr/local/cuda/samplessudo make -C 1_Utilities/deviceQuery./bin/x86_64/darwin/release/deviceQuery</code></pre><p>第一次编译时可能需要同意苹果协议，按照要求填 <code>agree</code> 即可</p><p>最终结果为 <code>Result = PASS</code> 则安装正确。</p><h4 id="4- 安装 -cuDNN-7-0-5"><a href="#4- 安装 -cuDNN-7-0-5" class="headerlink" title="(4) 安装 cuDNN 7.0.5"></a>(4) 安装 cuDNN 7.0.5</h4><p>下载 <code>cuDNN 7.0.5</code>，该版本支持 CUDA 9.1 ，官网下载时需要登录 NVIDIA 账号，<a href="https://developer.nvidia.com/rdp/cudnn-archive" rel="external nofollow noopener noreferrer" target="_blank">官网 </a> 下载、 <a href="https://pan.baidu.com/s/1wY5A75FzXbNVmf0ZAIwvkg" rel="external nofollow noopener noreferrer" target="_blank"> 百度云</a> 下载</p><ul><li><code>cudnn-9.1-osx-x64-v7-ga.tgz</code> (340.3MB) 下载后解压，切换到解压缩的 <code>cuda</code> 目录，输入以下命令</li></ul><pre><code>sudo cp cuda/include/cudnn.h /usr/local/cuda/includesudo cp cuda/lib/libcudnn_static.a /usr/local/cuda/libsudo cp cuda/lib/libcudnn.7.dylib /usr/local/cuda/libsudo ln -s /usr/local/cuda/lib/libcudnn.7.dylib /usr/local/cuda/lib/libcudnn.dylibsudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib/libcudnn*</code></pre><h2 id="编译准备"><a href="# 编译准备" class="headerlink" title="编译准备"></a>编译准备 </h2><h3 id="拉取 -TensorFlow- 源码 -release-1-8- 分支"><a href="# 拉取 -TensorFlow- 源码 -release-1-8- 分支" class="headerlink" title="拉取 TensorFlow 源码 release 1.8 分支"></a> 拉取 TensorFlow 源码 release 1.8 分支</h3><pre><code>git clone https://github.com/tensorflow/tensorflow -b r1.8cd tensorflow</code></pre><h3 id="修改代码，使其与 -macOS- 兼容"><a href="# 修改代码，使其与 -macOS- 兼容" class="headerlink" title="修改代码，使其与 macOS 兼容"></a>修改代码，使其与 macOS 兼容 </h3><h4 id="替换掉以下三个文件的 -align-sizeof-T"><a href="# 替换掉以下三个文件的 -align-sizeof-T" class="headerlink" title="替换掉以下三个文件的 align(sizeof(T))"></a> 替换掉以下三个文件的 align(sizeof(T))</h4><pre><code>cd tensorflowsed -i -e &quot;s/ __align__(sizeof(T))//g&quot; tensorflow/core/kernels/concat_lib_gpu_impl.cu.ccsed -i -e &quot;s/ __align__(sizeof(T))//g&quot; tensorflow/core/kernels/depthwise_conv_op_gpu.cu.ccsed -i -e &quot;s/ __align__(sizeof(T))//g&quot; tensorflow/core/kernels/split_lib_gpu.cu.cc</code></pre><h4 id="解决找不到 -‘protobuf-bzl’- 的问题"><a href="# 解决找不到 -‘protobuf-bzl’- 的问题" class="headerlink" title="解决找不到 ‘protobuf.bzl’ 的问题"></a>解决找不到 ‘protobuf.bzl’ 的问题 </h4><p> 我还遇到了以下错误</p><pre><code>ERROR: /Users/xunge/Desktop/tensorflow/tensorflow/tools/pip_package/BUILD:166:1: error loading package &#39;tensorflow&#39;: Encountered error while reading extension file &#39;protobuf.bzl&#39;: no such package &#39;@protobuf_archive//&#39;: java.io.IOException: thread interrupted and referenced by &#39;//tensorflow/tools/pip_package:build_pip_package&#39;</code></pre><p><a href="https://github.com/tensorflow/tensorflow/issues/12979" rel="external nofollow noopener noreferrer" target="_blank">解决办法</a> 如下：</p><pre><code>sed -i &#39;\@https://github.com/google/protobuf/archive/0b059a3d8a8f8aa40dde7bea55edca4ec5dfea66.tar.gz@d&#39; tensorflow/workspace.bzl</code></pre><h4 id="添加依赖头文件 -nccl-h- 如编译 1-7 不用做此步骤"><a href="# 添加依赖头文件 -nccl-h- 如编译 1-7 不用做此步骤" class="headerlink" title="添加依赖头文件 nccl.h (如编译 1.7 不用做此步骤)"></a>添加依赖头文件 nccl.h (如编译 1.7 不用做此步骤)</h4><p>下载 <a href="https://github.com/NVIDIA/nccl/blob/master/src/nccl.h" rel="external nofollow noopener noreferrer" target="_blank">nccl.h</a>，放在 <code>third_party/nccl</code> 文件夹内</p><h4 id="修改 -tensorflow-workspace-bzl- 文件"><a href="# 修改 -tensorflow-workspace-bzl- 文件" class="headerlink" title="修改 tensorflow/workspace.bzl 文件"></a>修改 tensorflow/workspace.bzl 文件</h4><pre><code>tf_http_archive(    name = &quot;protobuf_archive&quot;,    urls = [        &quot;https://mirror.bazel.build/github.com/google/protobuf/archive/396336eb961b75f03b25824fe86cf6490fb75e3a.tar.gz&quot;,        &quot;https://github.com/google/protobuf/archive/396336eb961b75f03b25824fe86cf6490fb75e3a.tar.gz&quot;,    ],    sha256 = &quot;846d907acf472ae233ec0882ef3a2d24edbbe834b80c305e867ac65a1f2c59e3&quot;,    strip_prefix = &quot;protobuf-396336eb961b75f03b25824fe86cf6490fb75e3a&quot;,)</code></pre><p>搜索如上替换为如下</p><pre><code>tf_http_archive(    name = &quot;protobuf_archive&quot;,    urls = [        &quot;https://mirror.bazel.build/github.com/dtrebbien/protobuf/archive/50f552646ba1de79e07562b41f3999fe036b4fd0.tar.gz&quot;,        &quot;https://github.com/dtrebbien/protobuf/archive/50f552646ba1de79e07562b41f3999fe036b4fd0.tar.gz&quot;,    ],    sha256 = &quot;eb16b33431b91fe8cee479575cee8de202f3626aaf00d9bf1783c6e62b4ffbc7&quot;,    strip_prefix = &quot;protobuf-50f552646ba1de79e07562b41f3999fe036b4fd0&quot;,)</code></pre><p>修复 third_party/gpus/cuda/BUILD.tpl 文件 -lgomp 报错</p><pre><code>linkopts = [&quot;-lgomp&quot;],</code></pre><p>搜索如上，注释掉</p><pre><code># linkopts = [&quot;-lgomp&quot;],</code></pre><h2 id="开始编译"><a href="# 开始编译" class="headerlink" title="开始编译"></a>开始编译 </h2><h3 id="编译配置"><a href="# 编译配置" class="headerlink" title="编译配置"></a> 编译配置 </h3><p> 在 TensorFlow 目录下输入以下命令进行命令配置</p><pre><code>./configure</code></pre><p>配置文件如下</p><pre><code>You have bazel 0.10 installed.Please specify the location of python. [Default is /Users/user/.pyenv/versions/tensorflow-gpu/bin/python]: Found possible Python library paths:  /Users/user/.pyenv/versions/tensorflow-gpu/lib/python3.6/site-packagesPlease input the desired Python library path to use.  Default is [/Users/user/.pyenv/versions/tensorflow-gpu/lib/python3.6/site-packages]Do you wish to build TensorFlow with Google Cloud Platform support? [Y/n]: nNo Google Cloud Platform support will be enabled for TensorFlow.Do you wish to build TensorFlow with Hadoop File System support? [Y/n]: nNo Hadoop File System support will be enabled for TensorFlow.Do you wish to build TensorFlow with Amazon S3 File System support? [Y/n]: nNo Amazon S3 File System support will be enabled for TensorFlow.Do you wish to build TensorFlow with Apache Kafka Platform support? [y/N]: nNo Apache Kafka Platform support will be enabled for TensorFlow.Do you wish to build TensorFlow with XLA JIT support? [y/N]: nNo XLA JIT support will be enabled for TensorFlow.Do you wish to build TensorFlow with GDR support? [y/N]: nNo GDR support will be enabled for TensorFlow.Do you wish to build TensorFlow with VERBS support? [y/N]: nNo VERBS support will be enabled for TensorFlow.Do you wish to build TensorFlow with OpenCL SYCL support? [y/N]: nNo OpenCL SYCL support will be enabled for TensorFlow.Do you wish to build TensorFlow with CUDA support? [y/N]: yCUDA support will be enabled for TensorFlow.Please specify the CUDA SDK version you want to use, e.g. 7.0. [Leave empty to default to CUDA 9.0]: 9.1Please specify the location where CUDA 9.1 toolkit is installed. Refer to README.md for more details. [Default is /usr/local/cuda]: Please specify the cuDNN version you want to use. [Leave empty to default to cuDNN 7.0]: Please specify the location where cuDNN 7 library is installed. Refer to README.md for more details. [Default is /usr/local/cuda]:Please specify a list of comma-separated Cuda compute capabilities you want to build with.You can find the compute capability of your device at: https://developer.nvidia.com/cuda-gpus.Please note that each additional compute capability significantly increases your build time and binary size. [Default is: 3.5,5.2]6.1Do you want to use clang as CUDA compiler? [y/N]: nnvcc will be used as CUDA compiler.Please specify which gcc should be used by nvcc as the host compiler. [Default is /usr/bin/gcc]: Do you wish to build TensorFlow with MPI support? [y/N]: nNo MPI support will be enabled for TensorFlow.Please specify optimization flags to use during compilation when bazel option &quot;--config=opt&quot; is specified [Default is -march=native]: Would you like to interactively configure ./WORKSPACE for Android builds? [y/N]: Not configuring the WORKSPACE for Android builds.Preconfigured Bazel build configs. You can use any of the below by adding &quot;--config=&lt;&gt;&quot; to your build command. See tools/bazel.rc for more details.    --config=mkl             # Build with MKL support.    --config=monolithic      # Config for mostly static monolithic build.Configuration finished</code></pre><h3 id="编译"><a href="# 编译" class="headerlink" title="编译"></a>编译</h3><pre><code>bazel clean --expungebazel build --config=cuda --config=opt --cxxopt=&quot;-D_GLIBCXX_USE_CXX11_ABI=0&quot; --action_env PATH --action_env LD_LIBRARY_PATH --action_env DYLD_LIBRARY_PATH //tensorflow/tools/pip_package:build_pip_package</code></pre><p>如果看到</p><pre><code>INFO: Build completed successfully, 9160 total actions</code></pre><p>就说明编译成功</p><h3 id="创建 wheel 文件并安装"><a href="# 创建 wheel 文件并安装" class="headerlink" title="创建 wheel 文件并安装"></a>创建 wheel 文件并安装</h3><pre><code>$ bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg$ cd ~$ sudo pip install /tmp/tensorflow_pkg/tensorflow-1.8-cp36-cp36m-macosx_10_13_x86_64.whl</code></pre><p>本人编译完成后的文件为 <code>tensorflow-1.8.0-cp36-cp36m-macosx_10_7_x86_64.whl</code> <a href="https://pan.baidu.com/s/14o0uIOutmW866ftbf8nvuA" rel="external nofollow noopener noreferrer" target="_blank">百度云下载</a></p><p>最后提供本人 Z270 + i7-7700k 的黑苹果 <a href="https://pan.baidu.com/s/1ttgZ1cralJrTYkZS5BmwnQ" rel="external nofollow noopener noreferrer" target="_blank">EFI</a></p><p>参考文章：</p><ul><li><a href="https://www.shifeng1993.com/2018/05/26/tensorflow_gpu_macos/" rel="external nofollow noopener noreferrer" target="_blank">【tensorflow】macOS 10.13.4 编译 GPU 版本的 TensorFlow 1.8</a></li></ul>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2018-07-06-tensorflow-gpu-mac/#disqus_thread</comments>
    </item>
    
    <item>
      <title>远程开机_网络唤醒设置方法 (WOL, Wake on Lan)</title>
      <link>https://blog.xungejiang.com/2017-12-09-wake-on-lan/</link>
      <guid>https://blog.xungejiang.com/2017-12-09-wake-on-lan/</guid>
      <pubDate>Mon, 08 Oct 2018 03:32:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>content<br>{:toc}</li></ul><p>最近在实验室想控制家里的电脑。控制很容易， TeamViewer 就好啦。但是白天家里没人，没人帮我开电脑，于是找到了 WOL 这种方法。</p><h2 id="设置主板 -BIOS"><a href="# 设置主板 -BIOS" class="headerlink" title="设置主板 BIOS"></a>设置主板 BIOS</h2><p>需要在 BIOS 中进行更改。我的是微星 BIOS，操作如下</p><p><code>高级 </code> -&gt; <code> 换型事件设置 </code> -&gt; 将 <code>PCIE 设备唤醒</code> 和 <code> 网络唤醒 </code> 设置为 <code> 允许</code> (Enable)</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-12-09-007.jpg" alt=""></p><p>其他 BIOS 也类似，因为网卡也属于 PCIE 设备，所以 PCIE 设备唤醒 也需要打开。</p><h2 id="设置网卡"><a href="# 设置网卡" class="headerlink" title="设置网卡"></a>设置网卡 </h2><p> 在设备驱动管理器中，找到 <code>网络适配器 </code> ，在第一个驱动 <code> 右键 </code> -&gt; <code> 属性</code></p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-12-09-001.png" alt=""></p><p>在 <code>高级 </code> 菜单中的属性找到 <code> 唤醒魔包 </code> (Wake on Magic Packet) 设置为 <code> 启用</code></p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-12-09-002.png" alt=""></p><p>在 <code>电源管理 </code> 中 <code> 勾选 </code> <code> 允许此设备唤醒计算机</code></p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-12-09-003.png" alt=""></p><h2 id="配置路由器 -DDNS- 动态 -DNS- 服务"><a href="# 配置路由器 -DDNS- 动态 -DNS- 服务" class="headerlink" title="配置路由器 DDNS (动态 DNS) 服务"></a>配置路由器 DDNS (动态 DNS) 服务 </h2><p> 由于 IPV4 地址紧张，运营商宽带都是使用的动态 IP 地址，这就需要 <code>动态 DNS 服务</code> 进行穿透局域网。</p><p>我家的路由器是 <code>网件 NETGEAR R7800</code> 所以这里使用 NETGEAR 的 DDNS 服务，其他路由器基本也有自己的 DDNS 服务，大家可以自己选择。</p><p>首先登录路由器控制界面，一般是浏览器输入 192.168.0.1 / 192.168.1.1 / 10.0.0.1 等进入。</p><p>找到 <code>DDNS</code>  或者 <code>动态 DNS</code> ，注册 DDNS 服务商。网件提供三个 DDNS 服务商，我选择的是 <code>www.No-IP.com</code>。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-12-09-004.png" alt=""></p><p>找到 <code>端口映射 / 端口触发 </code>，在 <code> 端口映射 </code> 中 <code> 添加自定义服务</code>。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-12-09-005.png" alt=""></p><p>服务名随便填，协议：TCP/UDP，<code>外部端口组 </code> 和 <code> 内部端口组 </code> 一致即可，<code> 内部 IP 地址 </code> 映射到家里电脑的 IP。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-12-09-010.png" alt=""></p><p>这样，你就可以使用 WOL 软件发送一个数据包唤醒家里的电脑了。</p><p>有一个网站就可以使用 <a href="https://www.depicus.com/wake-on-lan/woli" rel="external nofollow noopener noreferrer" target="_blank">https://www.depicus.com/wake-on-lan/woli</a>。</p><p>该网站还提供了 windows, mac OS, Android, iOS 等不同平台的应用，有需要的可以自行下载。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-12-09-006.png" alt=""></p><p>mac 地址可以在控制台输入 <code>ipconfig /all</code> 获取；</p><p>IP 地址填 <code>域名即可</code>；</p><p>子网掩码为 <code>255.255.255.255</code>；</p><p>端口号为之前设的外部和内部端口号。</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2017-12-09-wake-on-lan/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 报错 __init__() missing 1 required positional argument &#39;on_delete&#39;</title>
      <link>https://blog.xungejiang.com/2017-12-23-django-error-ondelete/</link>
      <guid>https://blog.xungejiang.com/2017-12-23-django-error-ondelete/</guid>
      <pubDate>Mon, 08 Oct 2018 03:32:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>content<br>{:toc}</li></ul><p>Django 在更新到 2.0 后 报错如下 </p><pre><code>TypeError: __init__() missing 1 required positional argument: &#39;on_delete&#39;</code></pre><p> 是因为在 Django 2.0 后，models.ForeignKey() 函数 和 models.OneToOneField() 中的 on_delete 参数不再默认为 CASCADE ，而是必须参数 </p><p> 官方文档：<a href="https://docs.djangoproject.com/en/1.11/ref/models/fields/#django.db.models.ForeignKey.on_delete" rel="external nofollow noopener noreferrer" target="_blank">https://docs.djangoproject.com/en/1.11/ref/models/fields/#django.db.models.ForeignKey.on_delete</a></p><p> 修改方法如下 </p><p> 修改之前 </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BlogArticles</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span>    author <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        User<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">"blog_posts"</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span></code></pre><p> 修改之后 </p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BlogArticles</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span>    author <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        User<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">"blog_posts"</span><span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span>    <span class="token punctuation">)</span></code></pre>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2017-12-23-django-error-ondelete/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【翻译】 Is attacking machine learning easier than defending it?</title>
      <link>https://blog.xungejiang.com/2017-11-29-translate-blog2/</link>
      <guid>https://blog.xungejiang.com/2017-11-29-translate-blog2/</guid>
      <pubDate>Mon, 08 Oct 2018 03:32:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>content<br>{:toc}</li></ul><p>原文：<a href="http://www.cleverhans.io/security/privacy/ml/2017/02/15/why-attacking-machine-learning-is-easier-than-defending-it.html" rel="external nofollow noopener noreferrer" target="_blank">Is attacking machine learning easier than defending it?</a></p><p>译文：<a href="http://xungejiang.com/2017/11/29/translate-blog2/" rel="external nofollow noopener noreferrer" target="_blank">攻击机器学习比防御更容易吗?</a></p><p>原文写作日期：2017 年 3 月 15 日 <br> 译文写作日期：2017 年 11 月 29 日</p><p>本文为 <a href="http://www.cleverhans.io/" rel="external nofollow noopener noreferrer" target="_blank">cleverhans-blog</a> 的第二篇博客，作者为 Ian Goodfellow 和 Nicolas Papernot，主要讲解 <strong>对抗性训练 </strong> 和 <strong> 防御性蒸馏</strong> 两种防御方法之间的优势与不足。译者水平有限，存在错误，还望指出。</p><p>转载请注明出处！</p><p>在我们的 <a href="http://www.cleverhans.io/security/privacy/ml/2016/12/15/breaking-things-is-easy.html" rel="external nofollow noopener noreferrer" target="_blank"> 第一篇文章 </a> 中，我们提出了几种攻击者可以打破当前机器学习系统的方式，比如通过毒化学习算法使用的数据[BNL12]，或者制作对抗性样本迫使模型做出错误的预测[SZS13]。在本文中，我们将以对抗性样本为例说明为什么攻击机器学习似乎比防御更容易。换句话说，我们将详细介绍为什么我们还没有完全有效的防御对抗性样本的一些原因，并推测我们是否能够进行防御。</p><p>对抗性样本是机器学习模型的输入，它是由攻击者设计，用来欺骗模型产生不正确的输出。例如，我们给一个熊猫图片添加一个经过计算的小扰动，使图像被认为是一个高可信度的长臂猿[GSS14]：</p><p><img src="http://cleverhans.io/assets/adversarial-example.png" alt=""> </p><p>到目前为止，设计出这种欺骗模型的方法要比设计出不能欺骗模型的方法容易得多。</p><h2 id="我们如何使 ML 模型面对对抗性样本时更加强壮？-How-have-we-tried-to-make-ML-models-more-robust-to-adversarial-examples"><a href="# 我们如何使 ML 模型面对对抗性样本时更加强壮？-How-have-we-tried-to-make-ML-models-more-robust-to-adversarial-examples" class="headerlink" title="我们如何使 ML 模型面对对抗性样本时更加强壮？ (How have we tried to make ML models more robust to adversarial examples?)"></a>我们如何使 ML 模型面对对抗性样本时更加强壮？ (How have we tried to make ML models more robust to adversarial examples?)</h2><p>我们先介绍下两种防御方法：对抗性训练和防御性蒸馏。防御者如何试图使机器学习模型更加强壮并减轻对抗性样本的攻击效果。</p><p>对抗性训练旨在训练时主动产生对抗性样本，在测试时提取对抗性样本来改进模型的泛化。这个想法是由 Szegedy 等人首次提出的 [SZS13]，但由于产生对抗性样本的成本太高而不实用。 Goodfellow 等人展示了如何利用快速梯度符号方法低成本地产生对抗性样本，并且使得在训练过程中高计算效率地产生大批对抗性样本 [GSS14]。然后该模型被训练成将相同的标签分配给相对于原始样本的对抗性样本。例如：我们拍摄一张猫的照片，并对其进行扰动以欺骗模型，使其认为它是秃鹫，然后告诉模型这张照片仍然是一只猫。对抗训练的一个开源实现可以在<a href="https://github.com/openai/cleverhans" rel="external nofollow noopener noreferrer" target="_blank">cleverhans</a> 库中找到，其使用方法在下面的 <a href="https://github.com/openai/cleverhans/blob/master/tutorials/mnist_tutorial_tf.md" rel="external nofollow noopener noreferrer" target="_blank"> 教程</a> 中有说明。</p><p>防御性蒸馏平滑模型的决策表面在对抗方向被攻击者利用。蒸馏是一种训练过程，其中一个模型被训练以预测由先前训练的另一个模型输出的概率。蒸馏最初由 Hinton 等人提出。在 [HVD15] 中，其目标是用一个小模型来模拟一个大型的、计算成本很高的模型。防御性蒸馏有一个不同的目标，即简单地使最终模型的反应更加平滑，所以即使两个模型的大小相同也能起作用。训练一个模型来预测另一个具有相同架构的模型输出看起来是违反直觉的。它的工作原理是，第一个模型是用“硬”标签（图像 100％概率是狗而不是猫）训练，然后第二个模型用“软”标签（图像 95％概率是狗而不是猫）训练。第二个蒸馏模型对于诸如快速梯度符号法 [PM16] 或基于雅可比行列式显著图法 [PMW16] 的攻击更为鲁棒。这两种攻击的实现也分别在 <a href="https://github.com/openai/cleverhans/blob/master/tutorials/mnist_tutorial_tf.md" rel="external nofollow noopener noreferrer" target="_blank"> 这里 </a> 和<a href="https://github.com/openai/cleverhans/blob/master/tutorials/mnist_tutorial_jsma.md" rel="external nofollow noopener noreferrer" target="_blank"> 这里 </a> 的<a href="https://github.com/openai/cleverhans" rel="external nofollow noopener noreferrer" target="_blank">cleverhans</a> 上提供。(已经 404 。。2333)</p><h2 id="一个失败的防御：“梯度掩蔽”-A-failed-defense-“gradient-masking”"><a href="# 一个失败的防御：“梯度掩蔽”-A-failed-defense-“gradient-masking”" class="headerlink" title="一个失败的防御：“梯度掩蔽” (A failed defense: “gradient masking”)"></a>一个失败的防御：“梯度掩蔽” (A failed defense: “gradient masking”)</h2><p>大多数对抗性样本构建技术使用模型的梯度来进行攻击。换句话说，一张飞机的照片，他们测试在图像空间中往哪个方向移动使得图片识别为“猫”的概率增加，然后他们往那个方向进行移动（换句话说，扰乱了输入）。这样新修改后的图像被误认为是猫。</p><p>但是，如果没有梯度，如果对图像进行微小的修改不会导致模型的输出发生变化呢？这似乎提供了一些防御，因为攻击者不知道怎样去“推”图像。</p><p>我们可以很容易想到一些非常微不足道的方法来摆脱梯度。例如，大多数图像分类模型可以以两种模式运行：一种模式是输出最可能类别的标识，另一种模式是输出概率。如果模型的输出是“99.9％的飞机，0.1％的猫”，那么输入的一个微小的变化会给输出带来一个微小的变化，梯度告诉我们哪些变化会增加“猫”类的概率。如果我们在输出模式只是“飞机”的模式下运行模型，那么对输入的一个微小的变化根本不会改变输出，而梯度不会告诉我们任何事情。让我们做一个思考实验，如何通过以“最有可能的类”模式而不是“概率模式”运行它来防御对抗性样本。攻击者再也不能找到分类为猫的扰乱输入，所以我们可能会有一些防御。不幸的是，之前被归类为猫的图片现在仍被归类为猫。如果攻击者可以猜测哪些点是对抗性样本，这些点将仍然会被错误的分类。我们并没有使模型更加鲁棒，我们只是给了攻击者更少的线索来找出模型防御的漏洞。更不幸的是，事实证明攻击者有一个非常好的策略来猜测防御漏洞的位置。攻击者可以训练他们自己的模型，一个具有梯度的光滑模型，为他们的模型制作对抗性样本，然后将这些对抗性样本用于我们的非光滑模型。很多时候，我们的模型也会错误地分类这些样本。最后，我们的思想实验表明，隐藏梯度并没有达到我们的目的。</p><p>因此，我们称之为有缺陷的防御策略梯度掩蔽，这个术语在 [PMG16] 中有介绍。执行梯度掩蔽的防御策略通常导致在特定方向和训练点的邻域中模型变得非常平滑，这使得攻击者难以找到攻击方向的梯度去扰乱输入。然而，攻击者可以训练一个替代模型：一个模仿防御模型的副本，通过观察防御模型分配给攻击者输入的标签。[PMG16]中介绍了执行这种模型提取攻击的过程。然后攻击者可以使用替代模型的梯度来找到被防御模型错误分类的对抗性样本。在下面的图中，我们再现 [PMS16] 中对梯度掩蔽的讨论，我们用一维 ML 问题来说明这种攻击策略。对于高维问题，梯度掩蔽现象会加剧，但难以描述。</p><p><img src="http://cleverhans.io/assets/gradient-masking.png" alt=""> </p><p>令人惊讶的是，我们发现对抗性训练和防御性蒸馏都意外地表现出一种梯度掩蔽。如果我们将对抗性样本从一个模型转移到另一个模型，并且用这些防御之一进行训练，即使对第二个模型的直接攻击会失败，攻击通常也会成功[PMG16]。这表明两种训练方法都能使模型变平滑和消除梯度，而不是确保对多个点进行正确地分类。</p><h2 id="打“地鼠”游戏 -Playing-a-game-of-“whack-a-mole”"><a href="# 打“地鼠”游戏 -Playing-a-game-of-“whack-a-mole”" class="headerlink" title="打“地鼠”游戏 (Playing a game of “whack-a-mole”)"></a>打“地鼠”游戏 (Playing a game of “whack-a-mole”)</h2><p>在“隐藏梯度”的游戏中，我们看到梯度掩蔽并不是很好的防御。它防御使用梯度的攻击者，但是如果攻击者知道我们正在使用这种防御，那么他们只需要切换到移植攻击。在安全术语中，这意味着梯度掩蔽不是一种自适应防御。</p><p>迄今为止提出的大多数针对对抗性样本的防御措施根本不起作用，但是有效的那些并不是自适应的。这意味着就像他们在玩一个打地鼠游戏一样：他们关闭了一些漏洞，但是让其他人打开。</p><p>对抗训练需要选择算法来产生对抗性样本。通常情况下，这个模型被训练成可以抵抗在一个步骤中产生的低成本对抗性样本，例如快速梯度符号方法一样。经过训练能抵制这些低成本对抗性样本，这个模型通常能成功地抵制同类低成本的新对抗性样本。如果我们使用高成本的、迭代的对抗性样本，就像 [SZS13] 中的那些例子，那么模型通常就会被愚弄。</p><p>保证适应性是具有挑战性的。灵感可以从差异隐私的框架中得到，它提供了随机算法不会暴露个人用户隐私的正式保证。这一保证不会对攻击者的知识或能力做出假设，因此能够面对未来由攻击者设计的假想攻击。</p><h2 id="为什么很难防御对抗性样本？-Why-is-it-hard-to-defend-against-adversarial-examples"><a href="# 为什么很难防御对抗性样本？-Why-is-it-hard-to-defend-against-adversarial-examples" class="headerlink" title="为什么很难防御对抗性样本？ (Why is it hard to defend against adversarial examples?)"></a>为什么很难防御对抗性样本？ (Why is it hard to defend against adversarial examples?)</h2><p>对抗性样本很难防御，因为很难构建对抗性样本制定过程的理论模型。对抗性样本是许多 ML 模型（包括神经网络）的非线性和非凸的优化问题的解决方案。由于我们没有很好的理论工具去描述这些复杂的优化问题的解决方案，所以很难做出任何一种防御理论来排除一系列对抗性样本。</p><p>从另一个角度来看，对抗性样本很难防御，因为它们需要机器学习模型来为每一个可能的输入生成好的输出。大多数情况下，机器学习模型工作得很好，但只能处理遇到所有可能输入中的很少一部分。</p><p>由于可能的输入的量非常巨大，设计出真正自适应的防御是非常困难的。</p><h2 id="其他攻击和防御方法 -Other-attack-and-defense-scenarios"><a href="# 其他攻击和防御方法 -Other-attack-and-defense-scenarios" class="headerlink" title="其他攻击和防御方法 (Other attack and defense scenarios)"></a>其他攻击和防御方法 (Other attack and defense scenarios)</h2><p>其他几种对机器学习的攻击也是难以防御。在本文中，我们专注于试图混淆机器学习模型测试过程的输入。但是其他类型的攻击是可能的，例如基于暗中修改训练数据的攻击，使得模型学习攻击者希望它进行的行为。</p><p>对抗性机器学习的一个亮点是差分隐私，我们实际上有理论上的观点，即某些训练算法可以防止攻击者从训练好的模型中恢复关于训练集的敏感信息。</p><p>将机器学习与攻击和防御都可能的其他场景进行比较是有趣的。</p><p>在密码学中，防御者似乎有优势。给定一系列合理的假设，例如加密算法的正确实现，防御者可以可靠地发送攻击者无法解密的消息。</p><p>在物理冲突中，攻击者似乎有优势。建造核弹比建造一个能够承受核爆的城市要容易得多。热力学的第二定律似乎意味着，如果防御要求将熵维持在某个阈值以下，那么即使没有明确的攻击者有意引起这种熵的增加，防御者也必然随着时间熵增加而最终失去。</p><p>监督学习的“没有免费午餐定理”[W96]指出，在所有可能的数据集进行平均，没有任何机器学习算法在测试时间的新点上比其他算法更好。乍一看，这似乎表明，所有的算法都同样容易受到对抗性样本。然而，“没有免费午餐定理”只适用于我们对问题结构不作假设的情况。当我们研究对抗性样本时，我们假设输入的小扰动不应该改变输出类别，所以一般形式的“没有免费午餐定理”并不适用。</p><p>正式揭露攻击者的鲁棒性和对清洁数据的模型表现之间的矛盾关系仍然是一个活跃的研究问题。在 [PMS16] 中，针对机器学习的对抗性样本的第一个“没有免费午餐定理”表明，在从有限的数据中学习时存在这样的矛盾。结果表明，防御者可以通过转向更丰富的假设类别来阻挠对抗性样本。然而，这种矛盾关系是由于没有合适的数据和学习算法来学习高保真模型所面临的挑战。</p><h2 id="总结"><a href="# 总结" class="headerlink" title="总结"></a>总结 </h2><p> 对抗性样本的研究是令人兴奋的，因为许多最重要的问题在理论和应用方面都是开放的。在理论上，还没有人知道防御对抗性样本是否是一个理论上没有希望的努力（如试图找到一个通用的机器学习算法），或者是否存在一个最优策略会使防御者更有利。（如在密码学和差分隐私）。在应用方面，还没有人设计出真正强大的防御算法，可以抵抗各种对抗性样本的攻击算法。我们希望我们的读者能够得到启发，解决其中的一些问题。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[BNL12] Biggio, B., Nelson, B., &amp; Laskov, P. (2012). Poisoning attacks against support vector machines. arXiv preprint arXiv:1206.6389.</p><p>[GSS14] Goodfellow, I. J., Shlens, J., &amp; Szegedy, C. (2014). Explaining and harnessing adversarial examples. arXiv preprint arXiv:1412.6572.</p><p>[HVD15] Hinton, Geoffrey, Oriol Vinyals, and Jeff Dean. “Distilling the knowledge in a neural network.” arXiv preprint arXiv:1503.02531 (2015).</p><p>[PM16] Papernot, N., &amp; McDaniel, P. (2016). On the effectiveness of defensive distillation. arXiv preprint arXiv:1607.05113.</p><p>[PMG16] Papernot, N., McDaniel, P., Goodfellow, I., Jha, S., Berkay Celik, Z., &amp; Swami, A. (2016). Practical Black-Box Attacks against Deep Learning Systems using Adversarial Examples. arXiv preprint arXiv:1602.02697.</p><p>[PMS16] Papernot, N., McDaniel, P., Sinha, A., &amp; Wellman, M. (2016). Towards the Science of Security and Privacy in Machine Learning. arXiv preprint arXiv:1611.03814.</p><p>[PMW16] Papernot, N., McDaniel, P., Wu, X., Jha, S., &amp; Swami, A. (2016, May). Distillation as a defense to adversarial perturbations against deep neural networks. In the 2016 IEEE Symposium on Security and Privacy (pp. 582-597).</p><p>[SZS13] Szegedy, C., Zaremba, W., Sutskever, I., Bruna, J., Erhan, D., Goodfellow, I., &amp; Fergus, R. (2013). Intriguing properties of neural networks. arXiv preprint arXiv:1312.6199.</p><p>[W96] Wolpert, David H. (1996). The lack of a priori distinction between learning algorithms. Neural Computation</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2017-11-29-translate-blog2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows 下 MySQL 绿色版安装详细教程</title>
      <link>https://blog.xungejiang.com/2017-10-17-mysql-install/</link>
      <guid>https://blog.xungejiang.com/2017-10-17-mysql-install/</guid>
      <pubDate>Mon, 08 Oct 2018 03:32:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>content<br>{:toc}</li></ul><p>MySQL 绿色版安装详细操作步骤。</p><p>MySQL 绿色版优点是安装时间短，可在一部电脑兼容多个版本的 MySQL。</p><h2 id="1- 下载。"><a href="#1- 下载。" class="headerlink" title="1. 下载。"></a>1. 下载。</h2><p>下载地址：<a href="http://downloads.mysql.com/archives/get/file/mysql-5.7.11-winx64.zip" rel="external nofollow noopener noreferrer" target="_blank">http://downloads.mysql.com/archives/get/file/mysql-5.7.11-winx64.zip</a></p><p>可以复制链接使用迅雷下载，速度较快。</p><h2 id="2- 解压 -MySQL- 压缩包"><a href="#2- 解压 -MySQL- 压缩包" class="headerlink" title="2. 解压 MySQL 压缩包"></a>2. 解压 MySQL 压缩包 </h2><p> 解压到指定目录，我的是 “C:\MySQL\mysql-5.7.11-winx64”</p><h2 id="3- 修改配置文件"><a href="#3- 修改配置文件" class="headerlink" title="3. 修改配置文件"></a>3. 修改配置文件 </h2><p> 将解压目录中的 <code>my-default.ini</code> 文件重命名为 <code>my.ini</code>，并将内容替换为以下即可</p><pre class=" language-ini"><code class="language-ini"><span class="token selector">[mysqld]</span># 注意：路径是反斜线，也可以改为两个正斜线，还可以加上双引号# 设置 mysql 的安装目录<span class="token constant">basedir</span> <span class="token attr-value"><span class="token punctuation">=</span> C:\MySQL\mysql-5.7.11-winx64</span># 设置 mysql 数据库的数据的存放目录，必须是 data<span class="token constant">datadir</span> <span class="token attr-value"><span class="token punctuation">=</span> C:\MySQL\mysql-5.7.11-winx64\data</span># mysql 端口<span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306</span><span class="token constant">sql_mode</span> <span class="token attr-value"><span class="token punctuation">=</span> NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span># 服务端编码格式<span class="token constant">character_set_server</span> <span class="token attr-value"><span class="token punctuation">=</span> utf8</span># 不加这句话可能报错<span class="token constant">innodb_flush_method</span> <span class="token attr-value"><span class="token punctuation">=</span> normal</span></code></pre><h2 id="4- 安装 MySQL 服务"><a href="#4- 安装 MySQL 服务" class="headerlink" title="4. 安装 MySQL 服务"></a>4. 安装 MySQL 服务 </h2><p> 以管理员身份运行 cmd</p><pre><code>:: 进入 `C:\MySQL\mysql-5.7.11-winx64\bin` 目录下，cd C:\MySQL\mysql-5.7.11-winx64\bin:: 安装 MySQL 服务mysqld -install:: 显示 “Service successfully installed.” 即成功:: 初始化 MySQL (若安装目录有 data 文件夹则删除)mysqld --initialize:: 启动 MySQL 服务net start mysql:: 显示 “MySQL 服务正在启动 .”:: 显示 “MySQL 服务已经启动成功。”:: 若启动失败，在任务管理器中找到 “mysqld.exe” 进程，并删除</code></pre><h2 id="5- 更改默认密码"><a href="#5- 更改默认密码" class="headerlink" title="5. 更改默认密码"></a>5. 更改默认密码 </h2><p> 打开 MySQL 安装目录，打开 data 目录，有一个 <code>.err</code> 后缀名的文件，用编辑器打开</p><p>如果每一行都是 <code>[Warning]</code>，没有 <code>[Error]</code>，就说明安装正确，并且最后一行应该如下</p><pre><code>[Note] A temporary password is generated for root@localhost: oK-R(foa&gt;4by</code></pre><p>后面 12 个字符为默认生成初始密码，复制</p><p>打开 cmd ，输入以下命令</p><pre><code>mysql -u root -p:: 显示 “Enter password:” 后粘贴密码</code></pre><p>若出现 “Welcome to the MySQL monitor.  Commands end with ; or \g. …” 则说明密码正确</p><p>若出现 “ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES)” 则说明密码错误，编辑 MySQL 配置文件 <code>my.ini</code> ，在 <code>[mysqld]</code> 这个条目下加入 <code>skip-grant-tables</code>，保存退出后重启 MySQL</p><p>密码正确后更改默认密码</p><pre><code>mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;newPassword&#39;;</code></pre><p><code>newPassword</code> 更改为新密码</p><h2 id="6- 卸载 -MySQL- 服务"><a href="#6- 卸载 -MySQL- 服务" class="headerlink" title="6. 卸载 MySQL 服务"></a>6. 卸载 MySQL 服务 </h2><p> 进入 <code>C:\MySQL\mysql-5.7.11-winx64\bin</code> 目录下，输入</p><pre><code>mysqld -remove</code></pre><p>或者</p><pre><code>sc delete mysql</code></pre><p>执行卸载服务。</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2017-10-17-mysql-install/#disqus_thread</comments>
    </item>
    
    <item>
      <title>《跟老齐学 Python 轻松入门》学习笔记 --1. 基本对象类型</title>
      <link>https://blog.xungejiang.com/2017-10-05-python-easy/</link>
      <guid>https://blog.xungejiang.com/2017-10-05-python-easy/</guid>
      <pubDate>Mon, 08 Oct 2018 03:32:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>content<br>{:toc}</li></ul><p>本文根据 《跟老齐学 python 轻松入门》 的知识点整理，主要是代码打了一遍做了总结，非常零基础。</p><h2 id="数和数的运算"><a href="# 数和数的运算" class="headerlink" title="数和数的运算"></a>数和数的运算</h2><pre class=" language-python"><code class="language-python">id<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 查看每个对象的内存地址</span>help<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 查看其它函数文档</span>type<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 查看对象类型</span>dir<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 查看模块中函数名称</span></code></pre><ul><li>python 自动解决大整数问题</li></ul><h3 id="加法"><a href="# 加法" class="headerlink" title="加法"></a>加法</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">4.0</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token number">6.0</span></code></pre><h3 id="乘法"><a href="# 乘法" class="headerlink" title="乘法"></a>乘法</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 9^2</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">9</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token number">81</span><span class="token comment" spellcheck="true"># 2 * 10^3</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2e3</span><span class="token number">2000.0</span></code></pre><h3 id="除法"><a href="# 除法" class="headerlink" title="除法"></a>除法</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token number">2.5</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">5</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token number">2</span></code></pre><h3 id="异常计算"><a href="# 异常计算" class="headerlink" title="异常计算"></a>异常计算 </h3><p> 浮点数十进制转化为二进制造成误差</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">10.0</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token number">3.3333333333333335</span></code></pre><p>解决方法 1：使用 decimal 模块(小数)</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> decimal<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> decimal<span class="token punctuation">.</span>Decimal<span class="token punctuation">(</span><span class="token string">"10.0"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> decimal<span class="token punctuation">.</span>Decimal<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">/</span> bDecimal<span class="token punctuation">(</span><span class="token string">'3.333333333333333333333333333'</span><span class="token punctuation">)</span></code></pre><p>解决方法 1：使用 fractions 模块(分数)</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> fractions <span class="token keyword">import</span> Fraction  <span class="token comment" spellcheck="true"># fractions 是一个大模块(库)，</span><span class="token comment" spellcheck="true"># 只想用其中的子模块 Fraction</span><span class="token operator">>></span><span class="token operator">></span> Fraction<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Fraction<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span></code></pre><h3 id="余数"><a href="# 余数" class="headerlink" title="余数"></a>余数</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">5</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">5.0</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token number">1.0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">>></span><span class="token operator">></span> divmod<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回商和余数</span></code></pre><h3 id="四舍五入"><a href="# 四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> round<span class="token punctuation">(</span><span class="token number">1.23456</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">1.23</span></code></pre><p>浮点数十进制转化为二进制造成误差</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> round<span class="token punctuation">(</span><span class="token number">1.2345</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">1.234</span>  <span class="token comment" spellcheck="true"># 应该是 1.235</span><span class="token operator">>></span><span class="token operator">></span> round<span class="token punctuation">(</span><span class="token number">2.235</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">2.23</span>   <span class="token comment" spellcheck="true"># 应该是 2.24</span></code></pre><h3 id="math- 模块"><a href="#math- 模块" class="headerlink" title="math 模块"></a>math 模块</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> math<span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>pi<span class="token number">3.141592653589793</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">4</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token number">16</span><span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">16.0</span><span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token number">3.0</span><span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">3.92</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>fabs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">2.0</span><span class="token operator">>></span><span class="token operator">></span> abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>fmod<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">2.0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">5</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token number">2</span></code></pre><h2 id="字符串"><a href="# 字符串" class="headerlink" title="字符串"></a>字符串 </h2><h3 id="键盘输入"><a href="# 键盘输入" class="headerlink" title="键盘输入"></a> 键盘输入</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># input() 函数进行输入赋值</span><span class="token operator">>></span><span class="token operator">></span> age <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"how old are you?"</span><span class="token punctuation">)</span>how old are you?<span class="token number">10</span>  <span class="token comment" spellcheck="true"># 提示输入内容，通过键盘输入 10</span><span class="token operator">>></span><span class="token operator">></span> age<span class="token string">'10'</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span></code></pre><h3 id="原始字符串"><a href="# 原始字符串" class="headerlink" title="原始字符串"></a>原始字符串</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dos <span class="token operator">=</span> <span class="token string">"c:\news"</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>dos<span class="token punctuation">)</span>c<span class="token punctuation">:</span>ews<span class="token operator">>></span><span class="token operator">></span> dos <span class="token operator">=</span> <span class="token string">"c:\\news"</span>  <span class="token comment" spellcheck="true"># 转义字符解决</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>dos<span class="token punctuation">)</span>c<span class="token punctuation">:</span>\news<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">"c:\news"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># r 开头的字符串是原始字符串</span>c<span class="token punctuation">:</span>\news</code></pre><h3 id="字符串切片"><a href="# 字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lang <span class="token operator">=</span> <span class="token string">'study python'</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> lang<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token string">'tudy python'</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> lang<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token string">'study python'</span><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> lang<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token string">'study pyth'</span><span class="token operator">>></span><span class="token operator">></span> e <span class="token operator">=</span> lang<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> e<span class="token string">'study pyth'</span><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> lang<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token string">'tudy python'</span></code></pre><h3 id="连接字符串"><a href="# 连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"py"</span> <span class="token operator">+</span> <span class="token string">"thon"</span><span class="token string">'python'</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">1996</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token string">"xunge"</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">+</span> bTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>TypeError<span class="token punctuation">:</span> unsupported operand type<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token operator">+</span><span class="token punctuation">:</span> <span class="token string">'int'</span> <span class="token operator">and</span> <span class="token string">'str'</span><span class="token operator">>></span><span class="token operator">></span> str<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token string">'1996xunge'</span><span class="token operator">>></span><span class="token operator">></span> repr<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token string">'1996xunge'</span><span class="token comment" spellcheck="true"># str() 与 repr() 区别:</span><span class="token comment" spellcheck="true"># str() 转化后的结果更适合与人进行交互</span><span class="token comment" spellcheck="true"># repr()转化后的结果则可以被 Python 的 解释器阅读</span><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token string">'xunge \n'</span><span class="token operator">>></span><span class="token operator">></span> str<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token string">'xunge \n'</span><span class="token operator">>></span><span class="token operator">></span> repr<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token string">"'xunge \\n'"</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>xunge <span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'xunge \n'</span><span class="token operator">>></span><span class="token operator">></span> </code></pre><h3 id="判断元素是否在字符串中"><a href="# 判断元素是否在字符串中" class="headerlink" title="判断元素是否在字符串中"></a>判断元素是否在字符串中</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str <span class="token operator">=</span> <span class="token string">"python"</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"th"</span> <span class="token keyword">in</span> str<span class="token boolean">True</span></code></pre><h3 id="最值和比较"><a href="# 最值和比较" class="headerlink" title="最值和比较"></a>最值和比较</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> max<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token string">'y'</span><span class="token operator">>></span><span class="token operator">></span> min<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token string">'h'</span><span class="token operator">>></span><span class="token operator">></span> ord<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 字符转化为编码</span><span class="token number">121</span><span class="token operator">>></span><span class="token operator">></span> chr<span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 编码转化为字符</span><span class="token string">'y'</span></code></pre><h3 id="测量长度"><a href="# 测量长度" class="headerlink" title="测量长度"></a>测量长度</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token number">6</span></code></pre><h3 id="字符串格式化输出"><a href="# 字符串格式化输出" class="headerlink" title="字符串格式化输出"></a>字符串格式化输出</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"I love %s"</span> <span class="token operator">%</span> <span class="token string">"gong yu xin"</span><span class="token string">'I love gong yu xin'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"I love {0}.{1}.{2}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"gong"</span><span class="token punctuation">,</span> <span class="token string">"yu"</span><span class="token punctuation">,</span> <span class="token string">"xin"</span><span class="token punctuation">)</span><span class="token string">'I love gong.yu.xin'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"I love {0:8}.{1:>8}.{2:^8}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"gong"</span><span class="token punctuation">,</span> <span class="token string">"yu"</span><span class="token punctuation">,</span> <span class="token string">"xin"</span><span class="token punctuation">)</span><span class="token string">'I love gong    .      yu.  xin   '</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"I love {0:.2}.{1:>8.2}.{2:^4.2}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"gong"</span><span class="token punctuation">,</span> <span class="token string">"yu"</span><span class="token punctuation">,</span> <span class="token string">"xin"</span><span class="token punctuation">)</span><span class="token string">'I love go.      yu. xi '</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"She is {0:d} years old and {1:f}cm"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">175.1221</span><span class="token punctuation">)</span><span class="token string">'She is 21 years old and 175.122100cm'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"She is {0:4d} years old and {1:7.2f}cm"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">175.1221</span><span class="token punctuation">)</span><span class="token string">'She is   21 years old and  175.12cm'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"She is {0:04d} years old and {1:07.2f}cm"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">175.1221</span><span class="token punctuation">)</span><span class="token string">'She is 0021 years old and 0175.12cm'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"I like {lang} and {name}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>lang <span class="token operator">=</span> <span class="token string">"python"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"gongyuxin"</span><span class="token punctuation">)</span><span class="token string">'I like python and gongyuxin'</span><span class="token operator">>></span><span class="token operator">></span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"gongyuxin"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{name} is {age}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token operator">**</span>data<span class="token punctuation">)</span><span class="token string">'gongyuxin is 21'</span></code></pre><h3 id="常用字符串方法"><a href="# 常用字符串方法" class="headerlink" title="常用字符串方法"></a>常用字符串方法</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 判断是否全是字母</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"python"</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"python2"</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token comment" spellcheck="true"># 根据分隔符分割字符串</span><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token string">"I love gong yu xin"</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'love'</span><span class="token punctuation">,</span> <span class="token string">'gong'</span><span class="token punctuation">,</span> <span class="token string">'yu'</span><span class="token punctuation">,</span> <span class="token string">'xin'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 去掉字符串两头的空格</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 去掉两边空格</span><span class="token string">'gong'</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 去掉左边空格</span><span class="token string">'gong '</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 去掉右边空格</span><span class="token string">' gong'</span><span class="token comment" spellcheck="true"># 字符大小写转换</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token string">"gong yu xin"</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> a<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 小写字母转换为大写字母</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token string">'GONG YU XIN'</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token string">'gong yu xin'</span>      <span class="token comment" spellcheck="true"># 原对象未变</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> b<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 大写字母转换为小写字母</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token string">'gong yu xin'</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 把字符串的第一个字母变成大写</span><span class="token string">'Gong yu xin'</span><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> a<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 每个单词首字母大写</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token string">'Gong Yu Xin'</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>istitle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token comment" spellcheck="true"># join() 拼接字符串</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token string">"www.xungejiang.com"</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> b<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token punctuation">[</span><span class="token string">'www'</span><span class="token punctuation">,</span> <span class="token string">'xungejiang'</span><span class="token punctuation">,</span> <span class="token string">'com'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"."</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token string">'www.xungejiang.com'</span></code></pre><h2 id="列表"><a href="# 列表" class="headerlink" title="列表"></a>列表 </h2><h3 id="列表切片"><a href="# 列表切片" class="headerlink" title="列表切片"></a> 列表切片</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gong'</span><span class="token punctuation">,</span> <span class="token number">831</span><span class="token punctuation">,</span> <span class="token string">'xungejiang.com'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">831</span><span class="token punctuation">,</span> <span class="token string">'xungejiang.com'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token string">'com'</span><span class="token comment" spellcheck="true"># -1 是右边第一个</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'xungejiang.com'</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># a[(3-3):(3-1)] = a[0:2]</span><span class="token punctuation">[</span><span class="token string">'gong'</span><span class="token punctuation">,</span> <span class="token number">831</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 完整写法 seq[start:end:step]</span><span class="token operator">>></span><span class="token operator">></span> alst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> alst<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> alst<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> alst<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true"># 反转</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> alst<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 使用 reversed() 函数将原来序列对象反转</span><span class="token comment" spellcheck="true"># 使用 list() 函数将迭代对象转换为列表显示</span><span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>alst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span></code></pre><h3 id="列表基本操作"><a href="# 列表基本操作" class="headerlink" title="列表基本操作"></a>列表基本操作</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'jiang'</span><span class="token punctuation">,</span> <span class="token string">'xun'</span><span class="token punctuation">,</span> <span class="token string">'zhi'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># len() 列表长度</span><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> alst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gong'</span><span class="token punctuation">,</span> <span class="token string">'yu'</span><span class="token punctuation">,</span> <span class="token string">'xin'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># "+" 连接两个序列</span><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">+</span> alst<span class="token punctuation">[</span><span class="token string">'jiang'</span><span class="token punctuation">,</span> <span class="token string">'xun'</span><span class="token punctuation">,</span> <span class="token string">'zhi'</span><span class="token punctuation">,</span> <span class="token string">'gong'</span><span class="token punctuation">,</span> <span class="token string">'yu'</span><span class="token punctuation">,</span> <span class="token string">'xin'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># "*" 重复序列元素</span><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">[</span><span class="token string">'jiang'</span><span class="token punctuation">,</span> <span class="token string">'xun'</span><span class="token punctuation">,</span> <span class="token string">'zhi'</span><span class="token punctuation">,</span> <span class="token string">'jiang'</span><span class="token punctuation">,</span> <span class="token string">'xun'</span><span class="token punctuation">,</span> <span class="token string">'zhi'</span><span class="token punctuation">,</span> <span class="token string">'jiang'</span><span class="token punctuation">,</span> <span class="token string">'xun'</span><span class="token punctuation">,</span> <span class="token string">'zhi'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 序列是否包含该元素</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"jiang"</span> <span class="token keyword">in</span> lst<span class="token boolean">True</span><span class="token comment" spellcheck="true"># 按照元素字典顺序进行比较</span><span class="token operator">>></span><span class="token operator">></span> max<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token string">'zhi'</span><span class="token operator">>></span><span class="token operator">></span> min<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token string">'jiang'</span><span class="token comment" spellcheck="true"># 修改列表元素</span><span class="token comment" spellcheck="true"># list.append(x) 向列表中追加元素 x</span><span class="token operator">>></span><span class="token operator">></span> cities <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'harbin'</span><span class="token punctuation">,</span> <span class="token string">'changchun'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> cities<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'beijing'</span><span class="token operator">>></span><span class="token operator">></span> cities<span class="token punctuation">[</span><span class="token string">'harbin'</span><span class="token punctuation">,</span> <span class="token string">'beijing'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> cities<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'shanghai'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> cities<span class="token punctuation">[</span><span class="token string">'harbin'</span><span class="token punctuation">,</span> <span class="token string">'beijing'</span><span class="token punctuation">,</span> <span class="token string">'shanghai'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># list.extend([L]) 向列表中追加列表 L 的元素</span><span class="token operator">>></span><span class="token operator">></span> la <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> lb <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'jiang'</span><span class="token punctuation">,</span> <span class="token string">'gong'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> la<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>lb<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> la<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'jiang'</span><span class="token punctuation">,</span> <span class="token string">'gong'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> lb<span class="token punctuation">[</span><span class="token string">'jiang'</span><span class="token punctuation">,</span> <span class="token string">'gong'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># append() 和 extend() 的区别</span><span class="token comment" spellcheck="true"># append() 是整建制的追加</span><span class="token comment" spellcheck="true"># extend() 是个体化扩编</span><span class="token operator">>></span><span class="token operator">></span> alst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> blst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> clst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"jiang"</span><span class="token punctuation">,</span> <span class="token string">"gong"</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> alst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>clst<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> alst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'jiang'</span><span class="token punctuation">,</span> <span class="token string">'gong'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span>alst<span class="token punctuation">)</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> blst<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>clst<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> blst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'jiang'</span><span class="token punctuation">,</span> <span class="token string">'gong'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span>blst<span class="token punctuation">)</span><span class="token number">5</span><span class="token comment" spellcheck="true"># list.count(x) x 元素出现次数</span><span class="token operator">>></span><span class="token operator">></span> la <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> la<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token comment" spellcheck="true"># list.insert(i, x) 将 x 插入到索引是 i 的元素前面</span><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"gong"</span><span class="token punctuation">,</span> <span class="token string">"xin"</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"yu"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">[</span><span class="token string">'gong'</span><span class="token punctuation">,</span> <span class="token string">'yu'</span><span class="token punctuation">,</span> <span class="token string">'xin'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># list.remove(x) 删除第一次出现的 x 元素，无返回值</span><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"c++"</span><span class="token punctuation">,</span> <span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"python"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">[</span><span class="token string">'c++'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># list.pop([i]) 删除索引为 i 的元素，并将删除元素作为返回值。</span><span class="token comment" spellcheck="true"># i 为空则删除列表最后一个</span><span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'python'</span><span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">[</span><span class="token string">'c++'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># list.reverse(L) 将元素顺序反转，不返回值</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># reversed(L) 实现对列表的反向迭代</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> reversed<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token operator">&lt;</span>list_reverseiterator object at <span class="token number">0x0000015DFC053710</span><span class="token operator">></span><span class="token comment" spellcheck="true"># list.sort() 对列表进行排序</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 从大到小排序</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 按字符串长度排序</span><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"c++"</span><span class="token punctuation">,</span> <span class="token string">"basic"</span><span class="token punctuation">,</span> <span class="token string">"pascal"</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key <span class="token operator">=</span> len<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">[</span><span class="token string">'c++'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'basic'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'pascal'</span><span class="token punctuation">]</span></code></pre>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2017-10-05-python-easy/#disqus_thread</comments>
    </item>
    
    <item>
      <title>群晖 NAS 简单体验</title>
      <link>https://blog.xungejiang.com/2017-07-31-NAS-introduction/</link>
      <guid>https://blog.xungejiang.com/2017-07-31-NAS-introduction/</guid>
      <pubDate>Mon, 08 Oct 2018 03:32:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>content<br>{:toc}</li></ul><p>好吧，最近家人出去玩不带我，自己在家无聊买了一个 <code>群晖（Synology）DS216play</code> ，<code>2017-7-29</code> 京东购买，下午就到了，狗东物流就是快啊。</p><p>买的是带 <strong>两块</strong> 希捷 <strong>4T</strong> 硬盘的套装，一共 <code>3799</code> 元。单买是 (2250 + 1299 * 2) = 4848 元，相当于赠了一块硬盘，还算挺合适的，当然比 618 贵 100+ 。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-08-04-001.jpg?imageView2/2/w/400" alt=""></p><p>NAS (Network Attached Storage) 网络附属存储，也叫网络存储器，是专门用来存储数据的服务器，家用的主要功能其实就是私有云、照片电影的存储等。在各大网盘都被封掉的时代，买一个 NAS 存放一些私有文件还是一个比较好的选择。</p><p>传说中群晖是买软件送硬件，一是说群晖性价比低，二是说群晖软件做的确实良心，各大平台都有，插件也比较全，可玩性比较高。</p><h2 id="配置 - 群晖"><a href="# 配置 - 群晖" class="headerlink" title="配置 群晖"></a>配置 群晖</h2><p><code>DS216play</code> 是双硬盘位，不支持热插拔硬盘位。个人认为双盘位在家庭中使用足够了，8T (4T * 2) 的硬盘也够使好长时间了。</p><p>把两个硬盘装好后，拧上螺丝，插上电源和网线(连路由器或交换机的 LAN 口)，按下电源键就可以开机啦~</p><p>在连接网络的电脑浏览器输入网址 <a href="http://find.synology.com" rel="external nofollow noopener noreferrer" target="_blank">http://find.synology.com</a> 进行初次配置，设置群晖账号密码等。</p><p>之后会提示你安装推荐插件，先点取消，因为我们还要更改一下 RAID 格式。</p><h2 id="选择 -RAID- 类型"><a href="# 选择 -RAID- 类型" class="headerlink" title="选择 RAID 类型"></a>选择 RAID 类型 </h2><p> 详细的 <code>shr</code> <code>basic</code> <code>raid0</code> <code>raid1</code> <code>raid5</code> <code>raid6</code> 类型介绍参照下面的链接  <a href="http://xungejiang.com/2017/08/03/shr-raid015/" rel="external nofollow noopener noreferrer" target="_blank">http://xungejiang.com/2017/08/03/shr-raid015/</a></p><p>安装完系统后默认为 <code>shr</code> 格式，双盘位时为 raid1 模式，多了数据备份功能，但是容量只有一半，也就是说 2 块 4T 的硬盘只有 4T 的容量。由于是家庭使用，没有太重要的文件，所以没必要进行数据备份，需要把 <code>shr</code> 模式改为 <code>basic</code> 模式，这样可用容量才是 8T。</p><p>具体方法如下。</p><p>如果 NAS 里已经有一些重要的资料不想拿另一个硬盘备份，可以参照这篇博客 <a href="http://support-cn.synology.me/wordpress/?p=589" rel="external nofollow noopener noreferrer" target="_blank">如何将 raid1（SHR）降级为 basic</a>。</p><p>不过如果你已经把资料都备份了，推荐恢复出厂设置。方法如下：</p><p><code>控制面板 </code> -&gt; <code> 更新和还原 </code> -&gt; <code> 重置 </code> -&gt; <code> 删除所有数据</code>。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-08-01-002.png?imageView2/2/w/600" alt=""></p><p>如果你已经安装过插件，不建议你选择 <code>删除存储空间</code> 进行重置，因为插件容易卸载不干净，影响后续使用。所以最好的方法还是恢复出厂设置。</p><p>变为新系统后，在 <code>存储空间管理员 </code> -&gt; <code> 存储空间 </code> -&gt; <code> 删除 </code> -&gt; <code> 删除</code> 将系统默认的 shr 删掉。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-08-01-001.png?imageView2/2/w/600" alt=""></p><p>之后点 <code>新增 </code> -&gt; <code> 自定义 </code> -&gt; <code> 使用所有硬盘容量的存储空间 </code> -&gt; <code> 勾选第一个硬盘 </code> -&gt; <code> 确定 </code> -&gt; <code>Basic</code> -&gt; <code> 否</code> -&gt; <code>下一步 </code> -&gt; <code> 应用</code></p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-08-01-003.png?imageView2/2/w/600" alt=""><br><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-08-01-004.png?imageView2/2/w/600"alt=""><br><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-08-01-005.png?imageView2/2/w/600" alt=""><br><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-08-01-006.png?imageView2/2/w/600"alt=""><br><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-08-01-007.png?imageView2/2/w/600" alt=""><br><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-08-01-008.png?imageView2/2/w/600"alt=""><br><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-08-01-009.png?imageView2/2/w/600" alt=""><br><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-08-01-010.png?imageView2/2/w/600"alt=""><br><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-08-01-011.png?imageView2/2/w/600" alt=""></p><p>同理，第二块硬盘重复上述操作，只是在第四步勾选第二块硬盘。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-08-01-012.png?imageView2/2/w/600" alt=""></p><h2 id="套件中心 - 初体验"><a href="# 套件中心 - 初体验" class="headerlink" title="套件中心 初体验"></a>套件中心 初体验 </h2><p> 群晖的软件可谓是真的良心，很多插件都已经集成，可直接下载，兼容性很强。</p><p><code>存储空间分析器</code>：可查看文件类型、重复文件等。</p><p><code>Cloud Station Server</code>：可下载 <code>Cloud Station Drive</code> 和 <code>Cloud Station Backup</code> 两个客户端，区别是 <code>Drive</code> 是 <strong>双向同步</strong>，保证云端和本地一致；而 <code>Backup</code> 只有新增才会同步，删除本地云端不会删除。</p><p><code>Cloud Sync</code>：可同步各大网盘，以 <code>百度网盘 </code> 为例，配置好后，只要将文件保存至 <code> 我的应用数据</code> -&gt; <code>Cloud Sync</code> 里即可自动下载到 NAS 中，不过速度较慢</p><p><code>Download Station</code>：远程下载，不过速度较慢。由于迅雷取消了第三方软件的远程下载，只有迅雷的下载包和小米路由器可以使用，所以群晖的远程下载也被取消，远程下东西只能用 <code>Download Station</code> 和 同步云盘。</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2017-07-31-NAS-introduction/#disqus_thread</comments>
    </item>
    
    <item>
      <title>群晖 synology 的 SHR 、raid1 、raid0 、raid1 、raid5 的区别</title>
      <link>https://blog.xungejiang.com/2017-08-03-shr-raid015/</link>
      <guid>https://blog.xungejiang.com/2017-08-03-shr-raid015/</guid>
      <pubDate>Mon, 08 Oct 2018 03:32:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>content<br>{:toc}</li></ul><p> 转载网址 <a href="http://www.goodnas.net/forum.php?mod=viewthread&amp;tid=24" rel="external nofollow noopener noreferrer" target="_blank">http://www.goodnas.net/forum.php?mod=viewthread&amp;tid=24</a></p><p> 本文主要讲述群晖的 SHR 、raid1 、raid0 、raid1 、raid5 之间的区别。</p><h2 id="SHR"><a href="#SHR" class="headerlink" title="SHR"></a>SHR</h2><p>SHR 是 <strong>Synology Hybrid RAID</strong> 的缩写；当 NAS 里面只有一颗硬盘的时候，磁盘阵列的模式为 basic ，无数据保护。当再添加为一个硬盘的时候磁盘阵列的模式自动转换成类似 raid1 模式，空间大小不变，但是多了个数据保护。当再加入一个硬盘的时候会自动转换成类似 raid5 模式（前提是你的 NAS 可以放 3 个及以上的硬盘），容量为 N-1 个硬盘的总容量，假如 3 个 3Ｔ 的硬盘，此时的 SHR 空间总容量为 <code>(3 - 1) * 3T</code> 为 <code>6T</code> 的空间，后期可以慢慢加硬盘数据也不影响的。</p><p><strong>SHR 优点 </strong>：在于方便不熟悉磁盘阵列的玩家，傻瓜简单式的帮你组好磁盘阵列，而且还能合理利用容量大小不一的硬盘，减少浪费，raid 是按照最小的硬盘算，而 SHR 则可以合理利用减少浪费，智能 raid 推荐使用~</p><p> 附计算网址：<a href="https://www.synology.cn/zh-cn/support/RAID_calculator" rel="external nofollow noopener noreferrer" target="_blank">https://www.synology.cn/zh-cn/support/RAID_calculator</a>。</p><h2 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h2><p>basic 是基本模式，一个硬盘一个独立的空间。</p><h2 id="raid0"><a href="#raid0" class="headerlink" title="raid0"></a>raid0</h2><p>raid0：无数据保护，空间最大化利用，当在 NAS 中运行的时候就和 JBOD 属性差不多，就不再多介绍，raid0 是将多个磁盘合并成一个大的磁盘，不具有冗余，并行 <code>I / O</code>，速度最快。它是将多个磁盘并列起来，成为一个大磁盘。</p><p><strong>raid0 优点 </strong>：传输速度快且空间最大化利用，传输速度理论数值是一般 raid 的 2 倍，实际速度为 1.6 倍。</p><p><strong>raid0 缺点 </strong>：没有冗余，数据存入都是以拆分打散的方式放到不同的硬盘，所以说当一块硬盘坏掉的时候所以的数据都会丢失！慎用~</p><h2 id="raid1"><a href="#raid1" class="headerlink" title="raid1"></a>raid1</h2><p>raid1 是镜像备份，实际容量为总空间的一半，N/2，如果有 2 块 3T 的硬盘，总容量为（3+3）/2。</p><p><strong>raid1 优点 </strong>：有数据保护，让硬盘坏掉一个时，数据还在，硬盘还可以正常读取。</p><p><strong>rard1 缺点 </strong>：空间折一半，放放重要数据资料，照片，放电影就不划算啦！</p><h2 id="raid5"><a href="#raid5" class="headerlink" title="raid5"></a>raid5</h2><p>raid5 是一种既考虑到数据保护又考虑到硬盘运作成本的解决方案，raid5 不对数据进行存储，而是把奇偶校检信息存储到不同的磁盘上。损坏后，用奇偶校检信息和对应的数据去恢复损坏的数据，实际空间为 N-1 ，上面有介绍，假如有 3 块 3T 的硬盘，实际空间为 <code>(3 - 1) * 3T</code> 为 <code>6T</code> ，说直白点：就是假如 4 个硬盘，3 个放数据，1 个备份，值得强调的一点就是 4 个硬盘不分主次，可以任意坏一块硬盘。</p><p><strong>raid5 优点 </strong>：数据安全和成本兼顾，是 4 盘位 NAS 玩家的首选。</p><p><strong>raid5 缺点 </strong>：只有一个硬容错，当硬盘坏掉一个是要及时更换。</p><h2 id="raid6"><a href="#raid6" class="headerlink" title="raid6"></a>raid6</h2><p>raid6 和 riad5 原理差不多，riad5 是 <code>N - 1</code> 可以任意坏一个硬盘，raid6 则是可以任意坏 2 个硬盘，<code>N - 2</code> 的模式，适合盘位很多的玩家。</p><p> 还有 raid2、raid3、raid4、raid6、raid7、raid50、raid53，NAS 不支持，感兴趣的朋友可自行百度。</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2017-08-03-shr-raid015/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SSM 框架下的 jcaptcha 验证码实例</title>
      <link>https://blog.xungejiang.com/2017-07-11-ssm-jcaptcha/</link>
      <guid>https://blog.xungejiang.com/2017-07-11-ssm-jcaptcha/</guid>
      <pubDate>Mon, 08 Oct 2018 03:32:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>content<br>{:toc}</li></ul><p>最近把 SSM(Spring + Spring MVC + MyBatis) 的 Maven 项目搭建好了，并完成了登录和注册功能。其中注册功能使用 jcaptcha 加入了验证码，并使用 AJAX 完成了基本的验证功能。</p><p>本文主要介绍一下 <code>jcaptcha</code> 验证码的实现 (IDEA , 附源码)。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-07-11-001.png?imageView2/2/w/400" alt=""></p><p>项目源码：</p><p><a href="https://github.com/xunge/SSM-jcaptcha" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/xunge/SSM-jcaptcha</a></p><p>参考：</p><p><a href="http://jcaptcha.sourceforge.net/" rel="external nofollow noopener noreferrer" target="_blank">jcaptcha 官网</a></p><p><a href="http://blog.csdn.net/u011403655/article/details/46843331" rel="external nofollow noopener noreferrer" target="_blank">IDEA 搭建 SSM</a></p><p><a href="http://ojeta.iteye.com/blog/2111963" rel="external nofollow noopener noreferrer" target="_blank">jcaptcha 验证码</a></p><p>由于 jcaptcha 有个缺陷，就是无法使用 AJAX 进行验证，因为一旦验证就会清除 session，这就导致如果使用 AJAX 验证后，如果输入的验证码错误，就无法重复验证，只有刷新网页才可重新使用。</p><p>这里参考 <a href="http://blog.csdn.net/lovesomnus/article/details/50487486" rel="external nofollow noopener noreferrer" target="_blank">这篇博客</a>，将清除 session 的操作提取出来，便可以使用 AJAX 进行验证了。</p><h2 id="项目介绍"><a href="# 项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><ol><li><p>注册页面使用 <code>jcaptcha</code> 实现了验证码功能，并使用 AJAX 技术实时验证。</p></li><li><p>注册页面的邮箱输入完成，光标移开输入框后，使用 AJAX 技术到后台数据库进行查找，如果已经注册过则提示该邮箱已被注册。</p></li></ol><h2 id="maven- 依赖"><a href="#maven- 依赖" class="headerlink" title="maven 依赖"></a>maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.octo.captcha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jcaptcha-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-RC6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>quartz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>quartz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-dbcp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-dbcp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-pool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-pool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>hsqldb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hsqldb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.sf.ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>concurrent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>concurrent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xerces<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>xercesImpl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xerces<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>xmlParserAPIs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="jcaptcha- 配置文件：spring-jcaptcha-xml"><a href="#jcaptcha- 配置文件：spring-jcaptcha-xml" class="headerlink" title="jcaptcha 配置文件：spring-jcaptcha.xml"></a>jcaptcha 配置文件：spring-jcaptcha.xml</h2><p>在 <code>resources/spring</code> 下新建 <code>spring-jcaptcha.xml</code> 。</p><p>该文件主要控制验证码的样式，可根据官网适当修改。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class="token punctuation">"</span></span>       <span class="token attr-name">default-lazy-init</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--&lt;bean id="captchaService" class="com.octo.captcha.service.multitype.GenericManageableCaptchaService">        &lt;constructor-arg index="0" ref="imageEngine"/>        &lt;constructor-arg type="int" index="1" value="180"/>        &lt;constructor-arg type="int" index="2" value="100000"/>    &lt;/bean>--></span>    <span class="token comment" spellcheck="true">&lt;!-- 这里我为了使用 AJAX 验证验证码，使用了自己创建的 captchaService--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>captchaService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xunge.springemp.service.impl.CustomGenericManageableCaptchaService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageEngine<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>180<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>180000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageEngine<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.octo.captcha.engine.GenericCaptchaEngine<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>captchaFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>captchaFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.octo.captcha.image.gimpy.GimpyFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wordgen<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wordtoimage<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    &lt;bean id="wordgen" class= "com.octo.captcha.component.word.wordgenerator.RandomWordGenerator">        <span class="token comment" spellcheck="true">&lt;!-- 可选字符 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>aabbccddeefgghhkkmnnooppqqsstuuvvwxxyyzz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wordtoimage<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.octo.captcha.component.image.wordtoimage.ComposedWordToImage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fontGenRandom<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>backGenUni<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>decoratedPaster<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fontGenRandom<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.octo.captcha.component.image.fontgenerator.RandomFontGenerator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 最小字体 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 最大字体 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>34<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.awt.Font<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Arial<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>backGenUni<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.octo.captcha.component.image.backgroundgenerator.UniColorBackgroundGenerator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 背景宽度 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>110<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 背景高度 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>decoratedPaster<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.octo.captcha.component.image.textpaster.DecoratedRandomTextPaster<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 最大字符长度 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 最小字符长度 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 文本颜色 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorGen<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 文本混淆 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--&lt;ref bean="baffleDecorator"/>--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baffleDecorator<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.octo.captcha.component.image.textpaster.textdecorator.BaffleTextDecorator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.awt.Color<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorWrite<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorGen<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.octo.captcha.component.image.color.SingleColorGenerator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.awt.Color<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorBlack<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorWrite<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.awt.Color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>255<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>255<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>255<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorBlack<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.awt.Color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="web-xml- 代码"><a href="#web-xml- 代码" class="headerlink" title="web.xml 代码"></a>web.xml 代码 </h2><p> 因为是在 <code>resources/spring</code> 下新建 <code>spring-jcaptcha.xml</code> ， 所以 <code>web.xml</code> 无需重新配置。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee         http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WebApp_ID<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>        classpath:spring/spring-*.xml      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><h2 id="JcaptchaImageCreater-java"><a href="#JcaptchaImageCreater-java" class="headerlink" title="JcaptchaImageCreater.java"></a>JcaptchaImageCreater.java</h2><p>在 <code>controller</code> 下新建 <code>JcaptchaImageCreater.java</code>，用来生成验证码图片。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>image<span class="token punctuation">.</span>BufferedImage<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span>ImageIO<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>octo<span class="token punctuation">.</span>captcha<span class="token punctuation">.</span>service<span class="token punctuation">.</span>image<span class="token punctuation">.</span>ImageCaptchaService<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/captcha"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JcaptchaImageCreater</span> <span class="token punctuation">{</span><span class="token keyword">private</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ImageCaptchaService imageCaptchaService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>ByteArrayOutputStream jpegOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String captchaId <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedImage challenge <span class="token operator">=</span> imageCaptchaService<span class="token punctuation">.</span><span class="token function">getImageChallengeForID</span><span class="token punctuation">(</span>captchaId<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"no-store"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Pragma"</span><span class="token punctuation">,</span> <span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setDateHeader</span><span class="token punctuation">(</span><span class="token string">"Expires"</span><span class="token punctuation">,</span> 0L<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"image/jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>challenge<span class="token punctuation">,</span> <span class="token string">"jpeg"</span><span class="token punctuation">,</span> jpegOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> captchaChallengeAsJpeg <span class="token operator">=</span> jpegOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ServletOutputStream respOs <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            respOs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>captchaChallengeAsJpeg<span class="token punctuation">)</span><span class="token punctuation">;</span>            respOs<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            respOs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"generate captcha image error: {}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="CustomGenericManageableCaptchaService-java- 重写 -GenericManageableCaptchaService-java"><a href="#CustomGenericManageableCaptchaService-java- 重写 -GenericManageableCaptchaService-java" class="headerlink" title="CustomGenericManageableCaptchaService.java 重写 GenericManageableCaptchaService.java"></a>CustomGenericManageableCaptchaService.java 重写 GenericManageableCaptchaService.java</h2><p>在 <code>service</code> 下新建 <code>CustomGenericManageableCaptchaService.java</code>，将 removeCaptcha 方法提出来，便可以使用 AJAX 进行验证。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>octo<span class="token punctuation">.</span>captcha<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>CaptchaEngine<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>octo<span class="token punctuation">.</span>captcha<span class="token punctuation">.</span>service<span class="token punctuation">.</span>CaptchaServiceException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>octo<span class="token punctuation">.</span>captcha<span class="token punctuation">.</span>service<span class="token punctuation">.</span>multitype<span class="token punctuation">.</span>GenericManageableCaptchaService<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Description: TODO * @author Somnus * @date 2015 年 11 月 24 日 下午 1:21:50 * @version V1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomGenericManageableCaptchaService</span> <span class="token keyword">extends</span> <span class="token class-name">GenericManageableCaptchaService</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @param captchaEngine     * @param minGuarantedStorageDelayInSeconds     * @param maxCaptchaStoreSize     */</span>    <span class="token keyword">public</span> <span class="token function">CustomGenericManageableCaptchaService</span><span class="token punctuation">(</span>CaptchaEngine captchaEngine<span class="token punctuation">,</span> <span class="token keyword">int</span> minGuarantedStorageDelayInSeconds<span class="token punctuation">,</span>                                                 <span class="token keyword">int</span> maxCaptchaStoreSize<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>captchaEngine<span class="token punctuation">,</span> minGuarantedStorageDelayInSeconds<span class="token punctuation">,</span> maxCaptchaStoreSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 修改验证码校验逻辑，默认的是执行了该方法后，就把 sessionid 从 store 当中移除 &lt;br/>     * 然而在 ajax 校验的时候，如果第一次验证失败，第二次还得重新刷新验证码，这种逻辑不合理 &lt;br/>     * 现在修改逻辑，只有校验通过以后，才移除 sessionid。 Method Name：validateResponseForID .     *     * @param ID     * @param response     * @return     * @throws CaptchaServiceException     *             the return type：Boolean     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Boolean <span class="token function">validateResponseForID</span><span class="token punctuation">(</span>String ID<span class="token punctuation">,</span> Object response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> CaptchaServiceException <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">hasCaptcha</span><span class="token punctuation">(</span>ID<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CaptchaServiceException</span><span class="token punctuation">(</span><span class="token string">"Invalid ID, could not validate unexisting or already validated captcha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Boolean valid <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">getCaptcha</span><span class="token punctuation">(</span>ID<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validateResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 源码的这一句是没被注释的，这里我们注释掉，在下面暴露一个方法给我们自己来移除 sessionId</span>        <span class="token comment" spellcheck="true">//this.store.removeCaptcha(ID);</span>        <span class="token keyword">return</span> valid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除 session 绑定的验证码信息.     * Method Name：removeCaptcha .     * @param sessionId     * the return type：void     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeCaptcha</span><span class="token punctuation">(</span>String sessionId<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>sessionId<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">hasCaptcha</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">removeCaptcha</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="LoginController"><a href="#LoginController" class="headerlink" title="LoginController"></a>LoginController</h2><p>在 <code>controller</code> 下新建 <code>LoginController</code>，进行用户注册和检查验证码的方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>octo<span class="token punctuation">.</span>captcha<span class="token punctuation">.</span>service<span class="token punctuation">.</span>image<span class="token punctuation">.</span>ImageCaptchaService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xunge<span class="token punctuation">.</span>springemp<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>CustomGenericManageableCaptchaService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>SessionAttributes<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ModelAndView<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xunge<span class="token punctuation">.</span>springemp<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>UserDAO<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xunge<span class="token punctuation">.</span>springemp<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xunge<span class="token punctuation">.</span>springemp<span class="token punctuation">.</span>service<span class="token punctuation">.</span>IUserService<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@SessionAttributes</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> IUserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ImageCaptchaService imageCaptchaService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CustomGenericManageableCaptchaService customGenericManageableCaptchaService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDAO userDAO<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"userAdd"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">doAdd</span><span class="token punctuation">(</span>User user<span class="token punctuation">,</span> String captcha<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>Boolean isResponseCorrect <span class="token operator">=</span> imageCaptchaService<span class="token punctuation">.</span><span class="token function">validateResponseForID</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> captcha<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isResponseCorrect<span class="token punctuation">)</span> <span class="token punctuation">{</span>userDAO<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            customGenericManageableCaptchaService<span class="token punctuation">.</span><span class="token function">removeCaptcha</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"personal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> mv<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"register"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> mv<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/checkCaptcha"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> <span class="token keyword">int</span> <span class="token function">checkCaptcha</span><span class="token punctuation">(</span>String captcha<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>Boolean isResponseCorrect <span class="token operator">=</span> imageCaptchaService<span class="token punctuation">.</span><span class="token function">validateResponseForID</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> captcha<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isResponseCorrect <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="前端代码"><a href="# 前端代码" class="headerlink" title="前端代码"></a>前端代码</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control input-lg input_size input-captcha<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>captcha<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>captcha<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 请输入验证码 <span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img-captcha<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>captcha<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>this.src<span class="token punctuation">=</span><span class="token punctuation">'</span>captcha?d<span class="token punctuation">=</span><span class="token punctuation">'</span>+new Date().getTime()<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h2 id="JS- 代码"><a href="#JS- 代码" class="headerlink" title="JS 代码"></a>JS 代码 </h2><p> 前端 AJAX 验证使用 JQuery 的 validate，进行表单的验证更美观。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#regform"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>        captcha<span class="token punctuation">:</span> <span class="token punctuation">{</span>            required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            remote<span class="token punctuation">:</span> <span class="token punctuation">{</span>                url<span class="token punctuation">:</span><span class="token string">"checkCaptcha.do"</span><span class="token punctuation">,</span>                type<span class="token punctuation">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>                contentType<span class="token punctuation">:</span> <span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>captcha<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#captcha"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                dataFilter<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    messages<span class="token punctuation">:</span> <span class="token punctuation">{</span>        captcha<span class="token punctuation">:</span> <span class="token punctuation">{</span>            required<span class="token punctuation">:</span> <span class="token string">" 请输入验证码 "</span><span class="token punctuation">,</span>            remote<span class="token punctuation">:</span> <span class="token string">" 验证码错误 "</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="总结"><a href="# 总结" class="headerlink" title="总结"></a>总结 </h2><p> 更详细信息可以参考源码。</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2017-07-11-ssm-jcaptcha/#disqus_thread</comments>
    </item>
    
    <item>
      <title>i7-7700k 装机实录</title>
      <link>https://blog.xungejiang.com/2017-06-08-build-up-computer/</link>
      <guid>https://blog.xungejiang.com/2017-06-08-build-up-computer/</guid>
      <pubDate>Mon, 08 Oct 2018 03:32:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>content<br>{:toc}</li></ul><p>最近感觉家里的 iMac 配置有些低，于是准备自己组装一台电脑。本文主要介绍一下自己的选购配件的过程以及装机时候的注意事项。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-06-19-001.jpg?imageView2/2/w/400" alt=""></p><h2 id="选购"><a href="# 选购" class="headerlink" title="选购"></a>选购 </h2><p> 在购买前已经做了一年多的功课啦，本来上次双十一就准备买来着，不过因为某种原因没有买成。今天再看当时的配件不是换代就是降价很多，不禁感叹摩尔定律依旧成立。。</p><p>买之前一直参照知乎大神的 @毅种循环 的专栏<a href="https://zhuanlan.zhihu.com/p/27166476?utm_source=qq&amp;utm_medium=social" rel="external nofollow noopener noreferrer" target="_blank">6.18</a>，参考价值非常大，再次感谢毅神。</p><p>6.1 福利最大，幸好我当天锁了两单，还是非常优惠的。</p><p>下面给出我的配置单</p><table><thead><tr><th>配件</th><th>品牌</th><th>价格</th></tr></thead><tbody><tr><td>CPU</td><td>i7-7700k(散)</td><td>2078￥</td></tr><tr><td>显卡</td><td>索泰 GTX1060 6G</td><td>1899￥(-200)</td></tr><tr><td>主板</td><td>微星 Z270 gaming pro carbon</td><td>1375￥(-224)</td></tr><tr><td>内存条</td><td>英睿达 DDR4 2400 8G</td><td>主板赠(-339)</td></tr><tr><td>固态硬盘</td><td>三星 PM961 256G</td><td>629￥</td></tr><tr><td>机械硬盘</td><td>希捷酷鱼 7200 转 2T</td><td>329￥(-80)</td></tr><tr><td>散热器</td><td>九州风神 大霜塔</td><td>179￥(-40)</td></tr><tr><td>电源</td><td>海韵 G-550</td><td>419￥(-80)</td></tr><tr><td>机箱</td><td>先马黑洞</td><td>289￥(-10)</td></tr><tr><td>显示器</td><td>戴尔 U2417h</td><td>1474(-175)</td></tr></tbody></table><p>总计：8671￥(-1208)</p><p>其中除了 CPU 和 固态是从淘宝买的之外，其余全部走的京东，可以说福利还是足够的。</p><h3 id="CPU- 选购"><a href="#CPU- 选购" class="headerlink" title="CPU 选购"></a>CPU 选购 </h3><p> 因为 AMD 最近崛起的 Ryzen 处理器表现也相当不俗，也曾经考虑不过是否上 AMD。不过还是感觉英特尔稳妥一点，在游戏体验上英特尔也是略胜一筹，最终决定还是英特尔吧。</p><h3 id="固态硬盘选购"><a href="# 固态硬盘选购" class="headerlink" title="固态硬盘选购"></a>固态硬盘选购</h3><p>M.2 接口的固态硬盘还是非常有必要的，读写速度也比 SATA 接口快了好几倍。</p><p>下面列取市场上主流 nvme 协议的固态硬盘，容量为 256G。大家可以根据自己的钱包进行选择。</p><table><thead><tr><th>品牌</th><th>价钱</th><th>颗粒</th><th>读 / 写(MB/S)</th></tr></thead><tbody><tr><td>英特尔 600p</td><td>660￥</td><td>TLC</td><td>1570/540</td></tr><tr><td>建兴 T10</td><td>680￥</td><td>MLC</td><td>2700/1300</td></tr><tr><td>三星 960 evo</td><td>900￥</td><td>TLC</td><td>3200/1800</td></tr><tr><td>SM 961</td><td>850￥</td><td>MLC</td><td>3200/1400</td></tr><tr><td>PM 961</td><td>680￥</td><td>TLC</td><td>2800/1100</td></tr></tbody></table><blockquote><p>注：MLC 好于 TLC，价格来源于 6 月 12 日 淘宝。</p></blockquote><h2 id="装机"><a href="# 装机" class="headerlink" title="装机"></a>装机 </h2><p> 京东买的东西就是快，下完单最晚第二天就到了。然而 CPU 和 固态 走的淘宝，第二周才送到。</p><p>装机前看了几个装机视频，感觉还不错，推荐给大家 。</p><ol><li><p><a href="http://www.bilibili.com/video/av5780671" rel="external nofollow noopener noreferrer" target="_blank">装机视频教程 </a> 本文并没有介绍如何走背线，这篇视频介绍背线走法还是很详细的。</p></li><li><p><a href="http://www.bilibili.com/video/av11246090/" rel="external nofollow noopener noreferrer" target="_blank">手把手带你从零开始台式电脑的组装 </a> 同样是先马黑洞的机箱。</p></li><li><p><a href="http://www.bilibili.com/video/av10093818" rel="external nofollow noopener noreferrer" target="_blank">PcPartPicker 装机教程 </a> 外国大神装机教程</p></li></ol><p><strong>并且要仔细看主板的说明书！！！（x3）</strong></p><p>装机的时候要注意避免静电。因为静电很容易损坏 CPU 或 主板，可以用手经常摸一下机箱，有条件的可以戴白色手套，戴防静电手环当然更好啦。</p><h3 id="1- 装 -CPU"><a href="#1- 装 -CPU" class="headerlink" title="1. 装 CPU"></a>1. 装 CPU</h3><p>这一步算是最容易的啦。将压杆侧压掀起保护盖，将 CPU 放入。注意 Intel 的 CPU 有两个小凹槽的防呆设计，与卡槽对齐后即可将压杆归位，同时保护盖跳起。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-06-19-002.jpg?imageView2/2/w/400" alt=""></p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-06-19-003.jpg?imageView2/2/w/400" alt=""></p><h3 id="2- 装内存条"><a href="#2- 装内存条" class="headerlink" title="2. 装内存条"></a>2. 装内存条 </h3><p> 内存条的安装按道理也很简单，但是还是花了不少功夫。</p><p>内存条也有个凹槽，两边距离不同，按的时候对比一下凹槽对应即可，不容易安错。</p><p>不过在按内存条的时候真的是需要很大力气的。这里建议在主板底下垫一个软垫，可以更好地发力。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-06-19-004.jpg?imageView2/2/w/400" alt=""></p><h3 id="3- 安装 -M-2- 固态硬盘"><a href="#3- 安装 -M-2- 固态硬盘" class="headerlink" title="3. 安装 M.2 固态硬盘"></a>3. 安装 M.2 固态硬盘 </h3><p> 我买的 Z270 主板有两个 M.2 插槽，其中有一个带有散热装甲，对固态硬盘的加速还是很有帮助的。</p><p>先将中间的平齐螺丝放在外侧，再将固态硬盘装好并用固定螺丝固定即可。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-06-19-005.jpg?imageView2/2/w/400" alt=""></p><h3 id="4- 装 -CPU- 散热"><a href="#4- 装 -CPU- 散热" class="headerlink" title="4. 装 CPU 散热"></a>4. 装 CPU 散热 </h3><p> 散热的安装相对复杂一些。因为买的 CPU 想超频，低端水冷还不如高端风冷，所以买了大霜塔。</p><p>说明书讲的还是很清楚的，这里简单说一下注意事项。</p><p>1. 将四个固定钉插入中间孔，并套上保护胶套进行固定。（不要加矩形胶垫）</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-06-19-006.jpg?imageView2/2/w/400" alt=""></p><p>2. 将 4 个固定钉从主板底下穿出。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-06-19-007.jpg?imageView2/2/w/400" alt=""></p><p>3. 套上四个胶垫。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-06-19-008.jpg?imageView2/2/w/400" alt=""></p><p>4. 固定支架，注意螺丝少量多次拧紧，对向螺丝一起拧。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-06-19-009.jpg?imageView2/2/w/400" alt=""></p><p>5. 将中间的风扇去掉，记住风扇是怎么摘的，一会还要装回去。</p><p>6. 涂硅脂。往 CPU 上挤出黄豆粒大小的硅脂，用牙签涂匀。注意只需要薄薄一层，太厚了反倒不适合散热。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-06-19-010.jpg?imageView2/2/w/400" alt=""></p><p>7. 固定散热器本体。注意风扇方向是朝着内存吹的。如果挡内存可以把风扇往上移一些，或者把外侧的风扇放到相反一侧。拧螺丝时一定不要太用力，否则会压坏 CPU 或 主板。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-06-19-011.jpg?imageView2/2/w/400" alt=""></p><p>8. 将中间的风扇装好。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-06-19-012.jpg?imageView2/2/w/400" alt=""></p><p>9. 接风扇电源线。中间的风扇 (4pin) 接到 <code>CPU_FAN1</code> 接口上，旁边的风扇 (3pin) 接到任意 <code>SYS_FAN</code> 接口即可。(3pin 插到 4pin 接口就行)</p><h3 id="5- 装电源"><a href="#5- 装电源" class="headerlink" title="5. 装电源"></a>5. 装电源 </h3><p> 我买的是 <code>海韵 G-550</code> 模组电源。首先把电源后面的模组都插好，再把电源用螺丝拧紧在机箱后面底部，注意风扇向下。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-06-19-016.jpg?imageView2/2/w/400" alt=""></p><h3 id="6- 装 - 机械硬盘 - 固态硬盘 - 光驱（SATA- 接口）"><a href="#6- 装 - 机械硬盘 - 固态硬盘 - 光驱（SATA- 接口）" class="headerlink" title="6. 装 机械硬盘 / 固态硬盘 / 光驱（SATA 接口）"></a>6. 装 机械硬盘 / 固态硬盘 / 光驱（SATA 接口）</h3><p>每个机箱都不同，照着机箱说明书装就好啦。SATA 接口需要连接两根线：一根数据线，和主板相连；一根电源线，和电源相连。</p><h3 id="7- 固定主板 -IO- 挡板"><a href="#7- 固定主板 -IO- 挡板" class="headerlink" title="7. 固定主板 IO 挡板"></a>7. 固定主板 IO 挡板 </h3><p> 将主板的 IO 挡板固定在机箱上。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-06-19-013.jpg?imageView2/2/w/400" alt=""></p><h3 id="8- 固定主板到机箱"><a href="#8- 固定主板到机箱" class="headerlink" title="8. 固定主板到机箱"></a>8. 固定主板到机箱 </h3><p> 机箱在买回来的时候就有六个铜柱，在如图位置。因为我的主板是大板，所以需要把外面三个红圈的铜柱也拧上，并拧掉绿圈的铜柱（很紧，可能需要扳子）。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-06-19-014.jpg?imageView2/2/w/400" alt=""></p><blockquote><p>注意没用的铜柱一定要拧下来，否则可能导致主板短路。</p></blockquote><p>固定螺丝如图所示。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-06-19-017.jpg?imageView2/2/w/400" alt=""></p><p>这里说明一下，如果你用的也是大霜塔等大型散热器，最好提前插上 CPU 供电线，再固定主板。</p><p>因为我买的 CPU 散热器大霜塔太大，我又从背板走的线，CPU 的供电线非常难插，只有很小的空间，像我的大手根本进不去，最后没办法求助母上大人。母上大人的纤纤玉手也是勉强才伸进去。为了插这根线花了大约半个小时的时间。所以建议在固定主板前先把 CPU 的供电线插上，再固定主板，会轻松很多。</p><h3 id="9- 连接各种跳线"><a href="#9- 连接各种跳线" class="headerlink" title="9. 连接各种跳线"></a>9. 连接各种跳线 </h3><p><a href="https://jingyan.baidu.com/article/acf728fd4a6680f8e410a34a.html" rel="external nofollow noopener noreferrer" target="_blank"> 推荐个百度经验</a></p><p>这一步是对新手来说最不友好的一步。需要往主板上插各种跳线。有电源线，机箱前置面板线，硬盘、风扇线等。</p><p>下图为主板用到的几个接口。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-06-19-018.jpg?imageView2/2/w/500" alt=""></p><table><thead><tr><th>接口</th><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>①</td><td>AUD1</td><td>耳机与麦克风接口</td></tr><tr><td>②</td><td>JFP1</td><td>机箱开机键、指示灯等接口</td></tr><tr><td>③</td><td>JUSB1</td><td>机箱前面板 USB</td></tr><tr><td>④</td><td>SATA</td><td>接硬盘、光驱</td></tr><tr><td>⑤</td><td>JUSB3</td><td>机箱前面板 USB</td></tr><tr><td>⑥</td><td>ATX_PWR1</td><td>主板供电线</td></tr><tr><td>⑦</td><td>SYS_FAN4</td><td>CPU 散热副风扇供电线</td></tr><tr><td>⑧</td><td>CPU_FAN1</td><td>CPU 散热主风扇供电线</td></tr><tr><td>⑨</td><td>CPU_PWR1</td><td>CPU 供电线</td></tr></tbody></table><p>其中 ② <code>JFP1</code> 接口需要连接多根跳线，下图为具体连接方式。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-06-19-019.jpg?imageView2/2/w/400" alt=""></p><h3 id="10- 安装显卡"><a href="#10- 安装显卡" class="headerlink" title="10. 安装显卡"></a>10. 安装显卡 </h3><p> 因为显卡比较大，容易挡住跳线接口，我们选择最后安装它。</p><p>需要卸下机箱的两个挡板，将显卡插入 PCIE 接口后用卸下的螺丝固定。</p><p>我买的是索泰至尊需要 6+8 pin 供电。模组电源有两个 8 pin 的显卡供电线，需要都连上，其中有一个 8 pin 线只连接 6 pin 接口。</p><h2 id="总结"><a href="# 总结" class="headerlink" title="总结"></a>总结 </h2><p> 至此，装机已经完成，我们需要连接电源，连接显示器（用显卡的接口连，不是主板），开机看看是否点亮。</p><p>如果没有点亮也不用着急，我第一次也没有点亮，原因是机箱开关机键没有插好（可能是电源灯正负极接反了）。把 ② <code>JFP1</code> 接口的跳线拔下来重新插上再试试吧。</p><p>装系统速度神快，坦克世界终于开了最高特效！！那效果，爽！！</p><p>超频设置后面的文章会提到，敬请期待~</p><p>p.s. 幸亏 6.1 就全买完了。。显卡由于被挖矿的高价买走了，显卡至少贵 500。。</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2017-06-08-build-up-computer/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java 常见面试题及答案</title>
      <link>https://blog.xungejiang.com/2017-05-04-Java-interview-questions/</link>
      <guid>https://blog.xungejiang.com/2017-05-04-Java-interview-questions/</guid>
      <pubDate>Mon, 08 Oct 2018 03:32:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>content<br>{:toc}</li></ul><h2 id="1- 什么是 Java 虚拟机？为什么 Java 被称作是“平台无关的编程语言”？"><a href="#1- 什么是 Java 虚拟机？为什么 Java 被称作是“平台无关的编程语言”？" class="headerlink" title="1. 什么是 Java 虚拟机？为什么 Java 被称作是“平台无关的编程语言”？"></a>1. 什么是 Java 虚拟机？为什么 Java 被称作是“平台无关的编程语言”？</h2><p>Java 虚拟机是一个可以执行 Java 字节码的虚拟机进程。Java 源文件被编译成能被 Java 虚拟机执行的字节码文件。</p><p>Java 被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。</p><p>Java 虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性。</p><h2 id="2-JDK 和 JRE 的区别是什么？"><a href="#2-JDK 和 JRE 的区别是什么？" class="headerlink" title="2.JDK 和 JRE 的区别是什么？"></a>2.JDK 和 JRE 的区别是什么？</h2><p>JDK: Java 开发工具包, 包含了 JRE、编译器和其它工具（如：JavaDOc、Java 调试器)</p><p>JRE: Java 运行环境, 包含 Java 虚拟机和 Java 程序所需的核心类库。</p><p>如果只是想跑 Java 程序，那么只需安装 JRE，如果要写 Java 程序并且运行，那就需要 JDK 了。</p><h2 id="3-”static”关键字是什么意思？Java 中是否可以覆盖一个 private 或者是 static 的方法？"><a href="#3-”static”关键字是什么意思？Java 中是否可以覆盖一个 private 或者是 static 的方法？" class="headerlink" title="3.”static”关键字是什么意思？Java 中是否可以覆盖一个 private 或者是 static 的方法？"></a>3.”static”关键字是什么意思？Java 中是否可以覆盖一个 private 或者是 static 的方法？</h2><p>如果一个类的变量或者方法前面有 static 修饰，那么表明这个方法或者变量属于这个类，也就是说可以在不创建对象的情况下直接使用</p><p>当父类的方法被 private 修饰时，表明该方法为父类私有，对其他任何类都是不可见的，因此如果子类定了一个与父类一样的方法，这对于子类来说相当于是一个新的私有方法，且如果要进行向上转型，然后去调用该“覆盖方法”，会产生编译错误。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>Parent c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 编译出错}</span><span class="token punctuation">}</span></code></pre><p>static 方法时编译时静态绑定的，属于类，而覆盖是运行时动态绑定的(动态绑定的多态), 因此不能覆盖。</p><h2 id="4-Java 支持的基本数据类型有哪些？什么是自动拆装箱？"><a href="#4-Java 支持的基本数据类型有哪些？什么是自动拆装箱？" class="headerlink" title="4.Java 支持的基本数据类型有哪些？什么是自动拆装箱？"></a>4.Java 支持的基本数据类型有哪些？什么是自动拆装箱？</h2><p>Java 支持的基本数据类型有以下 9 种: <strong>byte</strong>, <strong>shot</strong>, <strong>int</strong>, <strong>long</strong>, <strong>float</strong>, <strong>double</strong>, <strong>char</strong>, <strong>boolean</strong>, <strong>void</strong> 。</p><p>自动拆装箱是 Java 从 jdk1.5 引用，目的是将原始类型自动的转换为相对应的对象，也可以逆向进行，即拆箱。这也体现 Java 中一切皆对象的宗旨。</p><p>所谓自动装箱就是将原始类型自动的转换为对应的对象，而拆箱就是将对象类型转换为基本类型。Java 中的自动拆装箱通常发生在变量赋值的过程中，如：</p><pre class=" language-java"><code class="language-java">Integer object <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自动装箱</span><span class="token keyword">int</span> o <span class="token operator">=</span> object<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拆箱</span></code></pre><p>在 Java 中，应该注意自动拆装箱，因为有时可能因为 Java 自动装箱机制，而导致创建了许多对象，对于内存小的平台会造成压力。</p><h2 id="5- 覆盖和重载是什么"><a href="#5- 覆盖和重载是什么" class="headerlink" title="5. 覆盖和重载是什么?"></a>5. 覆盖和重载是什么?</h2><p><strong>覆盖 </strong> 也叫 <strong> 重写</strong> ，发生在子类与父类之间，表示子类中的方法可以与父类中的某个方法的名称和参数完全相同，通过子类创建的实例对象调用这个方法时，将调用子类中的定义方法，这相当于把父类中定义的那个完全相同的方法给覆盖了，这也是面向对象编程的多态性的一种表现。</p><p><strong>重载 </strong> 是指在一个类中，可以有多个相同名称的方法，但是他们的参数列表的个数或类型不同，当调用该方法时，根据传递的参数类型调用对应参数列表的方法。<strong> 注意！！</strong> 当参数列表相同但返回值不同时，将会出现编译错误，这并不是重载，因为 jvm 无法根据返回值类型来判断应该调用哪个方法。</p><h2 id="6-Java 支持多继承么？如果不支持，如何实现"><a href="#6-Java 支持多继承么？如果不支持，如何实现" class="headerlink" title="6.Java 支持多继承么？如果不支持，如何实现?"></a>6.Java 支持多继承么？如果不支持，如何实现?</h2><p>在 Java 中是单继承的，也就是说一个类只能继承一个父类。</p><p>Java 中实现多继承有两种方式, 一是接口，二是内部类。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 实现多个接口 如果两个接口的变量相同 那么在调用该变量的时候 编译出错</span><span class="token keyword">interface</span> <span class="token class-name">interface1</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> String field <span class="token operator">=</span> <span class="token string">"dd"</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">interface2</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> String field <span class="token operator">=</span> <span class="token string">"dddd"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">child</span> <span class="token keyword">implements</span> <span class="token class-name">interface1</span><span class="token punctuation">,</span> interface2 <span class="token punctuation">{</span>    <span class="token keyword">static</span> String field <span class="token operator">=</span> <span class="token string">"dddd"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 内部类 间接多继承</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">strong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 父类 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Mother</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 母亲 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStrong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Father f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">strong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Mother m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mother</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">getCute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="7- 什么是值传递和引用传递？java 中是值传递还是引用传递，还是都有"><a href="#7- 什么是值传递和引用传递？java 中是值传递还是引用传递，还是都有" class="headerlink" title="7. 什么是值传递和引用传递？java 中是值传递还是引用传递，还是都有?"></a>7. 什么是值传递和引用传递？java 中是值传递还是引用传递，还是都有?</h2><p><strong>值传递</strong> 就是在方法调用的时候，实参是将自己的一份拷贝赋给形参，在方法内，对该参数值的修改不影响原来实参，常见的例子就是刚开始学习 c 语言的时候那个交换方法的例子了。</p><p><strong>引用传递</strong> 是在方法调用的时候，实参将自己的地址传递给形参，此时方法内对该参数值的改变，就是对该实参的实际操作。</p><p>在 java 中只有一种传递方式，那就是值传递. 可能比较让人迷惑的就是 java 中的对象传递时，对形参的改变依然会影响到该对象的内容。</p><p>下面这个例子来说明 Java 中是值传递.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"hello "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getString</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getString</span><span class="token punctuation">(</span>StringBuffer s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//s = new StringBuffer("ha");</span>        s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上面这个例子中, 当前输出结果为:<code>hello world</code>。这并没有什么问题，可能就是大家平常所理解的引用传递，那么当然会改变 StringBuffer 的内容。</p><p>但是如果把上面的注释去掉，那么就会输出:<code>hello</code>。此时 sb 的值并没有变成 <code>ha hello</code>。假如说是引用传递的话，那么形参的 s 也就是 sb 的地址，此时在方法里 new StringBuffer() ，并将该对象赋给 s ，也就是说 s 现在指向了这个新创建的对象. 按照引用传递的说法，此时对 s 的改变就是对 sb 的操作，也就是说 sb 应该也指向新创建的对象，那么输出的结果应该为 <code>ha world</code>。但实际上输出的仅是 <code>hello</code>。这说明 sb 指向的还是原来的对象，而形参 s 指向的才是创建的对象, 这也就验证了 Java 中的对象传递也是值传递。</p><h2 id="8- 接口和抽象类的区别是什么"><a href="#8- 接口和抽象类的区别是什么" class="headerlink" title="8. 接口和抽象类的区别是什么?"></a>8. 接口和抽象类的区别是什么?</h2><p>不同点在于：</p><ol><li><p>接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。</p></li><li><p>类可以实现很多个接口，但是只能继承一个抽象类</p></li><li><p>类如果要实现一个接口，它必须要实现接口声明的所有方法。但是，类可以不实现抽象类声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的。</p></li><li><p>抽象类可以在不提供接口方法实现的情况下实现接口。</p></li><li><p>Java 接口中声明的变量默认都是 final 的。抽象类可以包含非 final 的变量。</p></li><li><p>Java 接口中的成员函数默认是 public 的。抽象类的成员函数可以是 private，protected 或者是 public 。</p></li><li><p>接口是绝对抽象的，不可以被实例化(java 8 已支持在接口中实现默认的方法)</p></li><li><p>抽象类也不可以被实例化，但是，如果它包含 main 方法的话是可以被调用的。</p></li></ol><h2 id="9- 构造器（constructor）是否可被重写（override）"><a href="#9- 构造器（constructor）是否可被重写（override）" class="headerlink" title="9. 构造器（constructor）是否可被重写（override）?"></a>9. 构造器（constructor）是否可被重写（override）?</h2><p>构造方法是不能被子类重写的，但是构造方法可以重载，也就是说一个类可以有多个构造方法。</p><h2 id="10-Math-round-11-5- 等于多少 -Math-round-11-5- 等于多少"><a href="#10-Math-round-11-5- 等于多少 -Math-round-11-5- 等于多少" class="headerlink" title="10.Math.round(11.5) 等于多少? Math.round(-11.5)等于多少?"></a>10.Math.round(11.5) 等于多少? Math.round(-11.5)等于多少?</h2><p>Math.round(11.5)==12 Math.round(-11.5)==-11 </p><p>round 方法返回与参数 最接近的长整数，参数加 1/2 后求其 floor.</p><h2 id="11-String-StringBuffer-StringBuilder 的区别。"><a href="#11-String-StringBuffer-StringBuilder 的区别。" class="headerlink" title="11. String, StringBuffer StringBuilder 的区别。"></a>11. String, StringBuffer StringBuilder 的区别。</h2><p>String 的长度是不可变的；</p><p>StringBuffer 的长度是可变的，如果你对字符串中的内容经常进行操作，特别是内容要修改时，那么使用 StringBuffer，如果最后需要 String，那么使用 StringBuffer 的 toString() 方法；线程安全；</p><p>StringBuilder 是从 JDK 5 开始，为 StringBuffer 该类补充了一个单个线程使用的等价类；通常应该优先使用 StringBuilder 类，因 &gt; 为它支持所有相同的操作，但由于它不执行同步，所以速度更快。<br>使用字符串的时候要特别小心，如果对一个字符串要经常改变的话，就一定不要用 String, 否则会创建许多无用的对象出来.<br>来看一下比较</p><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token operator">+</span><span class="token string">"world"</span><span class="token operator">+</span><span class="token string">"i love you"</span><span class="token punctuation">;</span>StringBuffer Sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"i love you"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个时候 s 有多个字符串进行拼接，按理来说会有多个对象产生，但是 jvm 会对此进行一个优化，也就是说只创建了一个对象，此时它的执行速度要比 StringBuffer 拼接快。再看下面这个:</p><pre class=" language-java"><code class="language-java">String s2 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>  String s3 <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>  String s4 <span class="token operator">=</span> <span class="token string">"i love you"</span><span class="token punctuation">;</span>  String s1 <span class="token operator">=</span> s2 <span class="token operator">+</span> s3 <span class="token operator">+</span> s4<span class="token punctuation">;</span></code></pre><p>上面这种情况，就会多创建出来三个对象，造成了内存空间的浪费。</p><h2 id="12-JVM 内存分哪几个区，每个区的作用是什么"><a href="#12-JVM 内存分哪几个区，每个区的作用是什么" class="headerlink" title="12.JVM 内存分哪几个区，每个区的作用是什么?"></a>12.JVM 内存分哪几个区，每个区的作用是什么?</h2><p>java 虚拟机主要分为以下五个区:</p><h3 id="1- 方法区"><a href="#1- 方法区" class="headerlink" title="(1) 方法区"></a>(1) 方法区</h3><ol><li><p>有时候也成为永久代，在该区内很少发生垃圾回收，但是并不代表不发生 GC，在这里进行的 GC 主要是对方法区里的常量池和对类型的卸载</p></li><li><p>方法区主要用来存储已被虚拟机加载的类的信息、常量、静态变量和即时编译器编译后的代码等数据。</p></li><li><p>该区域是被线程共享的。</p></li><li><p>方法区里有一个运行时常量池，用于存放静态编译产生的字面量和符号引用。该常量池具有动态性，也就是说常量并不一定是编译时确定，运行时生成的常量也会存在这个常量池中。</p></li></ol><h3 id="2- 虚拟机栈"><a href="#2- 虚拟机栈" class="headerlink" title="(2) 虚拟机栈"></a>(2) 虚拟机栈</h3><ol><li><p>虚拟机栈也就是我们平常所称的栈内存, 它为 java 方法服务，每个方法在执行的时候都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接和方法出口等信息。</p></li><li><p>虚拟机栈是线程私有的，它的生命周期与线程相同。</p></li><li><p>局部变量表里存储的是基本数据类型、returnAddress 类型（指向一条字节码指令的地址）和对象引用，这个对象引用有可能是指向对象起始地址的一个指针，也有可能是代表对象的句柄或者与对象相关联的位置。局部变量所需的内存空间在编译器间确定</p></li><li><p>操作数栈的作用主要用来存储运算结果以及运算的操作数，它不同于局部变量表通过索引来访问，而是压栈和出栈的方式</p></li><li><p>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接. 动态链接就是将常量池中的符号引用在运行期转化为直接引用。</p></li></ol><h3 id="3- 本地方法栈"><a href="#3- 本地方法栈" class="headerlink" title="(3) 本地方法栈"></a>(3) 本地方法栈 </h3><p> 本地方法栈和虚拟机栈类似，只不过本地方法栈为 Native 方法服务。</p><h3 id="4- 堆"><a href="#4- 堆" class="headerlink" title="(4) 堆"></a>(4) 堆</h3><p>java 堆是所有线程所共享的一块内存，在虚拟机启动时创建，几乎所有的对象实例都在这里创建，因此该区域经常发生垃圾回收操作。</p><h3 id="5- 程序计数器"><a href="#5- 程序计数器" class="headerlink" title="(5) 程序计数器"></a>(5) 程序计数器 </h3><p> 内存空间小，字节码解释器工作时通过改变这个计数值可以选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理和线程恢复等功能都需要依赖这个计数器完成。该内存区域是唯一一个 java 虚拟机规范没有规定任何 OOM 情况的区域。</p><p><img src="http://wiki.jikexueyuan.com/project/java-vm/images/jvmdata.png" alt=""></p><h2 id="如和判断一个对象是否存活 - 或者 GC 对象的判定方法"><a href="# 如和判断一个对象是否存活 - 或者 GC 对象的判定方法" class="headerlink" title="如和判断一个对象是否存活?(或者 GC 对象的判定方法)"></a>如和判断一个对象是否存活?(或者 GC 对象的判定方法)</h2><p>判断一个对象是否存活有两种方法:</p><h3 id="1- 引用计数法"><a href="#1- 引用计数法" class="headerlink" title="(1) 引用计数法"></a>(1) 引用计数法 </h3><p> 所谓引用计数法就是给每一个对象设置一个引用计数器，每当有一个地方引用这个对象时，就将计数器加一，引用失效时，计数器就减一。当一个对象的引用计数器为零时，说明此对象没有被引用，也就是“死对象”, 将会被垃圾回收。</p><p>引用计数法有一个缺陷就是无法解决循环引用问题，也就是说当对象 A 引用对象 B，对象 B 又引用者对象 A，那么此时 A,B 对象的引用计数器都不为零，也就造成无法完成垃圾回收，所以主流的虚拟机都没有采用这种算法。</p><h3 id="2- 可达性算法 - 引用链法"><a href="#2- 可达性算法 - 引用链法" class="headerlink" title="(2) 可达性算法 (引用链法)"></a>(2) 可达性算法(引用链法)</h3><p> 该算法的思想是：从一个被称为 GC Roots 的对象开始向下搜索，如果一个对象到 GC Roots 没有任何引用链相连时，则说明此对象不可用。</p><p>在 java 中可以作为 GC Roots 的对象有以下几种:</p><ul><li><p>虚拟机栈中引用的对象</p></li><li><p>方法区类静态属性引用的对象</p></li><li><p>方法区常量池引用的对象</p></li><li><p>本地方法栈 JNI 引用的对象</p></li></ul><p>当一个对象不可达 GC Root 时，这个对象并不会立马被回收，而是出于一个死缓的阶段，若要被真正的回收需要经历两次标记。</p><p>如果对象在可达性分析中没有与 GC Root 的引用链，那么此时就会被第一次标记并且进行一次筛选，筛选的条件是是否有必要执行 finalize() 方法。当对象没有覆盖 finalize() 方法或者已被虚拟机调用过，那么就认为是没必要的。</p><p>如果该对象有必要执行 finalize() 方法，那么这个对象将会放在一个称为 F-Queue 的对队列中，虚拟机会触发一个 Finalize() 线程去执行，此线程是低优先级的，并且虚拟机不会承诺一直等待它运行完，这是因为如果 finalize() 执行缓慢或者发生了死锁，那么就会造成 F-Queue 队列一直等待，造成了内存回收系统的崩溃。 GC 对处于 F-Queue 中的对象进行第二次被标记，这时，该对象将被移除”即将回收”集合，等待回收。</p><h2 id="15-java 中垃圾收集的方法有哪些"><a href="#15-java 中垃圾收集的方法有哪些" class="headerlink" title="15.java 中垃圾收集的方法有哪些?"></a>15.java 中垃圾收集的方法有哪些?</h2><h3 id="1- 标记 - 清除"><a href="#1- 标记 - 清除" class="headerlink" title="(1) 标记 - 清除:"></a>(1) 标记 - 清除:</h3><p>这是垃圾收集算法中最基础的，根据名字就可以知道，它的思想就是标记哪些要被回收的对象，然后统一回收。这种方法很简单，但是会有两个主要问题：</p><ol><li><p>效率不高，标记和清除的效率都很低；</p></li><li><p>会产生大量不连续的内存碎片，导致以后程序在分配较大的对象时，由于没有充足的连续内存而提前触发一次 GC 动作。</p></li></ol><h3 id="2- 复制算法"><a href="#2- 复制算法" class="headerlink" title="(2) 复制算法:"></a>(2) 复制算法:</h3><p>为了解决效率问题，复制算法将可用内存按容量划分为相等的两部分，然后每次只使用其中的一块，当一块内存用完时，就将还存活的对象复制到第二块内存上，然后一次性清楚完第一块内存，再将第二块上的对象复制到第一块。但是这种方式，内存的代价太高，每次基本上都要浪费一半的内存。</p><p>于是将该算法进行了改进，内存区域不再是按照 1：1 去划分，而是将内存划分为 8:1:1 三部分，较大那份内存交 Eden 区，其余是两块较小的内存区叫 Survior 区。每次都会优先使用 Eden 区，若 Eden 区满，就将对象复制到第二块内存区上，然后清除 Eden 区，如果此时存活的对象太多，以至于 Survivor 不够时，会将这些对象通过分配担保机制复制到老年代中。(java 堆又分为新生代和老年代)</p><h3 id="3- 标记 - 整理"><a href="#3- 标记 - 整理" class="headerlink" title="(3) 标记 - 整理:"></a>(3) 标记 - 整理:</h3><p>该算法主要是为了解决标记 - 清除，产生大量内存碎片的问题；当对象存活率较高时，也解决了复制算法的效率问题。它的不同之处就是在清除对象的时候现将可回收对象移动到一端，然后清除掉端边界以外的对象，这样就不会产生内存碎片了。</p><h3 id="4- 分代收集"><a href="#4- 分代收集" class="headerlink" title="(4) 分代收集:"></a>(4) 分代收集:</h3><p>现在的虚拟机垃圾收集大多采用这种方式，它根据对象的生存周期，将堆分为新生代和老年代。在新生代中，由于对象生存期短，每次回收都会有大量对象死去，那么这时就采用复制算法。老年代里的对象存活率较高，没有额外的空间进行分配担保，所以可以使用 <strong>标记 - 整理 </strong> 或者 <strong> 标记 - 清除</strong>。</p><h2 id="16-java 内存模型"><a href="#16-java 内存模型" class="headerlink" title="16.java 内存模型"></a>16.java 内存模型</h2><p>java 内存模型 (JMM) 是线程间通信的控制机制。 JMM 定义了主内存和线程之间抽象关系。线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读 / 写共享变量的副本。本地内存是 JMM 的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。 Java 内存模型的抽象示意图如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/277730-377221ab99d50e0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从上图来看，线程 A 与线程 B 之间如要通信的话，必须要经历下面 2 个步骤：</p><ol><li>首先，线程 A 把本地内存 A 中更新过的共享变量刷新到主内存中去。</li><li>然后，线程 B 到主内存中去读取线程 A 之前已更新过的共享变量。</li></ol><h2 id="17-java 类加载过程"><a href="#17-java 类加载过程" class="headerlink" title="17.java 类加载过程?"></a>17.java 类加载过程?</h2><p>java 类加载需要经历以下 7 个过程：</p><h3 id="1- 加载"><a href="#1- 加载" class="headerlink" title="(1) 加载"></a>(1) 加载 </h3><p> 加载时类加载的第一个过程，在这个阶段，将完成以下三件事情：</p><ol><li><p>通过一个类的全限定名获取该类的二进制流。</p></li><li><p>将该二进制流中的静态存储结构转化为方法去运行时数据结构。</p></li><li><p>在内存中生成该类的 Class 对象，作为该类的数据访问入口。</p></li></ol><h3 id="2- 验证"><a href="#2- 验证" class="headerlink" title="(2) 验证"></a>(2) 验证 </h3><p> 验证的目的是为了确保 Class 文件的字节流中的信息不回危害到虚拟机。在该阶段主要完成以下四钟验证:</p><ol><li><p>文件格式验证: 验证字节流是否符合 Class 文件的规范，如主次版本号是否在当前虚拟机范围内，常量池中的常量是否有不被支持的类型。</p></li><li><p>元数据验证: 对字节码描述的信息进行语义分析，如这个类是否有父类，是否集成了不被继承的类等。</p></li><li><p>字节码验证: 是整个验证过程中最复杂的一个阶段，通过验证数据流和控制流的分析，确定程序语义是否正确，主要针对方法体的验证。如: 方法中的类型转换是否正确，跳转指令是否正确等。</p></li><li><p>符号引用验证: 这个动作在后面的解析过程中发生，主要是为了确保解析动作能正确执行。</p></li></ol><h3 id="3- 准备"><a href="#3- 准备" class="headerlink" title="(3) 准备"></a>(3) 准备 </h3><p> 准备阶段是为类的静态变量分配内存并将其初始化为默认值，这些内存都将在方法区中进行分配。准备阶段不分配类中的实例变量的内存，实例变量将会在对象实例化时随着对象一起分配在 Java 堆中。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在准备阶段 value 初始值为 0 。在初始化阶段才会变为 123 。</span></code></pre><h3 id="4- 解析"><a href="#4- 解析" class="headerlink" title="(4) 解析"></a>(4) 解析 </h3><p> 该阶段主要完成符号引用到直接引用的转换动作。解析动作并不一定在初始化动作完成之前，也有可能在初始化之后。</p><h3 id="5- 初始化"><a href="#5- 初始化" class="headerlink" title="(5) 初始化"></a>(5) 初始化 </h3><p> 初始化时类加载的最后一步，前面的类加载过程，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的 Java 程序代码。</p><h2 id="18- 简述 -Java- 类加载机制"><a href="#18- 简述 -Java- 类加载机制" class="headerlink" title="18. 简述 Java 类加载机制?"></a>18. 简述 Java 类加载机制?</h2><p>虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验，解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型。</p><h2 id="19- 类加载器双亲委派模型机制？"><a href="#19- 类加载器双亲委派模型机制？" class="headerlink" title="19. 类加载器双亲委派模型机制？"></a>19. 类加载器双亲委派模型机制？</h2><p>当一个类收到了类加载请求时，不会自己先去加载这个类，而是将其委派给父类，由父类去加载，如果此时父类不能加载，反馈给子类，由子类去完成类的加载。</p><h2 id="20- 什么是类加载器，类加载器有哪些"><a href="#20- 什么是类加载器，类加载器有哪些" class="headerlink" title="20. 什么是类加载器，类加载器有哪些?"></a>20. 什么是类加载器，类加载器有哪些?</h2><p>实现通过类的权限定名获取该类的二进制字节流的代码块叫做类加载器。</p><p>主要有一下四种类加载器:</p><ol><li><p>启动类加载器(Bootstrap ClassLoader): 用来加载 Java 核心类库，无法被 Java 程序直接引用。</p></li><li><p>扩展类加载器(extensions class loader): 它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。</p></li><li><p>系统类加载器(system class loader): 它根据 Java 应用的类路径 (CLASSPATH) 来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader() 来获取它。</p></li><li><p>用户自定义类加载器，通过继承 java.lang.ClassLoader 类的方式实现。</p></li></ol><h2 id="21- 简述 java 内存分配与回收策率以及 -Minor-GC- 和 -Major-GC"><a href="#21- 简述 java 内存分配与回收策率以及 -Minor-GC- 和 -Major-GC" class="headerlink" title="21. 简述 java 内存分配与回收策率以及 Minor GC 和 Major GC"></a>21. 简述 java 内存分配与回收策率以及 Minor GC 和 Major GC</h2><ol><li><p>对象优先在堆的 Eden 区分配。</p></li><li><p>大对象直接进入老年代。</p></li><li><p>长期存活的对象将直接进入老年代。</p></li></ol><p>当 Eden 区没有足够的空间进行分配时，虚拟机会执行一次 Minor GC。</p><p>Minor Gc 通常发生在新生代的 Eden 区，在这个区的对象生存期短，往往发生 Gc 的频率较高，回收速度比较快; </p><p>Full Gc/Major GC 发生在老年代，一般情况下，触发老年代 GC 的时候不会触发 Minor GC, 但是通过配置，可以在 Full GC 之前进行一次 Minor GC 这样可以加快老年代的回收速度。</p><h2 id="22-HashMap 的工作原理是什么"><a href="#22-HashMap 的工作原理是什么" class="headerlink" title="22.HashMap 的工作原理是什么?"></a>22.HashMap 的工作原理是什么?</h2><p>HashMap 内部是通过一个数组实现的，只是这个数组比较特殊，数组里存储的元素是一个 Entry 实体 (jdk 8 为 Node) ，这个 Entry 实体主要包含 key 、 value 以及一个指向自身的 next 指针。HashMap 是基于 hashing 实现的，当我们进行 put 操作时，根据传递的 key 值得到它的 hashcode ，然后再用这个 hashcode 与数组的长度进行 <strong> 模</strong>运算，得到一个 int 值，就是 Entry 要存储在数组的位置（下标）；当通过 get 方法获取指定 key 的值时，会根据这个 key 算出它的 hash 值（数组下标），根据这个 hash 值获取数组下标对应的 Entry ，然后判断 Entry 里的 key ， hash 值或者通过 equals() 比较是否与要查找的相同，如果相同，返回 value ，否则的话，遍历该链表（有可能就只有一个 Entry ，此时直接返回 null ），直到找到为止，否则返回 null。</p><p>HashMap 之所以在每个数组元素存储的是一个链表，是为了解决 hash 冲突问题，当两个对象的 hash 值相等时，那么一个位置肯定是放不下两个值的，于是 hashmap 采用链表来解决这种冲突， hash 值相等的两个元素会形成一个链表。</p><h2 id="23-HashMap 与 HashTable 的区别是什么"><a href="#23-HashMap 与 HashTable 的区别是什么" class="headerlink" title="23.HashMap 与 HashTable 的区别是什么?"></a>23.HashMap 与 HashTable 的区别是什么?</h2><ol><li><p>HashTable 基于 Dictionary 类，而 HashMap 是基于 AbstractMap 。 Dictionary 是任何可将键映射到相应值的类的抽象父类，而 AbstractMap 是基于 Map 接口的实现，它以最大限度地减少实现此接口所需的工作。</p></li><li><p>HashMap 的 key 和 value 都允许为 null ，而 Hashtable 的 key 和 value 都不允许为 null 。 HashMap 遇到 key 为 null 的时候，调用 putForNullKey 方法进行处理，而对 value 没有处理； Hashtable 遇到 null ，直接返回 NullPointerException。</p></li><li><p>Hashtable 是同步的，而 HashMap 是非同步的，但是我们也可以通过 Collections.synchronizedMap(hashMap) , 使其实现同步。</p></li></ol><h2 id="24-CorrentHashMap 的工作原理"><a href="#24-CorrentHashMap 的工作原理" class="headerlink" title="24.CorrentHashMap 的工作原理?"></a>24.CorrentHashMap 的工作原理?</h2><p><strong>jdk 1.6 版</strong>: ConcurrenHashMap 可以说是 HashMap 的升级版， ConcurrentHashMap 是线程安全的，但是与 Hashtable 相比，实现线程安全的方式不同。 Hashtable 是通过对 hash 表结构进行锁定，是阻塞式的，当一个线程占有这个锁时，其他线程必须阻塞等待其释放锁。 ConcurrentHashMap 是采用分离锁的方式，它并没有对整个 hash 表进行锁定，而是局部锁定，也就是说当一个线程占有这个局部锁时，不影响其他线程对 hash 表其他地方的访问。</p><p>具体实现: ConcurrentHashMap 内部有一个 Segment&lt;K,V&gt; 数组, 该 Segment 对象可以充当锁。 Segment 对象内部有一个 HashEntry&lt;K,V&gt; 数组，于是每个 Segment 可以守护若干个桶 (HashEntry) , 每个桶又有可能是一个 HashEntry 连接起来的链表，存储发生碰撞的元素。</p><p>每个 ConcurrentHashMap 在默认并发级下会创建包含 16 个 Segment 对象的数组，每个数组有若干个桶，当我们进行 put 方法时，通过 hash 方法对 key 进行计算，得到 hash 值，找到对应的 segment ，然后对该 segment 进行加锁，然后调用 segment 的 put 方法进行存储操作，此时其他线程就不能访问当前的 segment ，但可以访问其他的 segment 对象，不会发生阻塞等待。</p><p><strong>jdk 1.8 版</strong>: 在 jdk 8 中， ConcurrentHashMap 不再使用 Segment 分离锁，而是采用一种乐观锁 CAS 算法来实现同步问题，但其底层还是 “数组 + 链表 -&gt; 红黑树” 的实现。</p><h2 id="25- 遍历一个 List 有哪些不同的方式？"><a href="#25- 遍历一个 List 有哪些不同的方式？" class="headerlink" title="25. 遍历一个 List 有哪些不同的方式？"></a>25. 遍历一个 List 有哪些不同的方式？</h2><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> strList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//for-each</span><span class="token keyword">for</span><span class="token punctuation">(</span>String str<span class="token operator">:</span>strList<span class="token punctuation">)</span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//use iterator 尽量使用这种 更安全(fail-fast)</span>Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> strList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>hasNext<span class="token punctuation">)</span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="26-fail-fast 与 fail-safe 有什么区别？"><a href="#26-fail-fast 与 fail-safe 有什么区别？" class="headerlink" title="26.fail-fast 与 fail-safe 有什么区别？"></a>26.fail-fast 与 fail-safe 有什么区别？</h2><p>Iterator 的 fail-fast 属性与当前的集合共同起作用，因此它不会受到集合中任何改动的影响。 Java.util 包中的所有集合类都被设计为 fail-&gt;fast 的，而 java.util.concurrent 中的集合类都为 fail-safe 的。当检测到正在遍历的集合的结构被改变时， Fail-fast 迭代器抛出 ConcurrentModificationException ，而 fail-safe 迭代器从不抛出 ConcurrentModificationException。</p><h2 id="27-Array 和 ArrayList 有何区别？"><a href="#27-Array 和 ArrayList 有何区别？" class="headerlink" title="27.Array 和 ArrayList 有何区别？"></a>27.Array 和 ArrayList 有何区别？</h2><ol><li><p>Array 可以容纳基本类型和对象，而 ArrayList 只能容纳对象。</p></li><li><p>Array 是指定大小的，而 ArrayList 大小是固定的</p></li></ol><h2 id="28- 哪些集合类提供对元素的随机访问？"><a href="#28- 哪些集合类提供对元素的随机访问？" class="headerlink" title="28. 哪些集合类提供对元素的随机访问？"></a>28. 哪些集合类提供对元素的随机访问？</h2><p>ArrayList、HashMap、TreeMap 和 HashTable 类提供对元素的随机访问。</p><h2 id="29-HashSet- 的底层实现是什么"><a href="#29-HashSet- 的底层实现是什么" class="headerlink" title="29.HashSet 的底层实现是什么?"></a>29.HashSet 的底层实现是什么?</h2><p>通过看源码知道 HashSet 的实现是依赖于 HashMap 的，HashSet 的值都是存储在 HashMap 中的。在 HashSet 的构造法中会初始化一个 HashMap 对象， HashSet 不允许值重复，因此， HashSet 的值是作为 HashMap 的 key 存储在 HashMap 中的，当存储的值已经存在时返回 false。</p><h2 id="30-LinkedHashMap- 的实现原理"><a href="#30-LinkedHashMap- 的实现原理" class="headerlink" title="30.LinkedHashMap 的实现原理?"></a>30.LinkedHashMap 的实现原理?</h2><p>LinkedHashMap 也是基于 HashMap 实现的，不同的是它定义了一个 Entry header ，这个 header 不是放在 Table 里，它是额外独立出来的。 LinkedHashMap 通过继承 hashMap 中的 Entry , 并添加两个属性 Entry before , after , 和 header 结合起来组成一个双向链表，来实现按插入顺序或访问顺序排序。 LinkedHashMap 定义了排序模式 accessOrder ，该属性为 boolean 型变量，对于访问顺序，为 true ；对于插入顺序，则为 false 。一般情况下，不必指定排序模式，其迭代顺序即为默认为插入顺序。</p><h2 id="31-LinkedList 和 ArrayList 的区别是什么"><a href="#31-LinkedList 和 ArrayList 的区别是什么" class="headerlink" title="31.LinkedList 和 ArrayList 的区别是什么?"></a>31.LinkedList 和 ArrayList 的区别是什么?</h2><ol><li><p>ArrayList 是基于数组实现，LinkedList 是基于链表实现</p></li><li><p>ArrayList 在查找时速度快，LinkedList 在插入与删除时更具优势</p></li></ol><h2 id="32- 什么是线程？进程和线程的关系是什么？"><a href="#32- 什么是线程？进程和线程的关系是什么？" class="headerlink" title="32. 什么是线程？进程和线程的关系是什么？"></a>32. 什么是线程？进程和线程的关系是什么？</h2><p>线程可定义为进程内的一个执行单位，或者定义为进程内的一个可调度实体。 在具有多线程机制的操作系统中，处理机调度的基本单位不是进程而是线程。一个进程可以有多个线程，而且至少有一个可执行线程。</p><p>打个比喻: 进程好比工厂 (计算机) 里的车间，一个工厂里有多个车间 (进程) 在运转, 每个车间里有多个工人（线程）在协同工作，这些工人就可以理解为线程。</p><p>线程和进程的关系:</p><ol><li><p>线程是进程的一个组成部分。</p></li><li><p>进程的多个线程都在进程地址空间活动。</p></li><li><p>系统资源是分配给进程的，线程需要资源时，系统从进程的资源里分配给线程。</p></li><li><p>处理机调度的基本单位是线程。</p></li></ol><h2 id="33-Thread- 类中的 -start- 和 -run- 方法有什么区别？"><a href="#33-Thread- 类中的 -start- 和 -run- 方法有什么区别？" class="headerlink" title="33.Thread 类中的 start() 和 run() 方法有什么区别？"></a>33.Thread 类中的 start() 和 run() 方法有什么区别？</h2><p>start() 方法被用来启动新创建的线程，而且 start() 内部调用了 run() 方法，这和直接调用 run() 方法的效果不一样。当你调用 run() 方法的时候，只会是在原来的线程中调用，没有新的线程启动，start() 方法才会启动新线程。</p><h2 id="34- 什么是线程安全"><a href="#34- 什么是线程安全" class="headerlink" title="34. 什么是线程安全?"></a>34. 什么是线程安全?</h2><p>当多个线程访问某个类时，不管运行时环境采用何种调度方式或者线程将如何交替执行，并且在主调代码中不需要任何额外的同步或协同，这个类都能表现出正确的行为。</p><p>线程安全的核心是 <strong>“正确性”</strong> ，也就是说当多个线程访问某个类时，能够得到预期的结果，那么就是线程安全的。</p><h2 id="35-Java 中有哪几种锁"><a href="#35-Java 中有哪几种锁" class="headerlink" title="35.Java 中有哪几种锁?"></a>35.Java 中有哪几种锁?</h2><p><strong>自旋锁</strong>: 自旋锁在 JDK1.6 之后就默认开启了。基于之前的观察，共享数据的锁定状态只会持续很短的时间，为了这一小段时间而去挂起和恢复线程有点浪费，所以这里就做了一个处理，让后面请求锁的那个线程在稍等一会，但是不放弃处理器的执行时间，看看持有锁的线程能否快速释放。为了让线程等待，所以需要让线程执行一个忙循环也就是自旋操作。</p><p>在 jdk6 之后，引入了自适应的自旋锁，也就是等待的时间不再固定了，而是由上一次在同一个锁上的自旋时间及锁的拥有者状态来决定</p><p><strong>偏向锁</strong>: 目的是消除数据在无竞争情况下的同步原语。进一步提升程序的运行性能。 偏向锁就是偏心的偏，意思是这个锁会偏向第一个获得他的线程，如果接下来的执行过程中，该锁没有被其他线程获取，则持有偏向锁的线程将永远不需要再进行同步。偏向锁可以提高带有同步但无竞争的程序性能，也就是说他并不一定总是对程序运行有利，如果程序中大多数的锁都是被多个不同的线程访问，那偏向模式就是多余的，在具体问题具体分析的前提下，可以考虑是否使用偏向锁。</p><p><strong>轻量级锁 </strong>: 为了减少获得锁和释放锁所带来的性能消耗，引入了“偏向锁”和“轻量级锁”，所以在 Java SE1.6 里锁一共有四种状态，<strong> 无锁状态 </strong>，<strong> 偏向锁状态 </strong>，<strong> 轻量级锁状态 </strong> 和<strong>重量级锁状态</strong>，它会随着竞争情况逐渐升级。锁可以升级但不能降级，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。这种锁升级却不能降级的策略，目的是为了提高获得锁和释放锁的效率。</p><h2 id="36-synchronized 内置锁"><a href="#36-synchronized 内置锁" class="headerlink" title="36.synchronized 内置锁"></a>36.synchronized 内置锁</h2><p>java 中以 synchronize 的形式, 为防止资源冲突提供了内置支持。当任务要执行被 synchronize 关键字保护的代码段时, 它将检查锁是否可用, 然后获取锁–执行代码–释放锁。</p><p>所有对象都自动含有单一的锁。当一个线程正在访问一个对象的 synchronized 方法, 那么其他线程不能访问该对象的其他 synchronized 方法, 但可以访问非 synchronized 方法。因为一个对象只有一把锁, 当一个线程获取了该对象的锁之后, 其他线程无法获取该对象的锁, 所以无法访问该对象的其他 synchronized 方法。</p><p>synchronized 代码块</p><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>synObject<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>当在某个线程中执行这段代码块，该线程会获取对象 synObject 的锁，从而使得其他线程无法同时访问该代码块。 synObject 可以是 this , 代表获取当前对象的锁, 也可以是类中的一个属性, 代表获取该属性的锁。</p><p>针对每一个类, 也有一个锁, 所以 static synchronize 方法可以在类的范围内防止对 static 数据的并发访问。如果一个线程执行一个对象的非 static synchronized 方法，另外一个线程需要执行这个对象所属类的 static synchronized 方法，此时不会发生互斥现象，因为访问 static synchronized 方法占用的是类锁，而访问非 static synchronized 方法占用的是对象锁，所以不存在互斥现象。</p><p>对于 synchronized 方法或者 synchronized 代码块，当出现异常时，JVM 会自动释放当前线程占用的锁，因此不会由于异常导致出现死锁现象。</p><h2 id="37-ThreadLocal 理解"><a href="#37-ThreadLocal 理解" class="headerlink" title="37.ThreadLocal 理解"></a>37.ThreadLocal 理解</h2><p>ThreadLocal 是一个创建线程局部变量的类。通常情况下我们创建的变量, 可以被多个线程访问并修改, 通过 ThreadLocal 创建的变量只能被当前线程访问。</p><p>ThreadLocal 内部实现：</p><p>ThreadLocal 提供了 set 和 get 方法。</p><p>set 方法会先获取当前线程, 然后用当前线程作为句柄, 获取 ThreadLocaMap 对象, 并判断该对象是否为空, 如果为空则创建一个, 并设置值, 不为空则直接设置值。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>ThreadLocal 的值是放入了当前线程的一个 ThreadLocalMap 实例中，所以只能在本线程中访问，其他线程无法访问。</p><p>ThreadLocal 并不会导致内存泄露, 因为 ThreadLocalMap 中的 key 存储的是 ThreadLocal 实例的弱引用, 因此如果应用使用了线程池, 即便之前的线程实例处理完之后出于复用的目的依然存活, 也不会产生内存泄露。</p><h2 id="38- 为什么 wait-notify- 和 -notifyAll 这些方法不在 thread 类里面"><a href="#38- 为什么 wait-notify- 和 -notifyAll 这些方法不在 thread 类里面" class="headerlink" title="38. 为什么 wait, notify 和 notifyAll 这些方法不在 thread 类里面?"></a>38. 为什么 wait, notify 和 notifyAll 这些方法不在 thread 类里面?</h2><p>这是个设计相关的问题，它考察的是面试者对现有系统和一些普遍存在但看起来不合理的事物的看法。回答这些问题的时候，你要说明为什么把这些方法放在 Object 类里是有意义的，还有不把它放在 Thread 类里的原因。</p><p>一个很明显的原因是 JAVA 提供的锁是对象级的而不是线程级的，每个对象都有锁，通过线程获得。如果线程需要等待某些锁那么调用对象中的 wait() 方法就有意义了。如果 wait() 方法定义在 Thread 类中，线程正在等待的是哪个锁就不明显了。简单的说，由于 wait ， notify 和 notifyAll 都是锁级别的操作，所以把他们定义在 Object 类中因为锁属于对象。</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2017-05-04-Java-interview-questions/#disqus_thread</comments>
    </item>
    
    <item>
      <title>正则表达式简介</title>
      <link>https://blog.xungejiang.com/2017-05-02-regular-expression/</link>
      <guid>https://blog.xungejiang.com/2017-05-02-regular-expression/</guid>
      <pubDate>Mon, 08 Oct 2018 03:32:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>content<br>{:toc}</li></ul><p>正则表达式是一种特殊的字符串模式，用于匹配一组字符串。本文将介绍正则表达式的简单规则。</p><h2 id="正则表达式通用匹配符号"><a href="# 正则表达式通用匹配符号" class="headerlink" title="正则表达式通用匹配符号"></a>正则表达式通用匹配符号</h2><table><thead><tr><th>正则表达式</th><th>说明</th><th>正确示例</th><th>错误示例</th></tr></thead><tbody><tr><td>.</td><td>匹配任何单个符号，包括所有字符</td><td>(“..”, “a%”) – true</td><td>(“..”, “a”) – false</td></tr><tr><td>^xxx</td><td>在开头匹配正则 xxx</td><td>(“^a.c.”, “abcd”) – true</td><td>(“^a”, “ac”) – false</td></tr><tr><td>xxx\$</td><td>在结尾匹配正则 xxx</td><td>(“..cd\$”, “abcd”) – true</td><td>(“a\$”, “aca”) – false</td></tr><tr><td>[abc]</td><td>能够匹配字母 a,b 或 c</td><td>(“^[abc]d.”, “ad9”) – true</td><td>(“[ab]x”, “cx”) – false</td></tr><tr><td>[^abc]</td><td>当 ^ 是 [] 中的第一个字符时代表取反</td><td>(“[^ab][^12].”, “c3#”) – true</td><td>(“[^ab][^12]“, “c2″) – false</td></tr><tr><td>[a-e1-8]</td><td>匹配 a 到 e 或者 1 到 8 之间的字符</td><td>(“[a-e1-3].”, “d#”) – true</td><td>(“[a-e1-3]“, “f2″) – false</td></tr><tr><td>xx\</td><td>yy</td><td>匹配正则 xx 或者 yy</td><td>(“x.\</td><td>y”, “xa”) – true</td><td>(“x.\</td><td>y”, “yz”) – false</td></tr></tbody></table><h2 id="正则表达式元字符"><a href="# 正则表达式元字符" class="headerlink" title="正则表达式元字符"></a>正则表达式元字符</h2><table><thead><tr><th style="text-align:center">正则表达式</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">\d</td><td>任意数字，等同于[0-9]</td></tr><tr><td style="text-align:center">\D</td><td>任意非数字，等同于[^0-9]</td></tr><tr><td style="text-align:center">\s</td><td>任意空白字符，等同于[\t\n\x0B\f\r]</td></tr><tr><td style="text-align:center">\S</td><td>任意非空白字符，等同于[^\s]</td></tr><tr><td style="text-align:center">\w</td><td>任意英文字符，等同于[a-zA-Z_0-9]</td></tr><tr><td style="text-align:center">\W</td><td>任意非英文字符，等同于[^\w]</td></tr><tr><td style="text-align:center">\b</td><td>单词边界</td></tr><tr><td style="text-align:center">\B</td><td>非单词边界</td></tr></tbody></table><p>有两种方法可以在正则表达式中像一般字符一样使用元字符。</p><ol><li>在元字符前添加反斜杠()</li><li>将元字符置于 \Q(开始引用)和 \E(结束引用)间</li></ol><h2 id="正则表达式量词"><a href="# 正则表达式量词" class="headerlink" title="正则表达式量词"></a>正则表达式量词</h2><table><thead><tr><th>正则表达式</th><th>说明</th></tr></thead><tbody><tr><td>x?</td><td>x 没有出现或者只出现一次</td></tr><tr><td>X*</td><td>X 出现 0 次或更多</td></tr><tr><td>X+</td><td>X 出现 1 次或更多</td></tr><tr><td>X{n}</td><td>X 正好出现 n 次</td></tr><tr><td>X{n,}</td><td>X 出席 n 次或更多</td></tr><tr><td>X{n,m}</td><td>X 出现至少 n 次但不多于 m 次</td></tr></tbody></table><p>原文链接： <a href="http://www.journaldev.com/634/regular-expression-in-java-regex-example" rel="external nofollow noopener noreferrer" target="_blank">journaldev</a> 翻译： ImportNew.com - ImportNew 读者 <br> 译文链接： <a href="http://www.importnew.com/6810.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/6810.html</a><br>[转载请保留原文出处、译者和译文链接。]</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2017-05-02-regular-expression/#disqus_thread</comments>
    </item>
    
    <item>
      <title>快速排序 C++</title>
      <link>https://blog.xungejiang.com/2017-05-03-quick-sort/</link>
      <guid>https://blog.xungejiang.com/2017-05-03-quick-sort/</guid>
      <pubDate>Mon, 08 Oct 2018 03:32:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>content<br>{:toc}</li></ul><p> 快速排序由于排序效率在同为 O(N*logN) 的几种排序方法中效率较高，因此经常被采用，再加上快速排序思想–分治法也确实实用，因此很多软件公司的笔试面试，包括像腾讯，微软等知名 IT 公司都喜欢考这个，还有大大小的程序方面的考试如软考，考研中也常常出现快速排序的身影。</p><p> 快速排序是 C.R.A.Hoare 于 1962 年提出的一种划分交换排序。它采用了一种分治的策略，通常称其为分治法 </p><p> 该方法的基本思想是：</p><ol><li> 先从数列中取出一个数作为基准数。</li><li> 分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</li><li> 再对左右区间重复第二步，直到各区间只有一个数。</li></ol><p> 对挖坑填数进行总结 </p><ol><li>i =L; j = R; 将基准数挖出形成第一个坑 a[i]。</li><li>j–由后向前找比它小的数，找到后挖出此数填前一个坑 a[i] 中。</li><li>i++ 由前向后找比它大的数，找到后也挖出此数填到前一个坑 a[j] 中。</li><li> 再重复执行 2，3 二步，直到 i==j，将基准数填入 a[i] 中。</li></ol><p> 照着这个总结很容易实现挖坑填数的代码：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 快速排序</span><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//Swap(s[l], s[(l + r) / 2]); // 将中间的这个数和第一个数交换 参见注 1</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> r<span class="token punctuation">,</span> x <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 从右向左找第一个小于 x 的数</span>            <span class="token punctuation">{</span>j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>            <span class="token punctuation">{</span>s<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 从左向右找第一个大于等于 x 的数</span>            <span class="token punctuation">{</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>            <span class="token punctuation">{</span>s<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token function">quick_sort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归调用 </span>        <span class="token function">quick_sort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> 快速排序还有很多改进版本，如随机选择基准数，区间内数据较少时直接用另的方法排序以减小递归深度。有兴趣的筒子可以再深入的研究下。</p><p> 转载请标明出处，原文地址：<a href="http://blog.csdn.net/morewindows/article/details/6684558" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/morewindows/article/details/6684558</a></p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2017-05-03-quick-sort/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MI5 刷 MIUI 国际版</title>
      <link>https://blog.xungejiang.com/2017-04-09-MIUI-global-install/</link>
      <guid>https://blog.xungejiang.com/2017-04-09-MIUI-global-install/</guid>
      <pubDate>Mon, 08 Oct 2018 03:32:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>content<br>{:toc}</li></ul><p>MIUI 是基于 Android 开发的手机系统，非常适合国人使用。然而由于国内的某些原因， MIUI 并不支持 Google 全家桶，这对谷歌应用有强烈需求的小伙伴们来说是不能忍的。</p><p>MIUI 国际版很好的解决了这点不足。MIUI 国际版是自带 Google 全家桶的，不仅 MIUI 的功能大部分都有保留，而且还能享受完整的 Google 服务，岂不完美？</p><p>本文将介绍小米手机（米 5）如何刷 <code>MIUI 国际版</code>，以及一些踩坑经历。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-04-12-001.jpeg?imageView2/2/w/400" alt=""></p><h2 id="MIUI- 国际版的优点和不足"><a href="#MIUI- 国际版的优点和不足" class="headerlink" title="MIUI 国际版的优点和不足"></a>MIUI 国际版的优点和不足</h2><p>MIUI 国际版优点自然不必多说，不仅可以享受完整的 Google 服务，而且所有被人诟病的 MIUI 系统广告全都消失，相当干净，这对广告过敏者是一个非常棒的选择。</p><p>当然，在使用了一周后，发现一些在 国行版 很方便的功能在 国际版 进行了阉割，如自动和运营商校准流量（仍能显示已使用流量），<del>小米钱包（MiPay，公交卡）下方方法已解决 </del>，<del> 小米应用商店(底部有旧版 apk)</del> 等都因为国界问题消失了。如果您很依赖上述功能，那么在刷国际版之前一定要三思啊！！</p><p>当然你也可以通过在国行版中安装 <code>Google 框架服务</code> 使用 <code>Google 套件</code>，但是因为 Android 升级到了 7.0 ，博主试了好多种方法都没有成功，无奈只好安装 MIUI 国际版啦…</p><h2 id="刷机教程"><a href="# 刷机教程" class="headerlink" title="刷机教程"></a>刷机教程 </h2><p>MIUI 国际版官方其实是有官方教程的， <a href="http://en.miui.com/a-232.html" rel="external nofollow noopener noreferrer" target="_blank"> 链接如下 </a>， 一共有三种方法，在这里因为安装包更新，recovery 系统更新等原因，前两种方法楼主都没有尝试成功，于是只好使用第三种 <strong> 线刷法</strong>。</p><p>首先需要下载线刷包。因为线刷包和卡刷包不同，不太好找，博主找线刷包的链接找了好久，可算被我找到了~~ <a href="http://en.miui.com/a-234.html" rel="external nofollow noopener noreferrer" target="_blank">链接如下</a>， 该链接附带线刷法教程，这里简单翻译一下。</p><p>1. 解除 BootLoader 锁</p><p>目前，小米全线手机已经加上了 BL 锁，必须解除 BL 锁才能刷机。想要解除 BL 锁可以参考 <a href="http://www.miui.com/thread-6145737-1-1.html" rel="external nofollow noopener noreferrer" target="_blank">这个帖子</a>，写的很详细。</p><p>2. 下载 <a href="http://api.bbs.miui.com/url/MiFlash" rel="external nofollow noopener noreferrer" target="_blank">MiFlash</a> 刷机工具。解压后点击 <code>MiFlash.exe</code> 安装。中间可能会出现提示条，始终点击继续安装就可以正常安装完毕。</p><p>3. 下载线刷包，链接同 <a href="http://en.miui.com/a-234.html" rel="external nofollow noopener noreferrer" target="_blank">上方教程链接 </a>，下载对应手机版本的线刷包并解压。注意 <strong> 不要</strong> 在官网的 <code>Download</code> 里下载。</p><p>4. 关机。同时按住 <code>音量 -</code> 和 <code>电源键 </code> , 进入 <code>Fastboot</code> 模式，界面是一个 <strong> 正在修安卓机器人的米兔</strong>。</p><p>5. 用数据线连结电脑，将解压后的路径复制到 <code>MiFlash</code> 的路径中，点击刷新，列表中会出现你的设备。注意一定要选中底下的 <code>清除所有数据</code>！！（都刷机了就别抱幻想保留用户数据了。。博主当时就选择的保留用户数据，结果卡在开机界面一个多小时，后来没办法进入 <code>Recovery 模式</code> 清除所有数据，马上就开机了）然后点击刷机就成功了。</p><p>因为刷完机后只能使用 Google Play 商店，所以建议之前先准备好 VPN 或 Shadowsocks 等翻墙软件。</p><h2 id="使用中的一些问题"><a href="# 使用中的一些问题" class="headerlink" title="使用中的一些问题"></a>使用中的一些问题 </h2><h3 id="Google-Play- 商店下载应用始终显示 - 正在等待连接 WLAN"><a href="#Google-Play- 商店下载应用始终显示 - 正在等待连接 WLAN" class="headerlink" title="Google Play 商店下载应用始终显示 正在等待连接 WLAN"></a>Google Play 商店下载应用始终显示 正在等待连接 WLAN</h3><p> 博主在使用 Google Play 商店时发现下载应用时出现 <code>正在等待连接 WLAN</code> 提示。。然而我已经连上 WLAN 了。。</p><p>解决办法是 <code>设置 </code> -&gt; <code> 更多应用 </code> -&gt; <code>Google Play 商店</code> -&gt; <code> 卸载更新 </code>。 之后再打开 <code>Google Play 商店</code> 就可以下载软件了。不过过几天下载就又提示 <code> 正在等待连接 WLAN</code>，还需要重复上述操作。这应该是系统 Bug，应该会解决的。</p><h3 id="MIUI- 国际版无法使用 - 小米钱包（MiPay，公交卡）"><a href="#MIUI- 国际版无法使用 - 小米钱包（MiPay，公交卡）" class="headerlink" title="MIUI 国际版无法使用 小米钱包（MiPay，公交卡）"></a>MIUI 国际版无法使用 小米钱包（MiPay，公交卡）</h3><p>无需 Root 权限，只需要安装两个 apk 就可以啦。 <a href="http://pan.baidu.com/s/1sl2NiQL" rel="external nofollow noopener noreferrer" target="_blank">下载链接</a></p><h3 id="小米应用商店旧版下载"><a href="# 小米应用商店旧版下载" class="headerlink" title="小米应用商店旧版下载"></a>小米应用商店旧版下载 </h3><p> 旧版小米应用商店 <a href="http://pan.baidu.com/s/1gfcgGyJ" rel="external nofollow noopener noreferrer" target="_blank">下载链接</a></p><p>不过由于是旧版，风格与 MIUI8 格格不入，所以推荐 <code>酷安</code> 应用商店，很全，不流氓。</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2017-04-09-MIUI-global-install/#disqus_thread</comments>
    </item>
    
    <item>
      <title>计算机网络面试常考点 -- 参照 谢希仁 (第 6 版)</title>
      <link>https://blog.xungejiang.com/2017-04-01-computer-network/</link>
      <guid>https://blog.xungejiang.com/2017-04-01-computer-network/</guid>
      <pubDate>Mon, 08 Oct 2018 03:32:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>content<br>{:toc}</li></ul><p>本篇计算机网络面试常考点，参照《计算机网络（第 6 版） 谢希仁》教材，希望对大家有所帮助。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-04-13-001.png?imageView2/2/w/400" alt=""></p><p>这是我总结的两个知识点，对于期末复习的小伙伴很有帮助。</p><p><a href="http://pan.baidu.com/s/1bpeTlJx" rel="external nofollow noopener noreferrer" target="_blank">知识点 1</a></p><p><a href="http://pan.baidu.com/s/1eRQ9VcI" rel="external nofollow noopener noreferrer" target="_blank">知识点 2</a></p><p>下文主要写的是在笔试或面试中常问的知识点</p><h2 id="OSI，TCP-IP，五层协议的体系结构，以及各层协议"><a href="#OSI，TCP-IP，五层协议的体系结构，以及各层协议" class="headerlink" title="OSI，TCP/IP，五层协议的体系结构，以及各层协议"></a>OSI，TCP/IP，五层协议的体系结构，以及各层协议</h2><p><strong>OSI 分层（7 层）</strong>：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</p><p><strong>TCP/IP 分层（4 层）</strong>：网络接口层、网际层、运输层、应用层。</p><p><strong>五层协议（5 层）</strong>：物理层、数据链路层、网络层、运输层、应用层。</p><p><img src="http://images.cnitblog.com/i/512940/201406/190956475362659.jpg" alt=""></p><p><strong>每一层的协议如下</strong>：</p><ul><li>物理层：RJ45、CLOCK、IEEE802.3    （中继器，集线器，网关）</li><li>数据链路：PPP、FR、HDLC、VLAN、MAC  （网桥，交换机）</li><li>网络层：IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP、 （路由器）</li><li>传输层：TCP、UDP、SPX</li><li>会话层：NFS、SQL、NETBIOS、RPC</li><li>表示层：JPEG、MPEG、ASII</li><li>应用层：FTP、DNS、Telnet、SMTP、HTTP、WWW、NFS</li></ul><p><img src="http://hi.csdn.net/attachment/201201/5/0_1325744597WM32.gif" alt=""></p><p><strong>每一层的作用如下</strong>：</p><p><strong>物理层：</strong>通过媒介传输比特, 确定机械及电气规范（比特 Bit）</p><p><strong>数据链路层</strong>：将比特组装成帧和点到点的传递（帧 Frame）</p><p><strong>网络层</strong>：负责数据包从源到宿的传递和网际互连（包 Packet）</p><p><strong>传输层</strong>：提供端到端的可靠报文传递和错误恢复（段 Segment）</p><p><strong>会话层</strong>：建立、管理和终止会话（会话协议数据单元 SPDU）</p><p><strong>表示层</strong>：对数据进行翻译、加密和压缩（表示协议数据单元 PPDU）</p><p><strong>应用层</strong>：允许访问 OSI 环境的手段（应用协议数据单元 APDU）</p><p><img src="http://up.2cto.com/2013/0731/20130731095736383.png" alt=""></p><h2 id="IP 地址的分类"><a href="#IP 地址的分类" class="headerlink" title="IP 地址的分类"></a>IP 地址的分类</h2><table><thead><tr><th>类别</th><th>最大网络数</th><th>IP 地址范围</th><th>最大主机数</th></tr></thead><tbody><tr><td>A</td><td>126（2^7-2)</td><td>0.0.0.0-127.255.255.255</td><td>16777214</td></tr><tr><td>B</td><td>16384(2^14)</td><td>128.0.0.0-191.255.255.255</td><td>65534</td></tr><tr><td>C</td><td>2097152(2^21)</td><td>192.0.0.0-223.255.255.255</td><td>254</td></tr></tbody></table><p>A 类地址：以 0 开头；</p><p>B 类地址：以 10 开头；</p><p>C 类地址：以 110 开头；</p><p>10.0.0.0~10.255.255.255， 172.16.0.0~172.31.255.255， 192.168.0.0~192.168.255.255。（Internet 上保留地址用于内部）</p><p><strong>IP 地址与子网掩码相与得到主机号</strong></p><h2 id="ARP 是地址解析协议，简单语言解释一下工作原理。"><a href="#ARP 是地址解析协议，简单语言解释一下工作原理。" class="headerlink" title="ARP 是地址解析协议，简单语言解释一下工作原理。"></a>ARP 是地址解析协议，简单语言解释一下工作原理。</h2><ol><li><p>首先，每个主机都会在自己的 ARP 缓冲区中建立一个 ARP 列表，以表示 IP 地址和 MAC 地址之间的对应关系。</p></li><li><p>当源主机要发送数据时，首先检查 ARP 列表中是否有对应 IP 地址的目的主机的 MAC 地址，如果有，则直接发送数据，如果没有，就向本网段的所有主机发送 ARP 数据包，该数据包包括的内容有：<strong>源主机 IP 地址，源主机 MAC 地址，目的主机的 IP 地址</strong>。</p></li><li><p>当本网络的所有主机收到该 ARP 数据包时，首先检查数据包中的 IP 地址是否是自己的 IP 地址，如果不是，则忽略该数据包，如果是，则首先从数据包中取出源主机的 IP 和 MAC 地址写入到 ARP 列表中，如果已经存在，则覆盖，然后将自己的 MAC 地址写入 ARP 响应包中，告诉源主机自己是它想要找的 MAC 地址。</p></li><li><p>源主机收到 ARP 响应包后。将目的主机的 IP 和 MAC 地址写入 ARP 列表，并利用此信息发送数据。如果源主机一直没有收到 ARP 响应数据包，表示 ARP 查询失败。</p></li></ol><p>广播发送 ARP 请求，单播发送 ARP 响应。</p><h2 id="各种协议"><a href="# 各种协议" class="headerlink" title="各种协议"></a>各种协议</h2><p><strong>ICMP 协议：</strong> 因特网控制报文协议。它是 TCP/IP 协议族的一个子协议，用于在 IP 主机、路由器之间传递控制消息。</p><p><strong>TFTP 协议：</strong> 是 TCP/IP 协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，提供不复杂、开销不大的文件传输服务。</p><p><strong>HTTP 协议：</strong> 超文本传输协议，是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。</p><p><strong>DHCP 协议：</strong> 动态主机配置协议，是一种让系统得以连接到网络上，并获取所需要的配置参数手段。</p><p><strong>NAT 协议：</strong> 网络地址转换属接入广域网 (WAN) 技术，是一种将私有（保留）地址转化为合法 IP 地址的转换技术，</p><p><strong>DHCP 协议：</strong> 一个局域网的网络协议，使用 UDP 协议工作，用途：给内部网络或网络服务供应商自动分配 IP 地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段。</p><h2 id="描述：RARP"><a href="# 描述：RARP" class="headerlink" title="描述：RARP"></a>描述：RARP</h2><p>RARP 是逆地址解析协议，作用是完成硬件地址到 IP 地址的映射，主要用于无盘工作站，因为给无盘工作站配置的 IP 地址不能保存。</p><p>工作流程：在网络中配置一台 RARP 服务器，里面保存着 IP 地址和 MAC 地址的映射关系，当无盘工作站启动后，就封装一个 RARP 数据包，里面有其 MAC 地址，然后广播到网络上去，当服务器收到请求包后，就查找对应的 MAC 地址的 IP 地址装入响应报文中发回给请求者。</p><p>因为需要广播请求报文，因此 RARP 只能用于具有广播能力的网络。</p><h2 id="TCP 三次握手和四次挥手的全过程"><a href="#TCP 三次握手和四次挥手的全过程" class="headerlink" title="TCP 三次握手和四次挥手的全过程"></a>TCP 三次握手和四次挥手的全过程 </h2><p><strong> 三次握手：</strong></p><p>第一次握手：客户端发送 syn 包 (syn=x) 到服务器，并进入 SYN_SEND 状态，等待服务器确认；</p><p>第二次握手：服务器收到 syn 包，必须确认客户的 SYN （ack=x+1） ，同时自己也发送一个 SYN 包 （syn=y） ，即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态；</p><p>第三次握手：客户端收到服务器的 SYN＋ACK 包，向服务器发送确认包 ACK (ack=y+1) ，此包发送完毕，客户端和服务器进入 ESTABLISHED 状态，完成三次握手。</p><p>握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP 连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。</p><p><strong>四次握手</strong></p><p>与建立连接的 <strong>三次握手</strong> 类似，断开一个 TCP 连接则需要 四次握手 。</p><p>第一次挥手：主动关闭方发送一个 FIN ，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在 fin 包之前发送出去的数据，如果没有收到对应的 ack 确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可以接受数据。</p><p>第二次挥手：被动关闭方收到 FIN 包后，发送一个 ACK 给对方，确认序号为收到序号 +1 （与 SYN 相同，一个 FIN 占用一个序号）。</p><p>第三次挥手：被动关闭方发送一个 FIN ，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</p><p>第四次挥手：主动关闭方收到 FIN 后，发送一个 ACK 给被动关闭方，确认序号为收到序号 +1，至此，完成四次挥手。</p><p><img src="http://images0.cnblogs.com/blog2015/621032/201508/092017231747399.jpg" alt=""></p><h2 id="在浏览器中输入 -www-baidu-com- 后执行的全部过程"><a href="# 在浏览器中输入 -www-baidu-com- 后执行的全部过程" class="headerlink" title="在浏览器中输入 www.baidu.com 后执行的全部过程"></a>在浏览器中输入 <a href="http://www.baidu.com" rel="external nofollow noopener noreferrer" target="_blank">www.baidu.com</a> 后执行的全部过程</h2><ol><li><p>客户端浏览器通过 DNS 解析到 <a href="http://www.baidu.com" rel="external nofollow noopener noreferrer" target="_blank">www.baidu.com</a> 的 IP 地址 220.181.27.48 ，通过这个 IP 地址找到客户端到服务器的路径。客户端浏览器发起一个 HTTP 会话到 220.161.27.48 ，然后通过 TCP 进行封装数据包，输入到网络层。</p></li><li><p>在客户端的传输层，把 HTTP 会话请求分成报文段，添加源和目的端口，如服务器使用 80 端口监听客户端的请求，客户端由系统随机选择一个端口如 5000 ，与服务器进行交换，服务器把相应的请求返回给客户端的 5000 端口。然后使用 IP 层的 IP 地址查找目的端。</p></li><li><p>客户端的网络层不用关系应用层或者传输层的东西，主要做的是通过查找路由表确定如何到达服务器，期间可能经过多个路由器，这些都是由路由器来完成的工作，我不作过多的描述，无非就是通过查找路由表决定通过那个路径到达服务器。</p></li><li><p>客户端的链路层，包通过链路层发送到路由器，通过邻居协议查找给定 IP 地址的 MAC 地址，然后发送 ARP 请求查找目的地址，如果得到回应后就可以使用 ARP 的请求应答交换的 IP 数据包现在就可以传输了，然后发送 IP 数据包到达服务器的地址。</p></li></ol><h2 id="TCP 和 UDP 的区别"><a href="#TCP 和 UDP 的区别" class="headerlink" title="TCP 和 UDP 的区别"></a>TCP 和 UDP 的区别</h2><table><thead><tr><th>–</th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>连接性</td><td>面向连接</td><td>无连接</td></tr><tr><td>可靠性</td><td>可靠</td><td>不可靠</td></tr><tr><td>报文</td><td>面向字节流</td><td>面向报文</td></tr><tr><td>应用场合</td><td>传输大量的数据</td><td>少量数据</td></tr><tr><td>速度</td><td>慢</td><td>快</td></tr><tr><td>流量控制</td><td>有</td><td>无</td></tr><tr><td>拥塞控制</td><td>有</td><td>无</td></tr></tbody></table><h2 id="TCP 对应的协议和 UDP 对应的协议"><a href="#TCP 对应的协议和 UDP 对应的协议" class="headerlink" title="TCP 对应的协议和 UDP 对应的协议"></a>TCP 对应的协议和 UDP 对应的协议</h2><p><strong>TCP 对应的协议：</strong></p><p>（1） <strong>FTP</strong>：定义了文件传输协议，使用 <strong>21</strong> 端口。</p><p>（2） <strong>Telnet</strong>：一种用于远程登陆的端口，使用 <strong>23</strong> 端口，用户可以以自己的身份远程连接到计算机上，可提供基于 DOS 模式下的通信服务。</p><p>（3） <strong>SMTP</strong>：邮件传送协议，用于发送邮件。服务器开放的是 <strong>25</strong> 端口。</p><p>（4） <strong>POP3</strong>：它是和 SMTP 对应， POP3 用于接收邮件。POP3 协议所用的是 <strong>110</strong> 端口。</p><p>（5）<strong>HTTP</strong>：是从 Web 服务器传输超文本到本地浏览器的传送协议，使用 <strong>80</strong> 端口。</p><p><strong>UDP 对应的协议：</strong></p><p>（1） <strong>DNS</strong>：用于域名解析服务，将域名地址转换为 IP 地址。 DNS 用的是 <strong>53</strong> 端口。</p><p>（2） <strong>SNMP</strong>：简单网络管理协议，使用 <strong>161</strong> 端口，是用来管理网络设备的。由于网络设备很多，无连接的服务就体现出其优势。</p><p>（3） <strong>TFTP</strong> (Trival File Transfer Protocal)，简单文件传输协议，该协议在熟知端口 <strong>69</strong> 上使用 UDP 服务。</p><h2 id="DNS 域名系统，简单描述其工作原理。"><a href="#DNS 域名系统，简单描述其工作原理。" class="headerlink" title="DNS 域名系统，简单描述其工作原理。"></a>DNS 域名系统，简单描述其工作原理。</h2><p>当 DNS 客户机需要在程序中使用名称时，它会查询 DNS 服务器来解析该名称。客户机发送的每条查询信息包括三条信息，包括：指定的 DNS 域名，指定的查询类型，DNS 域名的指定类别。基于 UDP 服务，端口 53 。 该应用一般不直接为用户使用，而是为其他应用服务，如 HTTP， SMTP 等在其中需要完成主机名到 IP 地址的转换。</p><h2 id="面向连接和非面向连接的服务的特点是什么？"><a href="# 面向连接和非面向连接的服务的特点是什么？" class="headerlink" title="面向连接和非面向连接的服务的特点是什么？"></a>面向连接和非面向连接的服务的特点是什么？</h2><p>面向连接的服务，通信双方在进行通信之前，要先在双方建立起一个完整的可以彼此沟通的通道，在通信过程中，整个连接的情况一直可以被实时地监控和管理。</p><p>非面向连接的服务，不需要预先建立一个联络两个通信节点的连接，需要通信的时候，发送节点就可以往网络上发送信息，让信息自主地在网络上去传，一般在传输的过程中不再加以监控。</p><h2 id="TCP 的三次握手过程？为什么会采用三次握手，若采用二次握手可以吗？"><a href="#TCP 的三次握手过程？为什么会采用三次握手，若采用二次握手可以吗？" class="headerlink" title="TCP 的三次握手过程？为什么会采用三次握手，若采用二次握手可以吗？"></a>TCP 的三次握手过程？为什么会采用三次握手，若采用二次握手可以吗？</h2><p>答：建立连接的过程是利用客户服务器模式，假设主机 A 为客户端，主机 B 为服务器端。</p><p>（1）TCP 的三次握手过程：主机 A 向 B 发送连接请求；主机 B 对收到的主机 A 的报文段进行确认；主机 A 再次对主机 B 的确认进行确认。</p><p>（2）采用三次握手是为了防止失效的连接请求报文段突然又传送到主机 B ，因而产生错误。<br>失效的连接请求报文段是指：主机 A 发出的连接请求没有收到主机 B 的确认，于是经过一段时间后，主机 A 又重新向主机 B 发送连接请求，且建立成功，顺序完成数据传输。考虑这样一种特殊情况，主机 A 第一次发送的连接请求并没有丢失，而是因为网络节点导致延迟达到主机 B ，主机 B 以为是主机 A 又发起的新连接，于是主机 B 同意连接，并向主机 A 发回确认，但是此时主机 A 根本不会理会，主机 B 就一直在等待主机 A 发送数据，导致主机 B 的资源浪费。</p><p>（3）采用两次握手不行，原因就是上面说的实效的连接请求的特殊情况。</p><h2 id="端口及对应的服务"><a href="# 端口及对应的服务" class="headerlink" title="端口及对应的服务"></a>端口及对应的服务</h2><table><thead><tr><th>服务</th><th>端口号</th><th>服务</th><th>端口号</th></tr></thead><tbody><tr><td>FTP</td><td>21</td><td>SSH</td><td>22</td></tr><tr><td>telnet</td><td>23</td><td>SMTP</td><td>25</td></tr><tr><td>Domain(域名服务器)</td><td>53</td><td>HTTP</td><td>80</td></tr><tr><td>POP3</td><td>110</td><td>NTP（网络时间协议）</td><td>123</td></tr><tr><td>MySQL 数据库服务</td><td>3306</td><td>Shell 或 cmd</td><td>514</td></tr><tr><td>POP-2</td><td>109</td><td>SQL Server</td><td>1433</td></tr></tbody></table><h2 id="了解交换机、路由器、网关的概念，并知道各自的用途"><a href="# 了解交换机、路由器、网关的概念，并知道各自的用途" class="headerlink" title="了解交换机、路由器、网关的概念，并知道各自的用途"></a>了解交换机、路由器、网关的概念，并知道各自的用途</h2><p>1）交换机</p><p>在计算机网络系统中，交换机是针对共享工作模式的弱点而推出的。交换机拥有一条高带宽的背部总线和内部交换矩阵。交换机的所有的端口都挂接在这条背 部总线上，当控制电路收到数据包以后，处理端口会查找内存中的地址对照表以确定目的 MAC （网卡的硬件地址）的 NIC （网卡）挂接在哪个端口上，通过内部 交换矩阵迅速将数据包传送到目的端口。目的 MAC 若不存在，交换机才广播到所有的端口，接收端口回应后交换机会“学习”新的地址，并把它添加入内部地址表中。</p><p>交换机工作于 OSI 参考模型的第二层，即数据链路层。交换机内部的 CPU 会在每个端口成功连接时，通过 ARP 协议学习它的 MAC 地址，保存成一张 ARP 表。在今后的通讯中，发往该 MAC 地址的数据包将仅送往其对应的端口，而不是所有的端口。因此，交换机可用于划分数据链路层广播，即冲突域；但它不能划分网络层广播，即广播域。</p><p>交换机被广泛应用于二层网络交换，俗称 二层交换机 。</p><p>交换机的种类有：二层交换机、三层交换机、四层交换机、七层交换机分别工作在 OSI 七层模型中的第二层、第三层、第四层盒第七层，并因此而得名。</p><p>2）路由器</p><p><strong>路由器</strong>（<strong>Router</strong>）是一种计算机网络设备，提供了路由与转送两种重要机制，可以决定数据包从来源端到目的端所经过 的路由路径（host 到 host 之间的传输路径），这个过程称为路由；将路由器输入端的数据包移送至适当的路由器输出端(在路由器内部进行)，这称为转 送。路由工作在 OSI 模型的第三层 即网络层，例如网际协议。</p><p><strong>路由器的一个作用是连通不同的网络，另一个作用是选择信息传送的线路。</strong> 路由器与交换器的差别，路由器是属于 OSI 第三层的产品，交换器是 OSI 第二层的产品(这里特指二层交换机)。</p><p>3）网关</p><p><strong>网关 </strong> （Gateway）， <strong> 网关</strong> 顾名思义就是连接两个网络的设备，区别于路由器（由于历史的原因，许多有关 TCP/IP 的文献曾经把网络层使用的路由器（Router）称为网关，在今天很多局域网采用都是路由来接入网络，因此现在通常指的网关就是路由器的 IP），经常在家 庭中或者小型企业网络中使用，用于连接局域网和 Internet。 网关也经常指把一种协议转成另一种协议的设备，比如语音网关。</p><p>在传统 TCP/IP 术语中，网络设备只分成两种，一种为网关（gateway），另一种为主机（host）。网关能在网络间转递数据包，但主机不能转送数据包。在主机（又称终端系统，end system）中，数据包需经过 TCP/IP 四层协议处理，但是在网关（又称中介系 统，intermediate system）只需要到达网际层（Internet layer），决定路径之后就可以转送。在当时，网关 （gateway）与路由器（router）还没有区别。</p><p>在现代网络术语中，网关（gateway）与路由器（router）的定义不同。网关（gateway）能在不同协议间移动数据，而路由器（router）是在不同网络间移动数据，相当于传统所说的 IP 网关（IP gateway）。</p><p><strong>网关 </strong> 是连接两个网络的设备，对于语音网关来说，他可以连接 PSTN 网络和以太网，这就相当于 VOIP ，把不同电话中的模拟信号通过网关而转换成数字信号，而且加入协议再去传输。在到了接收端的时候再通过 <strong> 网关</strong> 还原成模拟的电话信号，最后才能在电话机上听到。</p><p>对于以太网中的 <strong>网关 </strong> 只能转发三层以上数据包，这一点和路由是一样的。而不同的是 <strong> 网关</strong> 中并没有路由表，他只能按照预先设定的不同网段来进行转发。网关最重要的一点就是端口映射，子网内用户在外网看来只是外网的 IP 地址对应着不同的端口，这样看来就会保护子网内的用户。</p><h2 id="子网掩码及网络划分"><a href="# 子网掩码及网络划分" class="headerlink" title="子网掩码及网络划分"></a>子网掩码及网络划分 </h2><p> 随着互连网应用的不断扩大，原先的 IPv4 的弊端也逐渐暴露出来，即网络号占位太多，而主机号位太少，所以其能提供的主机地址也越来越稀缺，目前除了使用 NAT 在企业内部利用保留地址自行分配以外，通常都对一个高类别的 IP 地址进行再划分，以形成多个子网，提供给不同规模的用户群使用。</p><p>这里主要是为了在网络分段情况下有效地利用 IP 地址，通过对主机号的高位部分取作为子网号，从通常的网络位界限中扩展或压缩子网掩码，用来创建某类地址的更多子网。但创建更多的子网时，在每个子网上的可用主机地址数目会比原先减少。</p><h3 id="什么是子网掩码？"><a href="# 什么是子网掩码？" class="headerlink" title="什么是子网掩码？"></a>什么是子网掩码？</h3><p>子网掩码是标志两个 IP 地址是否同属于一个子网的，也是 32 位二进制地址，其每一个为 1 代表该位是网络位，为 0 代表主机位。它和 IP 地址一样也是使用点式十进制来表示的。如果两个 IP 地址在子网掩码的按位与的计算下所得结果相同，即表明它们共属于同一子网中。</p><p>在计算子网掩码时，我们要注意 IP 地址中的保留地址，即“0”地址和广播地址，它们是指主机地址或网络地址全为“0”或“1”时的 IP 地址，它们代表着本网络地址和广播地址，一般是不能被计算在内的。</p><h3 id="子网掩码的计算："><a href="# 子网掩码的计算：" class="headerlink" title="子网掩码的计算："></a>子网掩码的计算：</h3><p>对于无须再划分成子网的 IP 地址来说，其子网掩码非常简单，即按照其定义即可写出：如某 B 类 IP 地址为 10.12.3.0 ，无须再分割子网，则该 IP 地址的子网掩码 255.255.0.0 。如果它是一个 C 类地址，则其子网掩码为 255.255.255.0 。其它类推，不再详述。下面我们关键要介绍的是一个 IP 地址，还需要将其高位主机位再作为划分出的子网网络号，剩下的是每个子网的主机号，这时该如何进行每个子网的掩码计算。</p><p>下面总结一下有关子网掩码和网络划分常见的面试考题：</p><p><strong>1）利用子网数来计算</strong></p><p>在求子网掩码之前必须先搞清楚要划分的子网数目，以及每个子网内的所需主机数目。</p><p>(1) 将子网数目转化为二进制来表示;</p><p>如欲将 B 类 IP 地址 168.195.0.0 划分成 27 个子网：27 = 11011；</p><p>(2) 取得该二进制的位数，为 N ；</p><p>该二进制为五位数，N = 5</p><p>(3) 取得该 IP 地址的类子网掩码，将其主机地址部分的的前 N 位，置 1 ，即得出该 IP 地址划分子网的子网掩码。</p><p>将 B 类地址的子网掩码 255.255.0.0 的主机地址前 5 位，置 1，得到 255.255.248.0</p><p><strong>2）利用主机数来计算</strong></p><p>如欲将 B 类 IP 地址 168.195.0.0 划分成若干子网，每个子网内有主机 700 台：</p><p>(1) 将主机数目转化为二进制来表示；</p><p>700 = 1010111100；</p><p>(2) 如果主机数小于或等于 254（注意去掉保留的两个 IP 地址），则取得该主机的二进制位数，为 N，这里肯定 N &lt; 8。如果大于 254，则 N &gt; 8 ，这就是说主机地址将占据不止 8 位；</p><p>该二进制为十位数，N=10；</p><p>(3) 使用 255.255.255.255 来将该类 IP 地址的主机地址位数全部置 1 ，然后从后向前的将 N 位全部置为 0，即为子网掩码值。</p><p>将该 B 类地址的子网掩码 255.255.0.0 的主机地址全部置 1，得到 255.255.255.255，然后再从后向前将后 10 位置 0, 即为： 11111111.11111111.11111100.00000000 ，即 255.255.252.0 。这就是该欲划分成主机为 700 台的 B 类 IP 地址 168.195.0.0 的子网掩码。</p><p><strong>3）还有一种题型，要你根据每个网络的主机数量进行子网地址的规划和计算子网掩码。这也可按上述原则进行计算。</strong></p><p>比如一个子网有 10 台主机，那么对于这个子网需要的 IP 地址是：</p><p>10 ＋ 1 ＋ 1 ＋ 1 ＝ 13</p><p>注意：加的第一个 1 是指这个网络连接时所需的网关地址，接着的两个 1 分别是指 <strong>网络地址 </strong> 和 <strong> 广播地址</strong> 。</p><p>因为 13 小于 16 （ 16 等于 2 的 4 次方），所以主机位为 4 位。而 256 － 16 ＝ 240，所以该子网掩码为 255.255.255.240 。</p><p>如果一个子网有 14 台主机，不少人常犯的错误是：依然分配具有 16 个地址空间的子网，而忘记了给网关分配地址。这样就错误了，因为 14 ＋ 1 ＋ 1 ＋ 1 ＝ 17，17 大于 16，所以我们只能分配具有 32 个地址（32 等于 2 的 5 次方）空间的子网。这时子网掩码为： 255.255.255.224。</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2017-04-01-computer-network/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MyBatis 的简单案例</title>
      <link>https://blog.xungejiang.com/2017-02-14-MyBatis-demo/</link>
      <guid>https://blog.xungejiang.com/2017-02-14-MyBatis-demo/</guid>
      <pubDate>Mon, 08 Oct 2018 03:32:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>content<br>{:toc}</li></ul><p>一个稍复杂的 MyBatis 连结数据库的案例，涉及多表查询，以及稍复杂的 SQL 语句</p><p>共三张表：学生表 student，班级表 class，分数表 score</p><p>案例为</p><p>1. 查询 <strong>张三 </strong> 的 <strong> 数学 </strong> 成绩<br>2. 查询 <strong> 三班 </strong> 全体成员成绩<br>3. 查询 <strong> 数学 </strong> 第 4，5，6 名的 <strong> 学生姓名</strong></p><h2 id="导入 -jar- 包"><a href="# 导入 -jar- 包" class="headerlink" title="导入 jar 包"></a>导入 jar 包 </h2><p> 博主使用的是 MySQL 数据库，所以需要导一些 jar 包</p><p>新建一个 java project , 在工程下新建文件夹，命名为 <strong>lib</strong> ，将<a href="http://pan.baidu.com/s/1jIKxFlc" rel="external nofollow noopener noreferrer" target="_blank">MySQL 的驱动文件</a> 和 <a href="http://pan.baidu.com/s/1b7bZ46" rel="external nofollow noopener noreferrer" target="_blank">MyBatis 的驱动文件</a> 复制到该文件夹，并右键 <strong>Build Path</strong> -&gt; <strong>Add to Build Path</strong> 。这时发现在工程里出现 <strong>Referenced Libraries</strong> ，里面有和刚才同名的 <strong>jar</strong> 文件。</p><h2 id="创建数据库"><a href="# 创建数据库" class="headerlink" title="创建数据库"></a>创建数据库 </h2><h3 id="建表"><a href="# 建表" class="headerlink" title="建表"></a> 建表 </h3><p> 建表的 sql 语句如下(为了方便没有外键)</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> class<span class="token punctuation">(</span>    classno <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    classname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>    studentno <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    studentname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    classno <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> score<span class="token punctuation">(</span>    scoreid <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    studentno <span class="token keyword">int</span><span class="token punctuation">,</span>    object <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    score <span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="插入数据"><a href="# 插入数据" class="headerlink" title="插入数据"></a>插入数据 </h3><p> 插入数据的 sql 语句如下</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>class<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>classno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>classname<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">' 一班 '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>class<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>classno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>classname<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">' 二班 '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>class<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>classno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>classname<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">' 三班 '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>sex<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>classno<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">' 张三 '</span><span class="token punctuation">,</span> <span class="token string">' 男 '</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>sex<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>classno<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">' 李四 '</span><span class="token punctuation">,</span> <span class="token string">' 女 '</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>sex<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>classno<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">' 王五 '</span><span class="token punctuation">,</span> <span class="token string">' 女 '</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>sex<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>classno<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">' 吴六 '</span><span class="token punctuation">,</span> <span class="token string">' 男 '</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>sex<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>classno<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">' 赵七 '</span><span class="token punctuation">,</span> <span class="token string">' 男 '</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>studentname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>sex<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>classno<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">' 孙八 '</span><span class="token punctuation">,</span> <span class="token string">' 女 '</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>scoreid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>object<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">' 语文 '</span><span class="token punctuation">,</span> <span class="token string">'99'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>scoreid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>object<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">' 数学 '</span><span class="token punctuation">,</span> <span class="token string">'98'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>scoreid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>object<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">' 语文 '</span><span class="token punctuation">,</span> <span class="token string">'92'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>scoreid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>object<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">' 数学 '</span><span class="token punctuation">,</span> <span class="token string">'94'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>scoreid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>object<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">' 语文 '</span><span class="token punctuation">,</span> <span class="token string">'95'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>scoreid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>object<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">' 数学 '</span><span class="token punctuation">,</span> <span class="token string">'93'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>scoreid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>object<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">' 语文 '</span><span class="token punctuation">,</span> <span class="token string">'97'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>scoreid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>object<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">' 数学 '</span><span class="token punctuation">,</span> <span class="token string">'96'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>scoreid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>object<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">' 语文 '</span><span class="token punctuation">,</span> <span class="token string">'94'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>scoreid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>object<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">' 数学 '</span><span class="token punctuation">,</span> <span class="token string">'93'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>scoreid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>object<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">' 语文 '</span><span class="token punctuation">,</span> <span class="token string">'94'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>scoreid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>studentno<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>object<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>score<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">' 数学 '</span><span class="token punctuation">,</span> <span class="token string">'95'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="配置文件连接数据库"><a href="# 配置文件连接数据库" class="headerlink" title="配置文件连接数据库"></a>配置文件连接数据库 </h2><h3 id="db-properties"><a href="#db-properties" class="headerlink" title="db.properties"></a>db.properties</h3><p> 首先配置连结数据库文件，在 <code>src</code> 下新建文件，名称为 <code>db.properties</code> ，内容如下，其中 <code>20170214</code> 为数据库名称，需要改成你自己的数据库名字。</p><pre><code>jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/20170214?useUnicode=true&amp;amp;characterEncoding=utf-8jdbc.username=rootjdbc.password=root</code></pre><h3 id="SqlMapConfig-xml"><a href="#SqlMapConfig-xml" class="headerlink" title="SqlMapConfig.xml"></a>SqlMapConfig.xml</h3><p>在 <code>src</code> 下新建一个 <code>SqlMapConfig.xml</code> 文件，内容为：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configurationPUBLIC "-//mybatis.org//DTD Config 3.0//EN""http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 加载属性文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 事务管理类型，JDBC 表示直接使用 JDBC 的提交和回滚设置，依赖于数据源得到的连接来管理事务 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 数据库连接池 POOLED 表示使用数据库连接池 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h2 id="新建 -pojo- 对象类"><a href="# 新建 -pojo- 对象类" class="headerlink" title="新建 pojo 对象类"></a>新建 pojo 对象类 </h2><p> 在 <code>src</code> 下新建一个包，包名为 <code>pojo</code>，然后根据数据库列名新建 <code>student</code>, <code>class</code>, <code>score</code> 三个类，注意列名与对象名应一致，并进行 set, get 方法</p><h3 id="Class-java"><a href="#Class-java" class="headerlink" title="Class.java"></a>Class.java</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> pojo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Class</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> classno<span class="token punctuation">;</span>    <span class="token keyword">private</span> String classname<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getClassno</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> classno<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setClassno</span><span class="token punctuation">(</span><span class="token keyword">int</span> classno<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>classno <span class="token operator">=</span> classno<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getClassname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> classname<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setClassname</span><span class="token punctuation">(</span>String classname<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>classname <span class="token operator">=</span> classname<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Student-java"><a href="#Student-java" class="headerlink" title="Student.java"></a>Student.java</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> pojo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> studentno<span class="token punctuation">;</span>    <span class="token keyword">private</span> String studentname<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> classno<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStudentno</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> studentno<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStudentno</span><span class="token punctuation">(</span><span class="token keyword">int</span> studentno<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>studentno <span class="token operator">=</span> studentno<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getStudentname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> studentname<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStudentname</span><span class="token punctuation">(</span>String studentname<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>studentname <span class="token operator">=</span> studentname<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getClassno</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> classno<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setClassno</span><span class="token punctuation">(</span><span class="token keyword">int</span> classno<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>classno <span class="token operator">=</span> classno<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Score-java"><a href="#Score-java" class="headerlink" title="Score.java"></a>Score.java</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> pojo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Score</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> scoreid<span class="token punctuation">;</span>    <span class="token keyword">private</span> String studentname<span class="token punctuation">;</span>    <span class="token keyword">private</span> String object<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> score<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getScoreid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> scoreid<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScoreid</span><span class="token punctuation">(</span><span class="token keyword">int</span> scoreid<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>scoreid <span class="token operator">=</span> scoreid<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getStudentname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> studentname<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStudentname</span><span class="token punctuation">(</span>String studentname<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>studentname <span class="token operator">=</span> studentname<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> object<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setObject</span><span class="token punctuation">(</span>String object<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>object <span class="token operator">=</span> object<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> score<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScore</span><span class="token punctuation">(</span><span class="token keyword">float</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="配置接口映射"><a href="# 配置接口映射" class="headerlink" title="配置接口映射"></a>配置接口映射</h2><h3 id="StudentMapper-java"><a href="#StudentMapper-java" class="headerlink" title="StudentMapper.java"></a>StudentMapper.java</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> mapper<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentMapper</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">queryScoreByNameAndObject</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String object<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="新建 -SQL- 语句映射文件 -StudentMapper-xml"><a href="# 新建 -SQL- 语句映射文件 -StudentMapper-xml" class="headerlink" title="新建 SQL 语句映射文件 StudentMapper.xml"></a>新建 SQL 语句映射文件 StudentMapper.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapper.StudentMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryScoreByNameAndObject<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.FirstParameter<span class="token punctuation">"</span></span>  <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.FirstResult<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select a.studentname, b.score, b.object          from student a, score b         where a.studentno = b.studentno           and a.studentname =#{studentname}           and b.object = #{object}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>由 SQL 语句得知这是两个表的查询语句 <br> 传入参数有 studentname, object,<br>传出参数有 a.studentname, b.object, b.score。</p><p>以上数据因为都是从两个表中获取，所以需要再写两个 pojo 类：FirstParameter.java 和 FirstResult.java</p><h3 id="FirstParameter-java"><a href="#FirstParameter-java" class="headerlink" title="FirstParameter.java"></a>FirstParameter.java</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> pojo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstParameter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String studentname<span class="token punctuation">;</span>    <span class="token keyword">private</span> String object<span class="token punctuation">;</span>    <span class="token keyword">private</span> String <span class="token function">getStudentname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> studentname<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStudentname</span><span class="token punctuation">(</span>String studentname<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>studentname <span class="token operator">=</span> studentname<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> object<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setObject</span><span class="token punctuation">(</span>String object<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>object <span class="token operator">=</span> object<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="FirstResult-java"><a href="#FirstResult-java" class="headerlink" title="FirstResult.java"></a>FirstResult.java</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> pojo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstResult</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String studentname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> score<span class="token punctuation">;</span>    <span class="token keyword">private</span> String object<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getStudentname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> studentname<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStudentname</span><span class="token punctuation">(</span>String studentname<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>studentname <span class="token operator">=</span> studentname<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> score<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScore</span><span class="token punctuation">(</span><span class="token keyword">float</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> object<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setObject</span><span class="token punctuation">(</span>String object<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>object <span class="token operator">=</span> object<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="测试类"><a href="# 测试类" class="headerlink" title="测试类"></a>测试类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> pojo<span class="token punctuation">.</span>FirstResult<span class="token punctuation">;</span><span class="token keyword">import</span> pojo<span class="token punctuation">.</span>FirstParameter<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>InputStream is <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSession session<span class="token operator">=</span>sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 查询张三的语文成绩</span>        FirstParameter d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FirstParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">setStudentname</span><span class="token punctuation">(</span><span class="token string">" 张三 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token string">" 语文 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FirstResult q<span class="token operator">=</span>session<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"queryScoreByNameAndObject"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">getStudentname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>q<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2017-02-14-MyBatis-demo/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Markdown 简明语法手册</title>
      <link>https://blog.xungejiang.com/2017-02-07-markdown-introduction/</link>
      <guid>https://blog.xungejiang.com/2017-02-07-markdown-introduction/</guid>
      <pubDate>Mon, 08 Oct 2018 03:32:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>content<br>{:toc}</li></ul><p>Markdown 是文本 <br> 在此，我们总结 Markdown 的优点如下：</p><p>纯文本，所以兼容性极强，可以用所有文本编辑器打开。<br>让你专注于文字而不是排版。<br>格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。<br>Markdown 的标记语法有极好的可读性。</p><h2 id="粗体，斜体，删除线"><a href="# 粗体，斜体，删除线" class="headerlink" title="粗体，斜体，删除线"></a>粗体，斜体，删除线 </h2><p> 代码如下：</p><pre><code>** 粗体 *** 斜体 *~~ 删除线~~</code></pre><p>显示效果：</p><ul><li><strong>粗体</strong></li><li><em>斜体</em></li><li><del>删除线</del></li></ul><h2 id="分级标题"><a href="# 分级标题" class="headerlink" title="分级标题"></a>分级标题 </h2><p> 可以行首加井号表示不同级别的标题 (H1-H6)，代码如下：</p><pre><code># H1## H2### H3#### H4##### H5###### H6</code></pre><p>因为该代码会加入目录里，所以不做演示了。</p><h2 id="外链接"><a href="# 外链接" class="headerlink" title="外链接"></a>外链接 </h2><p> 代码如下：</p><pre><code>[本人博客](http://xungejiang.com &quot;xunge 的博客 &quot;)[本人博客](http://xungejiang.com)</code></pre><p>显示效果：</p><p><a href="http://xungejiang.com" title="xunge 的博客" rel="external nofollow noopener noreferrer" target="_blank">本人博客 </a><br><a href="http://xungejiang.com" rel="external nofollow noopener noreferrer" target="_blank"> 本人博客</a></p><p>链接后的 title 需要用引号括起来，可以选填，效果是鼠标放到链接上会有提示。</p><p>如果安装了 MarkdownExtended 插件的话，可以使用 <code>mdl</code> + <code>tab 键</code></p><p>需要注意的是，使用 Markdown 方法，默认是在本网页打开新网页，如果想在新的标签页上打开链接，只能使用 <code>HTML</code> 语言实现，代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xungejiang.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 本人博客 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>显示效果：</p><p><a href="http://xungejiang.com" target="_blank" rel="external nofollow noopener noreferrer">本人博客</a></p><h2 id="插入图片"><a href="# 插入图片" class="headerlink" title="插入图片"></a>插入图片 </h2><h3 id="普通 -markdown- 语法"><a href="# 普通 -markdown- 语法" class="headerlink" title="普通 markdown 语法"></a> 普通 markdown 语法 </h3><p> 代码如下：</p><pre><code>![小米](http://7xvx4s.com2.z0.glb.qiniucdn.com/mi.jpg &quot; 小米 &quot;)</code></pre><p>显示效果：</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/mi.jpg" alt="小米" title="小米"></p><p>如果安装了 MarkdownExtended 插件的话，可以使用 <code>mdi</code> + <code>tab 键</code></p><p>需要注意的是，使用 Markdown 方法，图片将不能调整大小，有以下两种方式可以调整大小</p><h3 id="HTML- 语法"><a href="#HTML- 语法" class="headerlink" title="HTML 语法"></a>HTML 语法 </h3><p> 使用 <code>HTML</code> 语言实现，代码如下：</p><pre><code>&lt;img src=&quot;http://7xvx4s.com2.z0.glb.qiniucdn.com/mi.jpg&quot; width=&quot;50%&quot;/&gt;</code></pre><p>显示效果：</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/mi.jpg" width="50%"></p><h3 id="使用支持参数的图床"><a href="# 使用支持参数的图床" class="headerlink" title="使用支持参数的图床"></a>使用支持参数的图床 </h3><p> 可以使用支持参数的图床，例如七牛，可参考 <a href="https://developer.qiniu.com/dora/api/basic-processing-images-imageview2" rel="external nofollow noopener noreferrer" target="_blank"> 七牛图片基本处理</a>。</p><p>例如代码为：</p><pre><code>![小米](http://7xvx4s.com2.z0.glb.qiniucdn.com/mi.jpg &quot; 小米 &quot;)                     // 旧方法![小米](http://7xvx4s.com2.z0.glb.qiniucdn.com/mi.jpg?imageView2/2/w/200 &quot; 小米 &quot;)  // 新方法</code></pre><p>显示效果：</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/mi.jpg?imageView2/2/w/200" alt="小米" title="小米"></p><p><code>imageView2/2/w/200</code> 的意义为 宽度固定为 200px，高度等比缩小。</p><h2 id="代码块"><a href="# 代码块" class="headerlink" title="代码块"></a>代码块 </h2><h3 id="行内代码"><a href="# 行内代码" class="headerlink" title="行内代码"></a> 行内代码 </h3><p> 用反引号将短代码框住，代码如下：</p><pre><code>这是 ` 行内代码 `</code></pre><p>显示效果：</p><p>这是 <code>行内代码</code></p><h3 id="多行代码"><a href="# 多行代码" class="headerlink" title="多行代码"></a>多行代码 </h3><p> 多行代码有两种表示方式。</p><p>一种是用前后两个 ``` 把代码包围起来，并在第一行后面标注哪种语言，即可实现代码高亮。注意 ` 不是单引号而是左上角的 ESC 下面~ 中的 `</p><p>代码如下：</p><pre><code>```sqlCREATE TABLE stu (stu_no INT(20),    stu_name VARCHAR(20) NOT NULL,    stu_tel VARCHAR(15),    CONSTRAINT pk_stu_no PRIMARY KEY (stu_no),    CONSTRAINT uk_stu_tel UNIQUE KEY (stu_tel));```</code></pre><p>显示效果：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu <span class="token punctuation">(</span>stu_no <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    stu_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    stu_tel <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">CONSTRAINT</span> pk_stu_no <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>stu_no<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">CONSTRAINT</span> uk_stu_tel <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>stu_tel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>另一种是把代码选中后按一下 tab 键，缺点是无法识别代码语言，无法高亮。</p><h2 id="列表"><a href="# 列表" class="headerlink" title="列表"></a>列表 </h2><h3 id="无序列表"><a href="# 无序列表" class="headerlink" title="无序列表"></a> 无序列表 </h3><p> 使用 *，+，- 任意一种表示无序列表，代码如下：</p><pre><code>- 无序列表项 一    + 无序列表项 二        * 无序列表项 三        * 无序列表项 四    + 无序列表项 五    + 无序列表项 六- 无序列表项 七</code></pre><p>显示效果：</p><ul><li>无序列表项 一<ul><li>无序列表项 二<ul><li>无序列表项 三</li><li>无序列表项 四</li></ul></li><li>无序列表项 五</li><li>无序列表项 六</li></ul></li><li>无序列表项 七</li></ul><h3 id="有序列表"><a href="# 有序列表" class="headerlink" title="有序列表"></a>有序列表 </h3><p> 代码如下：</p><pre><code>1. 有序列表项 一2. 有序列表项 二3. 有序列表项 三</code></pre><p>显示效果：</p><ol><li>有序列表项 一</li><li>有序列表项 二</li><li>有序列表项 三</li></ol><h2 id="引用"><a href="# 引用" class="headerlink" title="引用"></a>引用 </h2><p> 代码如下：</p><pre><code>&gt; 引用文字 一</code></pre><p>显示效果：</p><blockquote><p>引用文字 一</p></blockquote><h2 id="表格"><a href="# 表格" class="headerlink" title="表格"></a>表格 </h2><p> 第一行为表头，第二行分隔表头和主体部分，默认 <code>-</code> 左对齐， <code>:-:</code> 居中对齐， <code>-:</code> 右对齐，第三行开始每一行为一个表格行，代码如下：</p><pre><code>这是第一列 左对齐 | 这是第二列 中间对齐 | 这是第三列 右对齐-|:-:|-:小姜 | 男 |99小宫 | 女 |100小刘 | 男 |98</code></pre><p>显示效果：</p><table><thead><tr><th>这是第一列 左对齐</th><th style="text-align:center">这是第二列 中间对齐</th><th style="text-align:right">这是第三列 右对齐</th></tr></thead><tbody><tr><td>小姜</td><td style="text-align:center">男</td><td style="text-align:right">99</td></tr><tr><td>小宫</td><td style="text-align:center">女</td><td style="text-align:right">100</td></tr><tr><td>小刘</td><td style="text-align:center">男</td><td style="text-align:right">98</td></tr></tbody></table><h2 id="分割线"><a href="# 分割线" class="headerlink" title="分割线"></a>分割线 </h2><p> 三个以上的星号、减号、底线线来建立一个分隔线，效果相同，代码如下：</p><pre><code>---***___</code></pre><p>显示效果：</p><hr><hr><hr><h2 id="上下角标"><a href="# 上下角标" class="headerlink" title="上下角标"></a>上下角标</h2><p><code>&lt;sub&gt;</code> 和 <code>&lt;/sub&gt;</code> 中间的为下角标<br><code>&lt;sup&gt;</code> 和 <code>&lt;/sup&gt;</code> 中间的为上角标</p><pre><code>H&lt;sub&gt;2&lt;/sub&gt;OE=mc&lt;sup&gt;2&lt;/sup&gt;</code></pre><p>显示效果：<br>H<sub>2</sub>O<br>E=mc<sup>2</sup></p><p>也可以用下面介绍的 LaTex 公式，更方便。</p><h2 id="LaTeX- 公式"><a href="#LaTeX- 公式" class="headerlink" title="LaTeX 公式"></a>LaTeX 公式 </h2><h3 id="表示行内公式："><a href="# 表示行内公式：" class="headerlink" title="$ 表示行内公式："></a><code>$</code> 表示行内公式：</h3><p> 代码：</p><pre><code>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</code></pre><p>显示效果：</p><p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p><h3 id="表示整行公式："><a href="# 表示整行公式：" class="headerlink" title="$$ 表示整行公式："></a><code>$$</code> 表示整行公式：</h3><p>代码：</p><pre><code>$$\sum_{i=1}^n a_i=0$$$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2$$$$\sum^{j-1}_{k=0}{\widehat{\gamma}_{kj} z_k}$$</code></pre><p>显示效果：</p><p>$$<br>\sum_{i=1}^n a_i=0<br>$$</p><p>$$<br>f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2<br>$$</p><p>$$<br>\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}<br>$$</p><p>查看 Sublime 如何配置 LaTex 可参考 <a href="http://xungejiang.com/2017/03/03/markdown-mathjax/" rel="external nofollow noopener noreferrer" target="_blank">我写的这篇文章</a></p><p>以上。</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2017-02-07-markdown-introduction/#disqus_thread</comments>
    </item>
    
    <item>
      <title>jQuery 的基本使用方法</title>
      <link>https://blog.xungejiang.com/2017-02-07-jquery/</link>
      <guid>https://blog.xungejiang.com/2017-02-07-jquery/</guid>
      <pubDate>Mon, 08 Oct 2018 03:32:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>content<br>{:toc}</li></ul><p>jQuery 是一个 JavaScript 库，极大地简化了 JavaScript 编程。本文对 jQuery 知识点进行总结，更多的知识点请查看 <a href="http://api.jquery.com/" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a> 或 <a href="http://www.w3school.com.cn/jquery/" rel="external nofollow noopener noreferrer" target="_blank">W3School 教程</a></p><p>推荐一个 HTML 的编辑器 <a href="http://www.dcloud.io/" rel="external nofollow noopener noreferrer" target="_blank">HBuilder</a> , 当然 sublime 也是极好的。</p><h2 id="安装 -jQuery"><a href="# 安装 -jQuery" class="headerlink" title="安装 jQuery"></a>安装 jQuery</h2><p>可以通过多种方法在网页中添加 jQuery。 您可以使用以下方法：</p><ul><li>从 <a href="jquery.com">jquery.com</a> 下载 jQuery 库</li><li>从 CDN 中载入 jQuery</li></ul><h3 id="下载 -jQuery"><a href="# 下载 -jQuery" class="headerlink" title="下载 jQuery"></a>下载 jQuery</h3><p>将下载的文件放在网页的同一目录下，并用 <code>&lt;script&gt;</code> 标签引用他，就可以使用 jQuery。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery-1.10.2.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><h3 id="CDN- 加载"><a href="#CDN- 加载" class="headerlink" title="CDN 加载"></a>CDN 加载 </h3><p> 国内网站推荐百度</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><p>国外网站推荐谷歌</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><h2 id="JavaScript- 和 -jQuery- 执行时方法的区别"><a href="#JavaScript- 和 -jQuery- 执行时方法的区别" class="headerlink" title="JavaScript 和 jQuery 执行时方法的区别"></a>JavaScript 和 jQuery 执行时方法的区别</h2><table><thead><tr><th style="text-align:left">————</th><th style="text-align:left"><strong>window.onload</strong></th><th style="text-align:left"><strong>$(document).ready()</strong></th></tr></thead><tbody><tr><td style="text-align:left">执行时机</td><td style="text-align:left">必须等待网页中所有的内容加载完毕后（包括图片）才能执行</td><td style="text-align:left">网页中所有 DOM 结构绘制完毕后就执行，可能 DOM 元素关联的东西并没有加载完</td></tr><tr><td style="text-align:left">编写个数</td><td style="text-align:left">不能同时编写多个</td><td style="text-align:left">能同时编写多个</td></tr><tr><td style="text-align:left">简化写法</td><td style="text-align:left">无</td><td style="text-align:left"><strong>$(document).ready(function(){});</strong> 可以简写成 <strong>$(function(){});</strong></td></tr></tbody></table><h2 id="选择网页元素"><a href="# 选择网页元素" class="headerlink" title="选择网页元素"></a>选择网页元素</h2><p>jQuery 的基本设计和主要用法，就是”选择某个网页元素，然后对其进行某种操作”。这是它区别于其他函数库的根本特点。</p><p>使用 jQuery 的第一步，往往就是将一个选择表达式，放进构造函数 jQuery()（简写为<em>$</em>），然后得到被选中的元素。</p><p>选择表达式可以是 CSS 选择器：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 选择整个文档对象</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#myId'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 选择 ID 为 myId 的网页元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div.myClass'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 选择 class 为 myClass 的 div 元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input[name=first]'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 选择 name 属性等于 first 的 input 元素</span></code></pre><p>也可以是 jQuery 特有的表达式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'a:first'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 选择网页中第一个 a 元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'tr:odd'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 选择表格的奇数行</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#myForm :input'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 选择表单中的 input 元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div:visible'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 选择可见的 div 元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div:gt(2)'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 选择所有的 div 元素，除了前三个</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div:animated'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 选择当前处于动画状态的 div 元素</span></code></pre><h2 id="改变结果集"><a href="# 改变结果集" class="headerlink" title="改变结果集"></a>改变结果集 </h2><p> 如果选中多个元素，jQuery 提供过滤器，可以缩小结果集：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选择包含 p 元素的 div 元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token string">'.myClass'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选择 class 不等于 myClass 的 div 元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'.myClass'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选择 class 等于 myClass 的 div 元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选择第 1 个 div 元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选择第 6 个 div 元素</span></code></pre><p>有时候，我们需要从结果集出发，移动到附近的相关元素，jQuery 也提供了在 DOM 树上的移动方法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选择 div 元素后面的第一个 p 元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选择 div 元素的父元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closest</span><span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选择离 div 最近的那个 form 父元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选择 div 的所有子元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选择 div 的同级元素</span></code></pre><h2 id="链式操作"><a href="# 链式操作" class="headerlink" title="链式操作"></a>链式操作 </h2><p> 选中网页元素以后，就可以对它进行某种操作。</p><p>jQuery 允许将所有操作连接在一起，以链条的形式写出来，比如：</p><p><code>$(&#39;div&#39;).find(&#39;h3&#39;).eq(2).html(&#39;Hello&#39;);</code></p><p>分解开来，就是下面这样：</p><pre class=" language-java"><code class="language-java">$<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 找到 div 元素</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 选择其中的 h3 元素</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">// 选择第 3 个 h3 元素</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将它的内容改为 Hello</span></code></pre><p>这是 jQuery 最令人称道、最方便的特点。它的原理在于每一步的 jQuery 操作，返回的都是一个 jQuery 对象，所以不同操作可以连在一起。</p><p>jQuery 还提供了.end()方法，使得结果集可以后退一步, 回到最近的一个”破坏性”操作之前。</p><p>如果之前没有破坏性操作，则返回一个空集。所谓的”破坏性”就是指任何改变所匹配的 jQuery 元素的操作。</p><pre class=" language-java"><code class="language-java">$<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 退回到选中所有的 h3 元素的那一步</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 选中第一个 h3 元素</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将它的内容改为 World</span></code></pre><p>示例</p><p>描述：选取所有的 p 元素，查找并选取 span 子元素，然后再回过来选取 p 元素</p><p>HTML 代码:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>,how are you?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>jQuery 代码:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>结果:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> how are you?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h2 id="元素的操作：取值和赋值"><a href="# 元素的操作：取值和赋值" class="headerlink" title="元素的操作：取值和赋值"></a>元素的操作：取值和赋值 </h2><p> 操作网页元素，最常见的需求是取得它们的值，或者对它们进行赋值。</p><p>jQuery 使用同一个函数，来完成取值（getter）和赋值（setter）。到底是取值还是赋值，由函数的参数决定。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//html()没有参数，表示取出 h1 的值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//html()有参数 Hello，表示对 h1 进行赋值</span></code></pre><p>常见的取值和赋值函数如下：</p><pre><code>.html() 返回或设置被选元素的内容 (inner HTML).text() 取出或设置 text 内容.attr() 取出或设置某个属性的值.width() 取出或设置某个元素的宽度.height() 取出或设置某个元素的高度.val() 取出或设置 html 内容 取出某个表单元素的值</code></pre><p>需要注意的是，如果结果集包含多个元素，那么赋值的时候，将对其中所有的元素赋值；取值的时候，则是只取出第一个元素的值（.text()例外，它取出所有元素的 text 内容）。</p><h2 id="元素的操作：移动"><a href="# 元素的操作：移动" class="headerlink" title="元素的操作：移动"></a>元素的操作：移动</h2><p>.insertAfter()，把 div 元素移动 p 元素后面：</p><p><code>$(&#39;div&#39;).insertAfter(&#39;p&#39;);</code></p><p>.after()，把 p 元素加到 div 元素前面：<br>　<br><code>$(&#39;p&#39;).after(&#39;div&#39;);</code></p><p>使用这种模式的操作方法，一共有四对</p><pre><code>.insertAfter()和.after()：在现存元素的外部，从后面插入元素.insertBefore()和.before()：在现存元素的外部，从前面插入元素.appendTo()和.append()：在现存元素的内部，从后面插入元素.prependTo()和.prepend()  ：在现存元素的内部，从前面插入元素</code></pre><h3 id="1-after"><a href="#1-after" class="headerlink" title="(1) .after():"></a>(1) .after():</h3><p>描述:</p><p>在所有段落中后插入一个 jQuery 对象(类似于一个 DOM 元素数组)。</p><p>HTML 代码:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I would like to say: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>jQuery 代码:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I would like to say: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span></code></pre><h3 id="2-insertAfter-："><a href="#2-insertAfter-：" class="headerlink" title="(2) .insertAfter()："></a>(2) .insertAfter()：</h3><p>描述:</p><p>把所有段落插入到一个元素之后。与 <code>$(&quot;#foo&quot;).after(&quot;p&quot;)</code> 相同</p><p>HTML 代码:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I would like to say: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>jQuery 代码:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token string">"#foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I would like to say: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h3 id="3-before-："><a href="#3-before-：" class="headerlink" title="(3) .before()："></a>(3) .before()：</h3><p>描述:</p><p>在所有段落中前插入一个 jQuery 对象(类似于一个 DOM 元素数组)。</p><p>HTML 代码:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I would like to say: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span></code></pre><p>jQuery 代码:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I would like to say: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h3 id="4-append-："><a href="#4-append-：" class="headerlink" title="(4) .append()："></a>(4) .append()：</h3><p>描述：向所有段落中追加一些 HTML 标记。</p><p>HTML 代码:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I would like to say: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>jQuery 代码:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;b>Hello&lt;/b>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I would like to say: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h3 id="5-appendTo"><a href="#5-appendTo" class="headerlink" title="(5) .appendTo()"></a>(5) .appendTo()</h3><p>描述：新建段落追加 div 中并加上一个 class</p><p>HTML 代码:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>jQuery 代码:</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;p/>"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test test2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="6-prepend"><a href="#6-prepend" class="headerlink" title="(6) .prepend()"></a>(6) .prepend()</h3><p>描述：向所有段落中前置一个 jQuery 对象(类似于一个 DOM 元素数组)。</p><p>HTML 代码:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I would like to say: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span></code></pre><p>jQuery 代码:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>I would like to say: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h3 id="7-prependTo"><a href="#7-prependTo" class="headerlink" title="(7) .prependTo()"></a>(7) .prependTo()</h3><p>描述：把所有段落追加到 ID 值为 foo 的元素中。</p><p>HTML 代码:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I would like to say: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>jQuery 代码:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prependTo</span><span class="token punctuation">(</span><span class="token string">"#foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I would like to say: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="元素的操作：复制、删除和创建"><a href="# 元素的操作：复制、删除和创建" class="headerlink" title="元素的操作：复制、删除和创建"></a>元素的操作：复制、删除和创建 </h2><p> 复制元素使用.clone()</p><p>删除元素使用.remove()和.detach()。两者的区别在于，前者不保留被删除元素的事件，后者保留，有利于重新插入文档时使用。</p><p>清空元素内容（但是不删除该元素）使用.empty()。</p><p>创建新元素的方法非常简单，只要把新元素直接传入 jQuery 的构造函数就行了：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;p>Hello&lt;/p>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;li class="new">new list item&lt;/li>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;li>list item&lt;/li>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="工具方法"><a href="# 工具方法" class="headerlink" title="工具方法"></a>工具方法 </h2><p> 除了对选中的元素进行操作以外，jQuery 还提供一些工具方法（utility），不必选中元素，就可以直接使用。</p><p>常用的工具方法有以下几种：</p><pre><code> $.trim() 去除字符串两端的空格。 $.each() 遍历一个数组或对象。 $.inArray() 返回一个值在数组中的索引位置。如果该值不在数组中，则返回 -1。 $.grep() 返回数组中符合某种标准的元素。 $.extend() 将多个对象，合并到第一个对象。 $.makeArray() 将对象转化为数组。 $.type() 判断对象的类别（函数对象、日期对象、数组对象、正则对象等等）。 $.isArray() 判断某个参数是否为数组。 $.isEmptyObject() 判断某个对象是否为空（不含有任何属性）。 $.isFunction() 判断某个参数是否为函数。 $.isPlainObject() 判断某个参数是否为用 &quot;{}&quot; 或 &quot;new Object&quot; 建立的对象。 $.support() 判断浏览器是否支持某个特性。</code></pre><h2 id="事件操作"><a href="# 事件操作" class="headerlink" title="事件操作"></a>事件操作</h2><p>jQuery 可以对网页元素绑定事件。根据不同的事件，运行相应的函数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>目前，jQuery 主要支持以下事件：</p><pre><code>.blur() 表单元素失去焦点。.change() 表单元素的值发生变化.click() 鼠标单击.dblclick() 鼠标双击.focus() 表单元素获得焦点.focusin() 子元素获得焦点.focusout() 子元素失去焦点.hover() 同时为 mouseenter 和 mouseleave 事件指定处理函数.keydown() 按下键盘（长时间按键，只返回一个事件）.keypress() 按下键盘（长时间按键，将返回多个事件）.keyup() 松开键盘.load() 元素加载完毕.mousedown() 按下鼠标.mouseenter() 鼠标进入（进入子元素不触发）.mouseleave() 鼠标离开（离开子元素不触发）.mousemove() 鼠标在元素内部移动.mouseout() 鼠标离开（离开子元素也触发）.mouseover() 鼠标进入（进入子元素也触发）.mouseup() 松开鼠标.ready() DOM 加载完成.resize() 浏览器窗口的大小发生改变.scroll() 滚动条的位置发生变化.select() 用户选中文本框中的内容.submit() 用户递交表单.toggle() 根据鼠标点击的次数，依次运行多个函数.unload() 用户离开页面</code></pre><p>以上这些事件在 jQuery 内部，都是.bind()的便捷方式。使用.bind()可以更灵活地控制事件，比如为多个事件绑定同一个函数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>    <span class="token string">'click change'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 同时绑定 click 和 change 事件</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>有时，你只想让事件运行一次，这时可以使用.one()方法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token string">"click"</span>， <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只运行一次，以后的点击不会运行</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>unbind()用来解除事件绑定。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>所有的事件处理函数，都可以接受一个事件对象 (event object) 作为参数，比如下面例子中的 e：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"click"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个事件对象有一些很有用的属性和方法：</p><pre><code>event.pageX 事件发生时，鼠标距离网页左上角的水平距离 　　event.pageY 事件发生时，鼠标距离网页左上角的垂直距离event.type 事件的类型（比如 click） 　　event.which 按下了哪一个键 　　event.data 在事件对象上绑定数据，然后传入事件处理函数 　　event.target 事件针对的网页元素event.preventDefault() 阻止事件的默认行为（比如点击链接，会自动打开新页面）event.stopPropagation() 停止事件向上层元素冒泡</code></pre><p>在事件处理函数中，可以用 this 关键字，返回事件针对的 DOM 元素：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'evil'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 如果确认为有害链接</span>        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 阻止打开</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'evil'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加上表示有害的 class</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>有两种方法，可以自动触发一个事件。一种是直接使用事件函数，另一种是使用.trigger()或.triggerHandler()。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="特殊效果"><a href="# 特殊效果" class="headerlink" title="特殊效果"></a>特殊效果</h2><p>jQuery 允许对象呈现某些特殊效果。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 展现一个 h1 标题</span></code></pre><p>常用的特殊效果如下：</p><pre><code>.fadeIn() 淡入.fadeOut() 淡出.fadeTo() 调整透明度.hide() 隐藏元素.show() 显示元素.slideDown() 向下展开.slideUp() 向上卷起.slideToggle() 依次展开或卷起某个元素.toggle() 依次展示或隐藏某个元素</code></pre><p>除了.show()和.hide()，所有其他特效的默认执行时间都是 400ms(毫秒)，但是你可以改变这个设置。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 300 毫秒内淡入</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token string">'slow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 缓慢地淡出</span></code></pre><p>在特效结束后，可以指定执行某个函数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>更复杂的特效，可以用.animate()自定义。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    left <span class="token punctuation">:</span> <span class="token string">"+=50"</span>，<span class="token comment" spellcheck="true">// 不断右移</span>    opacity <span class="token punctuation">:</span> <span class="token number">0.25</span> <span class="token comment" spellcheck="true">// 指定透明度</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 持续时间</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'done!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 回调函数</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>.stop()和.delay()用来停止或延缓特效的执行。</p><p><code>$.fx.off</code> 如果设置为 true，则关闭所有网页特效。</p><p>几个常见的筛选选择器：</p><p>filter()：筛选出与指定表达式匹配的元素集合。这个方法用于缩小匹配的范围。用逗号分隔多个表达式</p><p>描述：保留子元素中不含有 ol 的元素。</p><p>HTML 代码:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>How are you?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>jQuery 代码:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ol"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>How are you?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>silce()：选取一个匹配的子集</p><p>描述：选择第一个 p 元素</p><p>HTML 代码:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>cruel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>jQuery 代码:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrapInner</span><span class="token punctuation">(</span><span class="token string">"&lt;b>&lt;/b>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2017-02-07-jquery/#disqus_thread</comments>
    </item>
    
    <item>
      <title>本地配置 Jekyll</title>
      <link>https://blog.xungejiang.com/2017-01-28-jekyll-install/</link>
      <guid>https://blog.xungejiang.com/2017-01-28-jekyll-install/</guid>
      <pubDate>Mon, 08 Oct 2018 03:32:06 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文主要是为了让博客系统在本地跑起来，如果不想在本地运行，可以无视本文，但我还是强烈建议试着先在本地跑起来，没有什么问题后再推送的 GitHub 上。</p><p><img src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-03-28-001.png" width="50%"></p><p>Jekyll 是一个开源的博客生成工具，类似 WordPress。但与之不同的是，jekyll 只生成静态网页，并不需要数据库支持。通常配合第三方评论系统使用，例如 <a href="http://www.uyan.cc/" rel="external nofollow noopener noreferrer" target="_blank">有言 </a>, <del>Disqus（由于众所周知的原因上不去）</del>, <del> 多说（已倒闭）</del>。GitHub Pages 原生支持 jekyll，而且可以绑定自己的域名。</p><p>关于 <a href="http://xungejiang.com/2017/01/27/github-domain-name/" rel="external nofollow noopener noreferrer" target="_blank">GithubPages 绑定自定义域名</a> 可以参考这篇文章。</p><h2 id="安装 -Ruby"><a href="# 安装 -Ruby" class="headerlink" title="安装 Ruby"></a>安装 Ruby</h2><p>Jekyll 是用 ruby 语言编写的，所以我们首先要在 windows 上装好 ruby 环境。</p><h3 id="下载 -RubyInstaller"><a href="# 下载 -RubyInstaller" class="headerlink" title="下载 RubyInstaller"></a>下载 <a href="http://rubyinstaller.org/downloads/" rel="external nofollow noopener noreferrer" target="_blank">RubyInstaller</a></h3><p>注意选择对应的操作系统版本为 64 位 还是 32 位。</p><h3 id="安装 -Ruby-1"><a href="# 安装 -Ruby-1" class="headerlink" title="安装 Ruby"></a>安装 Ruby</h3><p>记得要勾选 <strong>Add Ruby executables to your PATH</strong>，其作用是绑定 ruby 环境变量，另外安装目录不可以包含空格。</p><h3 id="下载 DevKit"><a href="# 下载 DevKit" class="headerlink" title="下载 DevKit"></a>下载 DevKit</h3><p>与 RubyInstller 同一链接，页面稍下方有“DEVELOPMENT KIT”， 注意：DevKit 版本要与上面的 ruby 版本是匹配的。</p><h3 id="安装 DevKit"><a href="# 安装 DevKit" class="headerlink" title="安装 DevKit"></a>安装 DevKit</h3><p>解压 DevKit 完成后打开 CMD 窗口，回到 Devkit 根目录，输入：</p><pre><code>ruby dk.rb initruby dk.rb install</code></pre><p>返回的分别是</p><pre><code>[INFO] found RubyInstaller v2.3.3 at C:/Ruby23-x64Initialization complete! Please review and modify the auto-generated&#39;config.yml&#39; file to ensure it contains the root directories to allof the installed Rubies you want enhanced by the DevKit.</code></pre><pre><code>[INFO] Updating convenience notice gem override for &#39;C:/Ruby23-x64&#39;[INFO] Installing &#39;C:/Ruby23-x64/lib/ruby/site_ruby/devkit.rb&#39;</code></pre><h2 id="安装 -Jekyll"><a href="# 安装 -Jekyll" class="headerlink" title="安装 Jekyll"></a>安装 Jekyll</h2><h3 id="更换源"><a href="# 更换源" class="headerlink" title="更换源"></a>更换源 </h3><p> 无翻墙软件，可使用国内淘宝提供的源</p><pre><code>gem sources --remove https://rubygems.org/gem sources -a https://ruby.taobao.org/gem sources -l</code></pre><p>有翻墙软件，可以使用如下源</p><pre><code>gem sources --remove https://rubygems.org/gem sources -a  http://rubygems.org/</code></pre><h3 id="安装 -Jekyll-1"><a href="# 安装 -Jekyll-1" class="headerlink" title="安装 Jekyll"></a>安装 Jekyll</h3><pre><code>gem install jekyll</code></pre><h3 id="安装 -paginate"><a href="# 安装 -paginate" class="headerlink" title="安装 paginate"></a>安装 paginate</h3><pre><code>gem install jekyll-paginate</code></pre><h2 id="使用 jekyll"><a href="# 使用 jekyll" class="headerlink" title="使用 jekyll"></a>使用 jekyll</h2><p>网上找个模板好看的 github pages 的博客， Clone 下来。</p><p>Clone 有两种方法</p><p>第一种是 https 方法，通过直接输入账号密码的格式提交代码；<br>第二种是 ssh 的方式，需要提前配置 SSH ，之后可直接 push 代码。</p><p>Git 的基本操作参考 <a href="http://xungejiang.com/2016/07/07/github/" rel="external nofollow noopener noreferrer" target="_blank">git 介绍 github 的基本配置</a> 这篇文章。</p><pre><code>git clone https://github.com/[username]/[username].github.io.gitgit clone git@github.com:[username]/[username].github.io.git</code></pre><p>启动 jekyll 服务</p><pre><code>cd xxxx.github.io.gitjekyll s</code></pre><h2 id="提交文章"><a href="# 提交文章" class="headerlink" title="提交文章"></a>提交文章</h2><pre><code>cd {username.github.io}git add .git commit -m &quot; 提交简介 &quot;git push origin master</code></pre>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2017-01-28-jekyll-install/#disqus_thread</comments>
    </item>
    
    <item>
      <title>如何将 Matplotlib 图像展示在 web 页面上</title>
      <link>https://blog.xungejiang.com/2018-08-04-matplotlib-html/</link>
      <guid>https://blog.xungejiang.com/2018-08-04-matplotlib-html/</guid>
      <pubDate>Sat, 04 Mar 2017 05:25:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;我们知道 Matplotlib 是一个非常强大的 Python 画图工具，其不仅可以画条形图、饼状图等统计图，也可以画以像素构成的图像。MATLAB 能画的图像，Matplotlib 通过 Python 语言也能画。&lt;/p&gt;
&lt;p&gt;做项目的时候遇到一个需求，就是如何将网页后端生成的 Matplotlib 图像展示在前端页面上。尝试使用了如下几种方法，在此记录一下。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们知道 Matplotlib 是一个非常强大的 Python 画图工具，其不仅可以画条形图、饼状图等统计图，也可以画以像素构成的图像。MATLAB 能画的图像，Matplotlib 通过 Python 语言也能画。</p><p>做项目的时候遇到一个需求，就是如何将网页后端生成的 Matplotlib 图像展示在前端页面上。尝试使用了如下几种方法，在此记录一下。</p><a id="more"></a><h2 id="使用 -mpld3- 包"><a href="# 使用 -mpld3- 包" class="headerlink" title="使用 mpld3 包"></a>使用 mpld3 包 </h2><p> 这是一个相对简单并且改动较小的方法，只需要在后端改一下 import 就可以，具体使用方法参照 <a href="http://mpld3.github.io/quickstart.html" rel="external nofollow noopener noreferrer" target="_blank"> 官方教程</a>。</p><p>但是实现的时候遇到了一些问题</p><ul><li>不适合大数据可视化的处理，当图像超过几千个元素时，前端展示的图像会有一定的模糊；</li><li>使用时必须联网；</li><li>一些 Matplotlib 的方法在 mpld3 中缺失。</li></ul><h2 id="保存在网页服务器的 -static- 目录下"><a href="# 保存在网页服务器的 -static- 目录下" class="headerlink" title="保存在网页服务器的 static 目录下"></a>保存在网页服务器的 static 目录下 </h2><p> 该方法易于实现，首先将网页后端的图像保存到后端服务器的 static 目录下，前端再从 static 目录下读取图片进行展示。</p><p>但是依然存在一些问题</p><ul><li>无法判断响应时间。因为后端生成图片的时间未知，所以只能采用在前端延时展示，这样也浪费时间资源；</li><li>前后端分离的项目中，前端访问后端 static 目录路径时不方便。</li></ul><h2 id="使用请求的方式将图像传到前端"><a href="# 使用请求的方式将图像传到前端" class="headerlink" title="使用请求的方式将图像传到前端"></a>使用请求的方式将图像传到前端 </h2><p> 该方法将图像以请求的方式传到前端，前端只需将 \&lt;img> 标签的 src 属性赋值为后端的请求路径即可。</p><p>该方法可以在后端生成完图像后再发送给前端，无需设置延时获取图像，但也遇到一些问题</p><ul><li>项目中后端获取前端的请求后需要返回两个请求，一个是表格数据，一个是图像，这样代码就比较冗余；</li><li>由于 Matplotlib 生成的图像有白边，而只有加上 <code>fig.savefig(&#39;a.png&#39;, bbox_inches=&#39;tight&#39;, pad_inches=0.0)</code> 这句代码时才能去除白边，而发送请求只能发送 fig ，所以前端显示的图像有白边。</li></ul><h2 id="将图像以 -Base64- 格式发送给前端"><a href="# 将图像以 -Base64- 格式发送给前端" class="headerlink" title="将图像以 Base64 格式发送给前端"></a>将图像以 Base64 格式发送给前端 </h2><p> 该方法也是本人最终采取的方法。原理是在调用 savefig 方法时不存储为图像，而是存储为二进制格式，二进制格式再转化为 Base64 格式，并将其发送给前端，前端只需要将 \&lt;img> 标签的 src 属性赋值为后端发送的 Base64 字符串即可。</p><p>后端代码如下所示</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO<span class="token keyword">import</span> base64<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltfig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>sio <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span>sio<span class="token punctuation">,</span> format<span class="token operator">=</span><span class="token string">'png'</span><span class="token punctuation">,</span> bbox_inches<span class="token operator">=</span><span class="token string">'tight'</span><span class="token punctuation">,</span> pad_inches<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span>data <span class="token operator">=</span> base64<span class="token punctuation">.</span>encodebytes<span class="token punctuation">(</span>sio<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>src <span class="token operator">=</span> <span class="token string">'data:image/png;base64,'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><p>将最后一行的 <code>src</code> 传到前端即可展示。</p><p>该方法优点如下</p><ul><li>该方法可以在后端生成完图像后再发送给前端，无需设置延时获取图像；</li><li>该方法只需要往前端发送一次请求，代码更加精简；</li><li>调用了 savefig 方法，可以去除白边。</li></ul><p>所以几乎解决了之前方法的所有痛点</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2018-08-04-matplotlib-html/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用 Markdown + MathJax 在博客里插入数学公式</title>
      <link>https://blog.xungejiang.com/2017-03-03-markdown-mathjax/</link>
      <guid>https://blog.xungejiang.com/2017-03-03-markdown-mathjax/</guid>
      <pubDate>Fri, 03 Mar 2017 01:01:42 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css&quot;&gt;&lt;script src
        
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>content<br>{:toc}</li></ul><p>在书写数值计算类文章，难免需要插入复杂的数学公式。一种是用图片在网页上展示，另外一种是使用 <a href="https://www.mathjax.org" rel="external nofollow noopener noreferrer" target="_blank">MathJax</a> 来展示复杂的数学公式。</p><p>它直接使用 Javascript 使用矢量字库或 SVG 文件来显示数学公式。优点是效果好，比如在 Retina 屏幕上也不会变得模糊。并且可以直接把公式写在 Markdown 文章里。本文介绍在 Sublime 中使用 MathJax 在 Markdown 文件里直接插入数学公式。并且附带一个简单的书写数学公式的 LaTex 教程。</p><h2 id="工具"><a href="# 工具" class="headerlink" title="工具"></a>工具 </h2><h3 id="配置 -Markdown-Preview- 来支持 -MathJax"><a href="# 配置 -Markdown-Preview- 来支持 -MathJax" class="headerlink" title="配置 Markdown Preview 来支持 MathJax"></a> 配置 Markdown Preview 来支持 MathJax</h3><p>使用 Sublime + Markdown Preview 插件来写博客时。需要开启 Markdown Preview 对 MathJax 的支持，这样在预览界面才能正确地显示数学公式。方法是打开在 Markdown Preview 的用户配置文件 (Package Settings -&gt; Markdown Preview -&gt; Setting - User) 里添加如下内容：</p><pre><code>&quot;enable_mathjax&quot;: true</code></pre><h3 id="配置 -Pelican- 主题模板来支持 -MathJax"><a href="# 配置 -Pelican- 主题模板来支持 -MathJax" class="headerlink" title="配置 Pelican 主题模板来支持 MathJax"></a>配置 Pelican 主题模板来支持 MathJax</h3><p>如果博客不支持 MathJax 可以在模板中添加如下脚本</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- mathjax config similar to math.stackexchange --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/x-mathjax-config<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">MathJax<span class="token punctuation">.</span>Hub<span class="token punctuation">.</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>jax<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"input/TeX"</span><span class="token punctuation">,</span> <span class="token string">"output/HTML-CSS"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    tex2jax<span class="token punctuation">:</span> <span class="token punctuation">{</span>inlineMath<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token string">'$'</span><span class="token punctuation">,</span> <span class="token string">'$'</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>        displayMath<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'$$'</span><span class="token punctuation">,</span> <span class="token string">'$$'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        processEscapes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        skipTags<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'script'</span><span class="token punctuation">,</span> <span class="token string">'noscript'</span><span class="token punctuation">,</span> <span class="token string">'style'</span><span class="token punctuation">,</span> <span class="token string">'textarea'</span><span class="token punctuation">,</span> <span class="token string">'pre'</span><span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    messageStyle<span class="token punctuation">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>    <span class="token string">"HTML-CSS"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>preferredFont<span class="token punctuation">:</span> <span class="token string">"TeX"</span><span class="token punctuation">,</span> availableFonts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"STIX"</span><span class="token punctuation">,</span><span class="token string">"TeX"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://cdn.mathjax.org/mathjax/latest/MathJax.js?config<span class="token punctuation">=</span>TeX-AMS-MML_HTMLorMML<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="LaTex- 简明教程"><a href="#LaTex- 简明教程" class="headerlink" title="LaTex 简明教程"></a>LaTex 简明教程 </h2><h3 id="规则"><a href="# 规则" class="headerlink" title="规则"></a> 规则 </h3><p> 关于在 Markdown 书写 LaTex 数学公式有几个规则常用规则需要记住：</p><p><strong>行内公式 </strong><br> 行内公式使用 <code>$</code> 号作为公式的左右边界，如 $h(x) = \theta_0 + \theta_1 x$ 公式的 LaTex 内容如下</p><pre><code>$h(x) = \theta_0 + \theta_1 x$</code></pre><p><strong>行间公式 </strong><br> 公式需要独立显示一行时，使用 <code>$$</code> 来作为公式的左右边界，如</p><p>$$<br>\theta_i = \theta_i - \alpha\frac\partial{\partial\theta_i}J(\theta)<br>$$</p><p>的 LaTex 代码为：</p><pre><code>$$\theta_i = \theta_i - \alpha\frac\partial{\partial\theta_i}J(\theta)$$</code></pre><p><strong>常用 LaTex 代码 </strong><br> 需要记住的几个常用的符号，这样书写起来会快一点</p><table><thead><tr><th>编码</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>\frac</td><td>分子分母之间的横线</td><td>$\frac1x$</td></tr><tr><td>_</td><td>用下划线来表示下标</td><td>$x_i$</td></tr><tr><td>^</td><td>次方运算符来表示上标</td><td>$x^i$</td></tr><tr><td>\sum</td><td>累加器，上下标用上面介绍的编码来书写</td><td>$\sum$</td></tr><tr><td>\alpha</td><td>希腊字母 alpha</td><td>$y := \alpha x$</td></tr></tbody></table><p>要特别注意公式里空格和 <code>{}</code> 的运用规则。基本原则是，空格可加可不加，但如果会引起歧义，最好加上空格。<code>{}</code> 是用来组成群组的。比如写一个分式时，分母是一个复杂公式时，可以用 <code>{}</code> 包含起来，这样整个复杂公式都会变成分母了。</p><h3 id="几个非常有用的资源"><a href="# 几个非常有用的资源" class="headerlink" title="几个非常有用的资源"></a>几个非常有用的资源</h3><ul><li>这是一篇质量很高的 <a href="http://mlworks.cn/posts/introduction-to-mathjax-and-latex-expression/" rel="external nofollow noopener noreferrer" target="_blank"> 介绍 MathJax 的中文博客文章</a>，需要注意的是如果是用 markdown 编写 MathJax 公式，当公式里需要两个斜杠 \ 时要写四个斜杠 \。因为 \ 会被 markdown 转义一次。</li><li>Github 上有个 <a href="https://kerzol.github.io/markdown-mathjax/editor.html" rel="external nofollow noopener noreferrer" target="_blank"> 在线 Markdown MathJax 编辑器</a>，可以在这里练习，平时写公式时也可以在这里先写好再拷贝到文章里</li><li>这是 <a href="http://www.forkosh.com/mathtextutorial.html" rel="external nofollow noopener noreferrer" target="_blank">LaTex 完整教程</a>，包含完整的 LaTex 数学公式的内容，包括更高级的格式控制等</li><li>这是一份 PDF 格式的 <a href="http://mirrors.ctan.org/info/symbols/math/maths-symbols.pdf" rel="external nofollow noopener noreferrer" target="_blank">MathJax 支持的数学符号表</a>，当需要书写复杂数学公式时，一些非常特殊的符号的转义字符可以从这里查到</li></ul><p>好啦，这样差不多就可以写出优美的数学公式啦。</p><p>本文参考 <a href="http://blog.kamidox.com/write-math-formula-with-mathjax.html" rel="external nofollow noopener noreferrer" target="_blank">kamidox.com</a></p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/2017-03-03-markdown-mathjax/#disqus_thread</comments>
    </item>
    
    <item>
      <title>GithubPages 绑定自定义域名</title>
      <link>https://blog.xungejiang.com/github-domain-name/</link>
      <guid>https://blog.xungejiang.com/github-domain-name/</guid>
      <pubDate>Fri, 27 Jan 2017 01:01:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;本文将着重介绍如何将 GithubPages 的博客绑定自定义域名。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文将着重介绍如何将 GithubPages 的博客绑定自定义域名。</p><a id="more"></a><h2 id="域名的好处"><a href="# 域名的好处" class="headerlink" title="域名的好处"></a>域名的好处 </h2><p> 域名除了为了装 B，给人留下深刻的印象，博主认为最大的好处是能访问的运营商更多了。</p><p>博主使用的是 <strong>GithubPages</strong> 作为博客的平台，带来的问题是 由于 IP 访问限制，只有使用电信运营商时才能访问，而移动运营商不能访问（联通没试过）。而绑定域名后，因为使用 DNS 解析，移动运营商的网络也可以访问了。</p><h2 id="购买域名"><a href="# 购买域名" class="headerlink" title="购买域名"></a>购买域名 </h2><p> 域名购买有多种渠道。这里推荐用国外的 <a href="https://sg.godaddy.com/zh/" rel="external nofollow noopener noreferrer" target="_blank">Godaddy</a> 进行域名注册。</p><p>Godaddy 有很多的优惠码，并且可以使用支付宝付款，非常方便。博主 2017 年买的一年域名花了 55￥。</p><p>购买域名很简单，一步步来就行，如果不能使用支付宝付款，说明使用的优惠码不支持支付宝，可以选择使用国际银行卡支付或者换个优惠码。</p><h2 id="配置 -DNS- 解析"><a href="# 配置 -DNS- 解析" class="headerlink" title="配置 DNS 解析"></a>配置 DNS 解析 </h2><h3 id="配置 -DNSPOD- 解析"><a href="# 配置 -DNSPOD- 解析" class="headerlink" title="配置 DNSPOD 解析"></a> 配置 DNSPOD 解析 </h3><p> 在 Godaddy 上购买域名后，域名会自动使用 Godaddy 自己的 DNS 解析器进行解析，不过容易被墙，所以建议使用国内的 DNS 解析器。这里推荐免费的 <a href="https://www.dnspod.cn/" rel="external nofollow noopener noreferrer" target="_blank">DNSPOD</a> 进行 DNS 解析。</p><p>DNSPOD 支持 QQ 账号登录，非常方便。进入 <strong>域名解析 </strong> -&gt; <strong> 添加域名</strong> ，输入你注册的域名，进入后将记录改为如图所示</p><table><thead><tr><th style="text-align:center">主机记录</th><th style="text-align:center">记录类型</th><th style="text-align:center">记录值</th><th style="text-align:center">TTL</th></tr></thead><tbody><tr><td style="text-align:center">@</td><td style="text-align:center">A</td><td style="text-align:center">192.30.252.153</td><td style="text-align:center">600</td></tr><tr><td style="text-align:center">@</td><td style="text-align:center">A</td><td style="text-align:center">192.30.252.154</td><td style="text-align:center">600</td></tr><tr><td style="text-align:center">@</td><td style="text-align:center">NS</td><td style="text-align:center">f1g1ns1.dnspod.net.</td><td style="text-align:center">86400</td></tr><tr><td style="text-align:center">@</td><td style="text-align:center">NS</td><td style="text-align:center">f1g1ns2.dnspod.net.</td><td style="text-align:center">86400</td></tr></tbody></table><img src="https://img.xungejiang.com/static/images/17-1-27/001.jpg"><p>其中下面两个 NS 记录类型是不能更改的。</p><p>这里建议使用 A 记录进行解析。当然也可以使用 CNAME 解析，但是博主使用 CNAME 进行解析有时出现错误。。所以不如把解析地址指向 GitHub，让 Github 进行域名解析。</p><h3 id="配置 -Godaddy- 解析"><a href="# 配置 -Godaddy- 解析" class="headerlink" title="配置 Godaddy 解析"></a>配置 Godaddy 解析 </h3><p> 在 <strong>我的账户 </strong> 中选择 <strong> 我的产品</strong></p><img src="https://img.xungejiang.com/static/images/17-1-27/002.jpg"><p>在 <strong>域名 </strong> 处点击 <strong> 管理</strong></p><img src="https://img.xungejiang.com/static/images/17-1-27/003.jpg"><p>点击域名旁边的箭头，选择 <strong>设置域名服务器</strong></p><img src="https://img.xungejiang.com/static/images/17-1-27/004.jpg"><p>将 <strong>标准 </strong> 改为 <strong> 定制</strong> ，并填写 DNSPOD 的解析服务器</p><img src="https://img.xungejiang.com/static/images/17-1-27/005.jpg"><img src="https://img.xungejiang.com/static/images/17-1-27/006.jpg"><pre><code>f1g1ns1.dnspod.netf1g1ns2.dnspod.net</code></pre><h2 id="Github- 的 -CNAME- 配置"><a href="#Github- 的 -CNAME- 配置" class="headerlink" title="Github 的 CNAME 配置"></a>Github 的 CNAME 配置</h2><p>GithubPages 是支持域名绑定的，只需要在主目录里添加一个名字为 <strong>CNAME</strong> 文件，注意没有后缀名。文件内容为你所购买的域名，注意没有 www 前缀，例如你申请的 <code>xiaoming.com</code> , 那么 <strong>CNAME</strong> 的内容为 <code>xiaoming.com</code>。</p><p>这样的话当你输入 <code>xiaoming.github.io</code> 时会自动跳转到 <code>xiaoming.com</code>。</p><p>至此 GitHub 域名绑定完毕，你已经通过域名访问你的网站啦~</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/github-domain-name/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2012 款 21.5 寸 iMac 添加 7+17pin 接口固态硬盘</title>
      <link>https://blog.xungejiang.com/iMac-21.5-change-SSD/</link>
      <guid>https://blog.xungejiang.com/iMac-21.5-change-SSD/</guid>
      <pubDate>Tue, 06 Dec 2016 01:01:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;2012年款 21.5寸 的 iMac 标准版是 8G 内存 + 1T 机械硬盘。在这个没有固态硬盘活不了的时代，又怎么能忍受机械硬盘的卡慢烂。。于是我考虑给我的iMac加装固态硬盘。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>2012 年款 21.5 寸 的 iMac 标准版是 8G 内存 + 1T 机械硬盘。在这个没有固态硬盘活不了的时代，又怎么能忍受机械硬盘的卡慢烂。。于是我考虑给我的 iMac 加装固态硬盘。</p><a id="more"></a><p>加装固态硬盘有两种方案：</p><ul><li><p>方案一：把机械硬盘换成固态硬盘。这样的优点是操作简单，缺点是大容量的固态硬盘成本较高，而 iMac 没有其他多余的硬盘位。</p></li><li><p>方法二：利用主板背面的固态硬盘接口加装固态硬盘，并保留原来的机械硬盘。优点是性价比高，缺点是操作复杂，需要把整个主板卸下来，要求动手能力强。</p></li></ul><p>这个主板后面的 SSD 接口为 7+17pin ，是苹果自己专用的，只有专门为苹果固态硬盘提供配货的厂家才卖，价格贵的惊人。</p><p>所以我的解决方案是买一个 msata 转 7+17pin 接口的转换器，再买一个 msata 的固态硬盘就好啦~</p><p>需要注意的是 2012 款 ssd 接口与之后年份的接口不同，买的时候需要向卖家确认。</p><h2 id="准备工作"><a href="# 准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li><p><strong>msata 转 7+17pin 接口的转换器 </strong> ，在某宝搜索关键字：<strong>macbook</strong>， <strong>2012</strong>， <strong>msata</strong>；<br> 这就是上文提到的接口转换器。注意一下这是 2012 款的接口，之后年份的接口与之不同，不过也是苹果独家，与市面上不兼容。</p></li><li><p><strong>msata 接口的固态硬盘</strong> ，这个牌子很多，自己选吧。我买的是 256G 三星 850evo；</p></li><li><p><strong>21.5 寸 iMac 双面胶 </strong> ，在某宝搜索关键字：<strong>imac</strong>， <strong>21.5</strong>， <strong> 双面胶 </strong>；<br> 因为 iMac 的屏幕与机身是由双面胶固定的，所以在还原过程中需要重新粘贴双面胶。某宝上卖的有两款，贵的那款在边缘处理上和原厂更相近。当然两款都能粘住，不过淘宝的胶粘性过强，再想起开屏幕会比较费事。</p></li><li><p><strong>两款口径的六角螺丝刀 </strong> ，在某宝搜索关键字：<strong> 六角梅花螺丝刀套装 </strong>；<br> 一共需要 <strong>T10</strong> ， <strong>T8</strong> 两款口径的六角螺丝刀，所以建议买螺丝刀套装。</p></li></ol><h2 id="拆解"><a href="# 拆解" class="headerlink" title="拆解"></a>拆解 </h2><p> 推荐一个 <a href="http://pan.baidu.com/s/1i5hXKvr" rel="external nofollow noopener noreferrer" target="_blank">iFixit 加装固态硬盘的视频</a>，非常详细，有这个视频基本就不用往下看了，在此只是总结一下注意事项。</p><p>这个是 <a href="https://www.ifixit.com/Guide/iMac+Intel+21.5-Inch+EMC+2544+SSD+Replacement/28992" rel="external nofollow noopener noreferrer" target="_blank">iFixit 加装固态硬盘的文字教程</a>，也非常详细，需要科学上网才能查看。本篇博客的部分图片为该网站原图，侵删。</p><h3 id="拆卸屏幕"><a href="# 拆卸屏幕" class="headerlink" title="拆卸屏幕"></a>拆卸屏幕 </h3><p> 需要挑选硬实点的卡片，废弃的会员卡、银行卡都是不错的选择。买双面胶淘宝可能会赠送拆屏拨片，不过实际使用体验不如前者好。</p><p>一般从屏幕侧面下方开始切入，之后就是力气活啦，暴力出奇迹吧。放心，轻易不会损坏屏幕，注意的是需要跳过上部中间摄像头部分，避免胶蹭到摄像头部分。</p><p><strong>以下部分尤其重要！！</strong><br>因为屏幕有两跟数据线和主板连结，所以当屏幕已经分离后，需要将屏幕翘起 15 度左右，从主板将两根数据线拔掉后方可把屏幕拿下。</p><p>拆解方法如图</p><img src="https://img.xungejiang.com/static/images/16-12-6/001.jpg"><img src="https://img.xungejiang.com/static/images/16-12-6/002.jpg"><p>之后在清除底部双面胶后便可将屏幕拿下。</p><h3 id="拆卸底部支架条"><a href="# 拆卸底部支架条" class="headerlink" title="拆卸底部支架条"></a>拆卸底部支架条 </h3><p> 在 iMac 下部有 5 个螺丝，如图，拧下后便可把底部的支架条拿下来。不拿下来的话主板和音频主板都相当难拿下来。。不要问博主是怎么知道的。。</p><img src="https://img.xungejiang.com/static/images/16-12-6/003.jpg"><img src="https://img.xungejiang.com/static/images/16-12-6/004.jpg"><h3 id="拆卸机械硬盘固定架"><a href="# 拆卸机械硬盘固定架" class="headerlink" title="拆卸机械硬盘固定架"></a>拆卸机械硬盘固定架 </h3><p> 拧下如图所示四颗螺丝。</p><img src="https://img.xungejiang.com/static/images/16-12-6/021.jpg"><p>这时已可以拆下整个机械硬盘，不过本教程选择先拆解音频主板。</p><h3 id="拆卸音频主板"><a href="# 拆卸音频主板" class="headerlink" title="拆卸音频主板"></a>拆卸音频主板 </h3><p> 首先将 2 个连接线拔出。</p><img src="https://img.xungejiang.com/static/images/16-12-6/005.jpg"><img src="https://img.xungejiang.com/static/images/16-12-6/006.jpg"><p>拧下底部固定的两个螺丝。</p><img src="https://img.xungejiang.com/static/images/16-12-6/007.jpg"><p>这时可以将音频主板的一侧拿出，比较困难，一定不要暴力，因为另一侧还有两根线连结在主板和音箱。</p><p>然后便可将两根连接线取下，方法如图，也比较费力。</p><img src="https://img.xungejiang.com/static/images/16-12-6/008.jpg"><img src="https://img.xungejiang.com/static/images/16-12-6/009.jpg"><h3 id="拆卸风扇"><a href="# 拆卸风扇" class="headerlink" title="拆卸风扇"></a>拆卸风扇 </h3><p> 首先取下电源线。</p><img src="https://img.xungejiang.com/static/images/16-12-6/010.jpg"><p>然后拧下如图所示三颗螺丝即可取下。</p><img src="https://img.xungejiang.com/static/images/16-12-6/011.jpg"><h3 id="拆卸机械硬盘"><a href="# 拆卸机械硬盘" class="headerlink" title="拆卸机械硬盘"></a>拆卸机械硬盘 </h3><p> 机械硬盘就非常好拆啦，拆下 SATA 接口连接线即可。</p><img src="https://img.xungejiang.com/static/images/16-12-6/012.jpg"><h3 id="拆卸机械硬盘支撑架"><a href="# 拆卸机械硬盘支撑架" class="headerlink" title="拆卸机械硬盘支撑架"></a>拆卸机械硬盘支撑架 </h3><p> 拧下如图螺丝即可取下。</p><img src="https://img.xungejiang.com/static/images/16-12-6/013.jpg"><h3 id="取下与主板连结的所有连接线"><a href="# 取下与主板连结的所有连接线" class="headerlink" title="取下与主板连结的所有连接线"></a>取下与主板连结的所有连接线</h3><img src="https://img.xungejiang.com/static/images/16-12-6/014.jpg"><img src="https://img.xungejiang.com/static/images/16-12-6/015.jpg"><img src="https://img.xungejiang.com/static/images/16-12-6/016.jpg"><img src="https://img.xungejiang.com/static/images/16-12-6/017.jpg"><h3 id="拆卸出风口"><a href="# 拆卸出风口" class="headerlink" title="拆卸出风口"></a>拆卸出风口 </h3><p> 这里需要拧下四颗螺丝，如图，注意该型螺丝型号为 T8，而之前型号为 T10 ，要小一些。</p><img src="https://img.xungejiang.com/static/images/16-12-6/018.jpg"><p>该出风口与主板是连接在一起的。</p><h3 id="拆卸右侧扩音器"><a href="# 拆卸右侧扩音器" class="headerlink" title="拆卸右侧扩音器"></a>拆卸右侧扩音器 </h3><p> 拧下如图所示两颗螺丝。</p><img src="https://img.xungejiang.com/static/images/16-12-6/019.jpg"><p>扩音器不必要完全拆卸，只需将扩音器往右挪一挪即可。</p><h3 id="拆卸主板"><a href="# 拆卸主板" class="headerlink" title="拆卸主板"></a>拆卸主板 </h3><p> 拧下如图所示四颗螺丝。</p><img src="https://img.xungejiang.com/static/images/16-12-6/020.jpg"><p>即可拿掉主板。比较费力，因为是和 USB 等接口对应的，需要耐心。</p><h3 id="安装固态硬盘"><a href="# 安装固态硬盘" class="headerlink" title="安装固态硬盘"></a>安装固态硬盘 </h3><p> 在主板背面就能找到我们期待已久的 SSD 接口啦，安装比较容易。</p><h2 id="后续工作"><a href="# 后续工作" class="headerlink" title="后续工作"></a>后续工作 </h2><p> 再按之前的步骤倒序依次安装即可。</p><p>开机后进入 Windows 系统，系统会自动识别到新安装的固态硬盘，并提醒你分区。至此固态硬盘安装完毕，剩下的就是在固态硬盘上重装系统了。速度飞起~~</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/iMac-21.5-change-SSD/#disqus_thread</comments>
    </item>
    
    <item>
      <title>米家 LED 智能台灯移动电源供电</title>
      <link>https://blog.xungejiang.com/Mijia-lamp-portable-source/</link>
      <guid>https://blog.xungejiang.com/Mijia-lamp-portable-source/</guid>
      <pubDate>Sat, 19 Nov 2016 01:01:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;米家LED智能台灯设计简洁美观，然而只能使用插座供电，对于晚上停电的学生党来说真是一大遗憾。本文将介绍如何使用移动电源为米家LED智能台灯供电。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>米家 LED 智能台灯设计简洁美观，然而只能使用插座供电，对于晚上停电的学生党来说真是一大遗憾。本文将介绍如何使用移动电源为米家 LED 智能台灯供电。</p><a id="more"></a><h2 id="12V-USB 升压线"><a href="#12V-USB 升压线" class="headerlink" title="12V USB 升压线"></a>12V USB 升压线 </h2><p> 首先需要在淘宝上买一条 12V 的 USB 升压线。</p><p>关键词：12v； usb 升压线。</p><p>一定要管客服要接口是 4mm 的！！<br>一定要管客服要接口是 4mm 的！！<br>一定要管客服要接口是 4mm 的！！（事重三）</p><p>因为卖家一般只卖 3.5mm 的和 5.5mm 接口的，当时我拿格尺量感觉差不多 3.5mm 就下单了，不过客服特别负责，问我能不能把插头插入耳机孔，能插入的才是 3.5mm 的，而米家台灯的插头并不能插入，所以是 4mm 的。</p><p>最后卖家给我发了一个 5.5mm 的接口配了一个 4mm 的转接头。</p><p>转接头如下图</p><img src="https://img.xungejiang.com/static/images/16-11-19/003.jpg"><img src="https://img.xungejiang.com/static/images/16-11-19/004.jpg"><p>最终完美适配~</p><img src="https://img.xungejiang.com/static/images/16-11-19/007.jpg"><h2 id="为什么买 -12V- 的 - 升压线？"><a href="# 为什么买 -12V- 的 - 升压线？" class="headerlink" title="为什么买 12V 的 升压线？"></a>为什么买 12V 的 升压线？</h2><p>米家 LED 智能台灯的插座标示的是 12V 0.5A ，而我是用的移动电源最高电压输出只有 5V ，所以需要 12V 的升压线。</p><p>台灯适配器如下图</p><img src="https://img.xungejiang.com/static/images/16-11-19/006.jpg"><h2 id="推荐一下"><a href="# 推荐一下" class="headerlink" title="推荐一下"></a>推荐一下 </h2><p> 作为 Miboy 强推一下这款台灯吧，此款台灯设计简洁，美观，并且护眼，亮度、冷暖色无级调节（有一个旋钮，按下拧调冷暖色，不按下拧调亮度），可以连接手机选择不同模式（没什么用，喜欢自己调），总之非常适合学习和办公使用，配合本文中的移动电源使用方法简直无黑点。</p><p>暖色</p><img src="https://img.xungejiang.com/static/images/16-11-19/001.jpg"><p>冷色</p><img src="https://img.xungejiang.com/static/images/16-11-19/002.jpg">]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/Mijia-lamp-portable-source/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PPT 中插入高亮代码的踩坑历程</title>
      <link>https://blog.xungejiang.com/PPT-highlight-code/</link>
      <guid>https://blog.xungejiang.com/PPT-highlight-code/</guid>
      <pubDate>Wed, 12 Oct 2016 01:01:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;转载作者：&lt;a href=&quot;http://www.snovey.com/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;snovey&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你是一名小白，又梦想有朝一日成为一代大 PPT 工程师，或许你会需要这篇文章。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>转载作者：<a href="http://www.snovey.com/" rel="external nofollow noopener noreferrer" target="_blank">snovey</a></p><p>如果你是一名小白，又梦想有朝一日成为一代大 PPT 工程师，或许你会需要这篇文章。</p><a id="more"></a><h2 id="PPT- 中插入高亮代码的踩坑历程"><a href="#PPT- 中插入高亮代码的踩坑历程" class="headerlink" title="PPT 中插入高亮代码的踩坑历程"></a>PPT 中插入高亮代码的踩坑历程 </h2><p> 如何在 PPT 中插入高亮的代码？少量代码大可以手调，但是当代码多起来就力不从心了。一个显然的办法是用 HTML 对代码高亮，然后粘贴过去，HTML 高亮的方法有很多，一搜一大堆，但是 HTML 格式的代码粘贴到 Word 是高亮的，但是粘贴到 PPT（即使是从 Word 粘贴过去）都会出现问题，至少我这里会出现问题。</p><p>怎么办呢？</p><p>查了一下，微软自家的产品内部通用 <a href="https://www.wikiwand.com/zh/RTF" rel="external nofollow noopener noreferrer" target="_blank">RTF (Rich Text Format)</a> 格式，接下来就是如何得到 RTF 格式的高亮代码了。</p><p>我手头用的 Sublime，有一款插件叫做 Highlight，选中代码，右键 -&gt; Copy as RTF，然后粘贴到 PPT 就好了。然后发现代码高亮有坑（诸如左右括号不一样颜色之类的 bug）。</p><p>Notepad++ 也有这个功能，下载最新的 Notepad++ 7.0 版本，安装插件，连个 plugin manager 都没有，手动安装出错，遂退回到 6.9 版本，然后 Copy as RTF 粘贴到 PPT，结果连背景色都带上了，RTF 那个语法，简直了，看着就想吐，别说改了，卒。</p><p>最后我选择了 <a href="http://pygments.org/" rel="external nofollow noopener noreferrer" target="_blank">Pygments</a>，安装：</p><pre><code>pip install Pygments</code></pre><p>执行：</p><pre><code>pygmentize -f rtf -O style=paraiso-dark -l c -o code.rtf code.c</code></pre><p>粘贴到 PPT，OK。</p><p>结束了 PPT 中代码高亮的噩梦。</p><p>参考：<br><a href="https://superuser.com/questions/85948/how-can-i-embed-programming-source-code-in-powerpoint-slide-and-keep-code-highli" rel="external nofollow noopener noreferrer" target="_blank">How can I embed programming source code in Powerpoint slide and keep code highlighting?</a><br><a href="http://pygments.org/docs/cmdline/" rel="external nofollow noopener noreferrer" target="_blank">Pygments Docs</a><br><a href="https://gist.github.com/ept/4475995" rel="external nofollow noopener noreferrer" target="_blank">How to add syntax-highlighted code to PowerPoint slides (Mac OS)</a></p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/PPT-highlight-code/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HTML 表单的验证</title>
      <link>https://blog.xungejiang.com/form-confirm/</link>
      <guid>https://blog.xungejiang.com/form-confirm/</guid>
      <pubDate>Tue, 19 Jul 2016 01:01:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;表单的验证在实际生活中很常见，比如注册页面要求用户名长度6-12位，如果不在这个范围内会报错的。&lt;/p&gt;
&lt;p&gt;表单的验证一般使用 JavaScript 实现，博主在这里简单介绍一下。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>表单的验证在实际生活中很常见，比如注册页面要求用户名长度 6-12 位，如果不在这个范围内会报错的。</p><p>表单的验证一般使用 JavaScript 实现，博主在这里简单介绍一下。</p><a id="more"></a><h2 id="表单的创建"><a href="# 表单的创建" class="headerlink" title="表单的创建"></a>表单的创建 </h2><p> 表单经常是由输入框组成。这里介绍几个常用的输入框。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     文本框   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 密码框   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   提交按扭  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 复选框   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    单选框   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    重置按扭  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    图片按扭  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   隐藏域   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   按扭     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     浏览文件  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></code></pre><p>执行后的效果大概如此</p><img src="https://img.xungejiang.com/static/images/16-7-19/001.jpg"><p>这里以注册用户名为例，要求 <strong>6-30 位字母、数字或“_”, 字母开头</strong></p><pre class=" language-html"><code class="language-html">用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkName()<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FF9900<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>6-30 位字母、数字或“_”, 字母开头 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><p>将改代码片段放入 <body> 标签下，最后执行结果如图所示：</body></p><img src="https://img.xungejiang.com/static/images/16-7-19/002.jpg"><h3 id="onblur- 介绍"><a href="#onblur- 介绍" class="headerlink" title="onblur 介绍"></a>onblur 介绍 </h3><p> 这里需要用到一个 <strong>event</strong> 对象 <code>onblur</code> ，定义为 <strong>onblur 事件会在对象失去焦点时发生</strong>，及当我光标离开输入框时触发事件发生，这非常适用于检查输入框内容的格式是否符合要求。当然还有很多 <code>events</code> ，若想了解更多可到 <a href="http://www.w3school.com.cn/jsref/dom_obj_event.asp" rel="external nofollow noopener noreferrer" target="_blank">w3school</a> 查询。</p><h3 id="span- 介绍"><a href="#span- 介绍" class="headerlink" title="span 介绍"></a>span 介绍</h3><p><code>&lt;span&gt;</code> 标签被用来组合文档中的行内元素。这里主要用来显示错误信息。</p><h2 id="JavaScript- 实现"><a href="#JavaScript- 实现" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">checkName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> u <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> info1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"info1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> yes <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        info1<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;font color = 'red'>✘请输入用户名！&lt;/font>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        info1<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;font color = 'red'>✘用户名长度不能少于 6 个字符！&lt;/font>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token regex">/^[a-zA-Z][a-zA-Z0-9_]{5,29}$/</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        info1<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;font color = 'red'>✘用户名只能由字母，数字，下划线组成，须以字母开头 &lt;/font>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    yes<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;font color='green'>✔&lt;/font>"</span><span class="token punctuation">;</span>    info1<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>由代码可以很容易理解 JavaScript 语法需要先用 <code>document.getElementById(&quot;&quot;)</code> 获取输入框，然后用 <code>.value</code> 得到输入框的内容。</p><p>错误分三种情况：</p><p>1. 如果输入为空，则错误信息为“请输入用户名！”<br>2. 如果输入少于 6 个字符，则错误信息为“用户名长度不能少于 6 个字符！”<br>3. 如果输入不满足由 <code>由字母，数字，下划线组成，须以字母开头 </code> 这个条件，则错误信息为 <code> 用户名只能由字母，数字，下划线组成，须以字母开头</code></p><p>三种错误方式分别如图所示</p><img src="https://img.xungejiang.com/static/images/16-7-19/003.jpg"><img src="https://img.xungejiang.com/static/images/16-7-19/004.jpg"><img src="https://img.xungejiang.com/static/images/16-7-19/005.jpg"><p>正确方式如图所示</p><img src="https://img.xungejiang.com/static/images/16-7-19/006.jpg"><p>其中最后的条件限制使用了正则表达式。</p><h3 id="placeholder- 介绍"><a href="#placeholder- 介绍" class="headerlink" title="placeholder 介绍"></a>placeholder 介绍</h3><p>placeholder 是 html5 <code>&lt;input&gt;</code> 里的属性，提供可描述输入字段预期值的提示信息（hint）。</p><p>为了</p><p>具体代码如下，以下代码基于 <a href="https://kyfw.12306.cn/otn/regist/init" rel="external nofollow noopener noreferrer" target="_blank">12306 网上购票用户注册</a></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span> 无标题文档 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">210</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 用户名设置成功后不可修改 <span class="token punctuation">"</span></span> <span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkName()<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FF9900<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>6-30 位字母、数字或“_”, 字母开头 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 失去焦点 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 登陆密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">210</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6-20 位字母、数字或符号 <span class="token punctuation">"</span></span> <span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkPassword()<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yes1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 确认密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">210</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 再次输入您的登录密码 <span class="token punctuation">"</span></span> <span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkPasswordtwice()<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>passwordconfirm<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yes2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 姓名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">210</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 再次输入您的登录密码 <span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 证件类型:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">210</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span> 二代身份证 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 选项 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span> 港澳通行证 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 选项 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span> 台湾通行证 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 选项 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span> 护照 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 选项 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span> 证件号码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">210</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 请输入您的证件号码 <span class="token punctuation">"</span></span> <span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkID()<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IDNO<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yes3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span> 手机号码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">210</span>px</span><span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 请输入您的手机号码 <span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 旅客类型:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span> 成人 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 选项 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span> 儿童 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 选项 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span> 学生 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 选项 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span> 残疾军人、伤残人民警察 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 选项 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">function</span> <span class="token function">checkName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> u <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> info1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"info1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> yes <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        info1<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;img src='https://kyfw.12306.cn/otn/resources/images/ots/icon_wrong.png'>&lt;font color = 'red'> 请输入用户名！&lt;/font>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        info1<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;img src='https://kyfw.12306.cn/otn/resources/images/ots/icon_wrong.png'>&lt;font color = 'red'> 用户名长度不能少于 6 个字符！&lt;/font>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> firstChar <span class="token operator">=</span> u<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*if (!((firstChar >= 'a' &amp;&amp; firstChar &lt;= 'z') || (firstChar >= 'A' &amp;&amp; firstChar &lt;= 'Z')))    {        info.innerHTML = "&lt;font color = 'red'>✘用户名必须以字母开头！&lt;/font>";        return false;    }*/</span>    <span class="token comment" spellcheck="true">// 定义一个正则表达式，校验用户名的规则</span>    <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token regex">/^[a-zA-Z][a-zA-Z0-9_]{5,29}$/</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        info1<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"&lt;img src='https://kyfw.12306.cn/otn/resources/images/ots/icon_wrong.png'>&lt;font color = 'red'> 用户名只能由字母，数字，下划线组成，须以字母开头 &lt;/font>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    yes<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"&lt;font color='green'>✔&lt;/font>"</span><span class="token punctuation">;</span>    info1<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***************************checkPassword*************************/</span><span class="token keyword">var</span> pass <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> info2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"info2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pass <span class="token operator">=</span> p<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        info2<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;img src='https://kyfw.12306.cn/otn/resources/images/ots/icon_wrong.png'>&lt;font color = 'red'> 请输入密码！&lt;/font>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        info2<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;img src='https://kyfw.12306.cn/otn/resources/images/ots/icon_wrong.png'>&lt;font color = 'red'> 密码长度不能少于 6 个字符！&lt;/font>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> firstChar <span class="token operator">=</span> p<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义一个正则表达式，校验用户名的规则</span>    <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token regex">/^[a-zA-Z][a-zA-Z0-9_]{5,29}$/</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        info2<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"&lt;img src='https://kyfw.12306.cn/otn/resources/images/ots/icon_wrong.png'>&lt;font color = 'red'> 只能由字母，数字，下划线组成，须以字母开头 "</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    yes1<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"&lt;font color='green'>✔&lt;/font>"</span><span class="token punctuation">;</span>    info2<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*********************checkPasswordtwice*******************************/</span><span class="token keyword">function</span> <span class="token function">checkPasswordtwice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"passwordconfirm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> info3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"info3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>value<span class="token operator">!=</span>pass<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        info3<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;img src='https://kyfw.12306.cn/otn/resources/images/ots/icon_wrong.png'>&lt;font color = 'red'> 确认密码与密码不同！&lt;/font>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    yes2<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"&lt;font color='green'>✔&lt;/font>"</span><span class="token punctuation">;</span>    info3<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*****************************checkID*********************************/</span><span class="token keyword">function</span> <span class="token function">checkID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"IDNO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> info4 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"info4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//var r = /^[0-9][a-zA-Z0-9]{18}$/;</span>    <span class="token keyword">var</span> r1 <span class="token operator">=</span> <span class="token regex">/[0-9]{18}$/</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>r1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        info4<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"&lt;img src='https://kyfw.12306.cn/otn/resources/images/ots/icon_wrong.png'>&lt;font color = 'red'> 请正确输入 18 位的身份证号 &lt;/font>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    yes3<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"&lt;font color='green'>✔&lt;/font>"</span><span class="token punctuation">;</span>    info4<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/form-confirm/#disqus_thread</comments>
    </item>
    
    <item>
      <title>wordpress 使用 highlight.js 添加语法高亮</title>
      <link>https://blog.xungejiang.com/highlight/</link>
      <guid>https://blog.xungejiang.com/highlight/</guid>
      <pubDate>Tue, 19 Jul 2016 01:01:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;wordpress 使用 highlight.js 添加语法高亮&lt;/p&gt;
&lt;p&gt;转载作者博客：&lt;a href=&quot;http://www.snovey.com/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;snovey&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>wordpress 使用 highlight.js 添加语法高亮</p><p>转载作者博客：<a href="http://www.snovey.com/" rel="external nofollow noopener noreferrer" target="_blank">snovey</a></p><a id="more"></a><h2 id="highlight-js- 简介"><a href="#highlight-js- 简介" class="headerlink" title="highlight.js 简介"></a>highlight.js 简介</h2><p>wordpress 有强大的 <a href="https://cn.wordpress.org/plugins/crayon-syntax-highlighter/" rel="external nofollow noopener noreferrer" target="_blank">Crayon Syntax Highlighter</a>，因为太过强大，很多功能用不上，用这个插件会拖慢网站速度，于是找到了这个插件：<a href="https://highlightjs.org/" rel="external nofollow noopener noreferrer" target="_blank">highlight.js</a>，如果你只是想给代码添加简单的高亮而不需要添加行号、复制按钮之类的功能，那么这款插件刚好适合你。下面简单的介绍一下：<br><a href="https://highlightjs.org/" rel="external nofollow noopener noreferrer" target="_blank">highlight.js</a> 是一款强大的代码高亮插件。官方给出描述如下：</p><blockquote><ul><li>支持 166 种语言，有 77 种样式</li><li>自动识别语言</li><li>同时支持多种语言</li><li>支持 node.js 平台</li><li>支持各种标记</li><li>兼容任何 js 框架</li></ul></blockquote><p>该项目已在 Github 开源，项目地址：<a href="https://github.com/isagalaev/highlight.js" rel="external nofollow noopener noreferrer" target="_blank">highlight.js</a><br>安装的思路非常简单：</p><blockquote><ol><li>导入 CSS 文件</li><li>导入 JS 文件</li><li>加载 JS</li></ol></blockquote><h2 id="导入 -highlight-js"><a href="# 导入 -highlight-js" class="headerlink" title="导入 highlight.js"></a>导入 highlight.js</h2><p>最简单粗暴的方法如下，在 <code>header.php</code> 中加入如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/path/to/styles/default.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/path/to/highlight.pack.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">hljs<span class="token punctuation">.</span><span class="token function">initHighlightingOnLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>注意修改路径！<br>当然，这个办法非常不可取，JS 应当放在 <code>&lt;body&gt;</code> 中而非 <code>&lt;head&gt;</code> 中，所以改进后的办法是将</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/path/to/highlight.pack.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">hljs<span class="token punctuation">.</span><span class="token function">initHighlightingOnLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>移至 <code>footer.php</code> 中 <code>&lt;/body&gt;</code> 标签之前。<br>为了插件化我更推荐你这样做：在 <code>function.php</code> 中添加如下代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add_highlight_js</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">wp_enqueue_style</span><span class="token punctuation">(</span><span class="token string">'highlightcss'</span><span class="token punctuation">,</span><span class="token string">'/path/to/styles/default.css'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wp_register_script</span><span class="token punctuation">(</span><span class="token string">'highlightjs'</span><span class="token punctuation">,</span><span class="token string">'/path/to/highlight.pack.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注册 handle</span>        <span class="token function">wp_enqueue_script</span><span class="token punctuation">(</span><span class="token string">'highlightjs'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 放至 &lt;body> 下方</span>    <span class="token punctuation">}</span>    <span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string">'wp_enqueue_scripts'</span><span class="token punctuation">,</span> <span class="token string">'add_highlight_js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后在 <code>footer.php</code> 中添加</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">hljs<span class="token punctuation">.</span><span class="token function">initHighlightingOnLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>设置触发函数。</p><h2 id="关于安装路径"><a href="# 关于安装路径" class="headerlink" title="关于安装路径"></a>关于安装路径 </h2><p> 如果是下载至本地，那么在网站的 <code>/wp-content/plugins/</code> 目录下新建 <code>highlight</code> 文件夹，然后将压缩包解压至该文件夹，将上述的</p><pre><code>/path/to/styles/default.css/path/to/highlight.pack.js</code></pre><p>修改为</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">get_site_url</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/wp-content/plugins/highlight/default.css'</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">get_site_url</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/wp-content/plugins/highlight/highlight.min.js'</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>即可。如果想要提高网站的速度，也可以不从本地加载，转而使用第三方提供的 CDN，下面贴几个。</p><p>cdnjs</p><pre><code>https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.6.0/highlight.min.js</code></pre><p>yandex:</p><pre><code>http://yandex.st/highlightjs/8.2/styles/default.min.csshttp://yandex.st/highlightjs/8.2/highlight.min.js</code></pre><p>Bootstrap</p><pre><code>http://cdn.bootcss.com/highlight.js/9.6.0/styles/default.min.csshttp://cdn.bootcss.com/highlight.js/9.6.0/highlight.min.js</code></pre><p>注意 <code>cdnjs</code> 不提供 CSS，而 <code>yandex</code> 貌似没有 8.2 以后的版本，根据自己的情况选择 CDN 吧。如果你想自定义代码高亮，不妨从 CDN 加载 JS，从本地加载 CSS，这里不啰嗦了。</p><h2 id="使用 -highlight-js"><a href="# 使用 -highlight-js" class="headerlink" title="使用 highlight.js"></a>使用 highlight.js</h2><p><code>hljs.initHighlightingOnLoad()</code> 会寻找 <code>&lt;pre&gt;&lt;code&gt;</code> 标签，所以使用 highlight.js 时应当这样写代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span></code></pre><p>记得在 class 中填写语言的类型。啥？介绍时不是说可以自动识别么？即便如此，标记语言类型是一种良好的编码习惯。</p><p>参考链接：</p><p><a href="https://highlightjs.org/" rel="external nofollow noopener noreferrer" target="_blank">highlight.js</a><br><a href="https://github.com/isagalaev/highlight.js" rel="external nofollow noopener noreferrer" target="_blank">highlight.js</a><br><a href="http://blog.wpjam.com/article/how-to-include-js-and-css-in-wordpress/" rel="external nofollow noopener noreferrer" target="_blank">如何正确引用 JavaScript 和 CSS 文件</a></p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/highlight/#disqus_thread</comments>
    </item>
    
    <item>
      <title>macOS 如何显示隐藏文件</title>
      <link>https://blog.xungejiang.com/mac-show-hidden-files/</link>
      <guid>https://blog.xungejiang.com/mac-show-hidden-files/</guid>
      <pubDate>Mon, 18 Jul 2016 01:01:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;mac 为了系统安全会将一些文件夹隐藏，避免用户误删除造成的系统崩溃，但是在安装配置文件时经常需要到隐藏目录下操作，所以这里介绍两种方法，将隐藏的文件显示出来。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>mac 为了系统安全会将一些文件夹隐藏，避免用户误删除造成的系统崩溃，但是在安装配置文件时经常需要到隐藏目录下操作，所以这里介绍两种方法，将隐藏的文件显示出来。</p><a id="more"></a><h2 id="第一种方法 - 命令行"><a href="# 第一种方法 - 命令行" class="headerlink" title="第一种方法 命令行"></a>第一种方法 命令行 </h2><p> 命令方式最简单，键入如下两行命令你就可以实现对文件的现实和隐藏功能了。</p><pre><code>显示：defaults write com.apple.finder AppleShowAllFiles -bool true隐藏：defaults write com.apple.finder AppleShowAllFiles -bool false</code></pre><p>然后 <strong>重启 Finder</strong> !!!! 很重要!!!! 楼主就是试了好多次最后发现栽在这上面了</p><p>方法如图</p><img src="https://img.xungejiang.com/static/images/16-7-18/005.jpg"><img src="https://img.xungejiang.com/static/images/16-7-18/002.jpg"><h2 id="第二种方法 -Finder- 中设置"><a href="# 第二种方法 -Finder- 中设置" class="headerlink" title="第二种方法 Finder 中设置"></a>第二种方法 Finder 中设置 </h2><p> 在 Finder 中进入任意文件夹，按快捷键<code>Command + F</code> 调出搜索窗口，点击”种类”选项卡，在下面找到”其他”，如图所示</p><img src="https://img.xungejiang.com/static/images/16-7-18/003.jpg"><p>在弹出的窗口里 找到”文件可见性” 选项(可通过搜索快速查找)，勾选后面的方框, 点击”好”保存设置。</p><img src="https://img.xungejiang.com/static/images/16-7-18/004.jpg"><p>当然！！仍然需要重启 Finder ！！方法同上。</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/mac-show-hidden-files/#disqus_thread</comments>
    </item>
    
    <item>
      <title>macOS 如何安装 tomcat</title>
      <link>https://blog.xungejiang.com/mac-install-tomcat/</link>
      <guid>https://blog.xungejiang.com/mac-install-tomcat/</guid>
      <pubDate>Mon, 18 Jul 2016 01:01:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;Tomcat 服务器是一个免费的开放源代码的 Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试 JSP 程序的首选。&lt;/p&gt;
&lt;p&gt;博主是在学习 JavaWeb 的时候接触到 tomcat 的，这里介绍一下在 mac 系统安装 tomcat 的过程&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Tomcat 服务器是一个免费的开放源代码的 Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试 JSP 程序的首选。</p><p>博主是在学习 JavaWeb 的时候接触到 tomcat 的，这里介绍一下在 mac 系统安装 tomcat 的过程</p><a id="more"></a><h2 id="下载 -tomcat"><a href="# 下载 -tomcat" class="headerlink" title="下载 tomcat"></a>下载 tomcat</h2><p>首先到 <a href="http://tomcat.apache.org" rel="external nofollow noopener noreferrer" target="_blank">tomcat 官网</a> 下载 tomcat ，版本既然是新版兼容旧版当然是越新越好啦。</p><p>选择 <code>zip</code> 或者 <code>tar.gz</code> 下载即可。下载后解压，更名为 <code>tomcat</code> ，并复制到 <code>/Library</code> (就是 finder 中的资源库)。当时博主将文件夹重命名为 tomcat 后居然带后缀名 <code>tomcat.M9</code> 。。文件夹居然带后缀名！！后缀名居然删不掉！！也不知道那个 <code>.M9</code> 是咋出来的。。在表面看是看不到的啊！！</p><h2 id="修改授权"><a href="# 修改授权" class="headerlink" title="修改授权"></a>修改授权</h2><p>tomcat 中的几个运行服务程序都是以 *.sh 结尾的，在运行之前需要授权。打开终端输入如下命令:</p><pre><code>sudo chmod 755 /Library/tomcat/bin/*.sh</code></pre><p>其中 tomcat 为你的文件夹名。(博主当时很无奈的将 tomcat 换成了 tomcat.M9)</p><p>回车出现要输入密码：请输入本机账户密码</p><h2 id="启动 -tomcat- 服务"><a href="# 启动 -tomcat- 服务" class="headerlink" title="启动 tomcat 服务"></a>启动 tomcat 服务 </h2><p> 先使用 cd 命令进入 tomcat 的 bin 目录, 命令如下:</p><p>cd /Library/tomcat/bin/</p><p>启动服务命令:</p><pre><code>sudo sh startup.sh</code></pre><p>启动成功, 会出现如下结果:</p><pre><code>Using CATALINA_BASE:   /ProgramFile/tomcatUsing CATALINA_HOME:   /ProgramFile/tomcatUsing CATALINA_TMPDIR: /ProgramFile/tomcat/tempUsing JRE_HOME:        /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/HomeUsing CLASSPATH:       /ProgramFile/tomcat/bin/bootstrap.jar:/ProgramFile/tomcat/bin/tomcat-juli.jarTomcat started.</code></pre><p>如果出现如上结果，说明 tomcat 启动成功。</p><p>这个时候输入 <a href="http://localhost:8080/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/</a> 应该就可以访问了。</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/mac-install-tomcat/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HTML 标签总结</title>
      <link>https://blog.xungejiang.com/html-tab/</link>
      <guid>https://blog.xungejiang.com/html-tab/</guid>
      <pubDate>Sat, 16 Jul 2016 01:01:42 GMT</pubDate>
      <description>
      
        HTML 标签总结
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>HTML (HyperText Markup Language) 超文本标记语言，<strong>超文本</strong> 就是指页面内可以包含图片、链接，甚至音乐、程序等非文字元素。</p><a id="more"></a><p>超文本标记语言的结构包括 <strong>头 </strong> 部分（英语：Head）、和 <strong> 主体 </strong> 部分（英语：Body），其中 <strong> 头</strong> 部提供关于网页的信息，<strong>主体</strong> 部分提供网页的具体内容。</p><h2 id="前言"><a href="# 前言" class="headerlink" title="前言"></a>前言</h2><p><strong>HTML</strong> 标签很多，都记住有一定的困难。所以这里推荐 <strong>Dreamweaver</strong> ，很强大，标签有很多的提示。当然也有推荐初学者使用记事本编辑 html 文件的，不过仁者见仁智者见智吧，大家自己选择。</p><p>这里推荐两个网站，是专门查询标签的功能，并且可以在线查看效果的</p><p>1.<a href="http://www.w3school.com.cn/tags/" rel="external nofollow noopener noreferrer" target="_blank">http://www.w3school.com.cn/tags/</a></p><p>2.<a href="http://www.runoob.com/html/html-tutorial.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/html/html-tutorial.html</a></p><h2 id="HTML- 的基本标签"><a href="#HTML- 的基本标签" class="headerlink" title="HTML 的基本标签"></a>HTML 的基本标签 </h2><pre class=" language-html"><code class="language-html"> 基本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>        定义 HTML 文档<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>        文档的信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span><span class="token punctuation">></span></span>                  HTML 文档的元信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>      文档的标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span><span class="token punctuation">></span></span>                  文档与外部资源的关系<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token number">...</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>      文档的样式信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>        可见的页面内容<span class="token comment" spellcheck="true">&lt;!--...--></span>              注释文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            标题字大小（h1~h6）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>              粗体字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>    粗体字(强调)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>              斜体字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>            斜体字(强调)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span>              下划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">></span></span>          删除线(表示删除)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span>    居中文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            无序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>            有序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            列表项目<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>”...”</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>   超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span><span class="token punctuation">></span></span>                  定义文本字体尺寸、颜色、大小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>                   下标<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>                   上标<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                    换行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                     段落图形<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>”...”</span><span class="token punctuation">></span></span>         定义图像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>                    水平线表格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>      定义表格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            定义表格中的表头单元格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            定义表格中的行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            定义表格中的单元其它<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        定义供用户输入的 HTML 表单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span><span class="token punctuation">></span></span>                 定义框架集的窗口或框架</code></pre><p>## 表单</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span>get|post</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span> 定义表单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span> 上传档案<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text|password|checkbox|radio|image|hidden|submit|reset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 输入栏位<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>***<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 栏位名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>***<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 栏位内定值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span> 已选定（适用於 checkboxes 与 radio boxes）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span>?</span><span class="token punctuation">></span></span> 栏位宽度（以字元数为单位）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation">=</span>?</span><span class="token punctuation">></span></span> 最长字数（以字元数为单位）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> 下拉式选单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>***<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> 下拉式选单名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span>?</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> 选单项目数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span> 多选式选单 （多选）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span> 选项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token punctuation">></span></span> 内定选项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span>?</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span>?</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span> 文字输入区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>***<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span> 输入区名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">wrap</span><span class="token attr-value"><span class="token punctuation">=</span>off|virtual|physical</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span> 输入区换行方式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     文本框   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 密码框   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   提交按扭  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 复选框   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    单选框   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    重置按扭  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    图片按扭  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   隐藏域   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   按扭    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     浏览文件 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></code></pre>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/html-tab/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JDBC 基本使用方法</title>
      <link>https://blog.xungejiang.com/jdbc/</link>
      <guid>https://blog.xungejiang.com/jdbc/</guid>
      <pubDate>Fri, 15 Jul 2016 01:01:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;JDBC（Java Data Base Connectivity,java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。其优点是不论使用何种数据库，只需要更改配置文件即可。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JDBC（Java Data Base Connectivity,java 数据库连接）是一种用于执行 SQL 语句的 Java API，可以为多种关系数据库提供统一访问，它由一组用 Java 语言编写的类和接口组成。其优点是不论使用何种数据库，只需要更改配置文件即可。</p><a id="more"></a><h2 id="前言"><a href="# 前言" class="headerlink" title="前言"></a>前言</h2><p>2016-07-10 学校组织来大连东软实训，我选择的是 JavaWeb 方向，经过 20 天的学习收获还是蛮大的。第一个知识点是 jdbc 。为了留点纪念，所以想把老师讲的知识全部复述一下，可以说是详细版教程。</p><p>在东软，老师把 MySQL 和 Oracle 的使用方法都介绍了，但是由于 Oracle 过大，占内存，卸载不干净，所以在这里只介绍 MySQL 数据库的操作。</p><h2 id="MySQL- 的安装"><a href="#MySQL- 的安装" class="headerlink" title="MySQL 的安装"></a>MySQL 的安装 </h2><p> 首先到官网下载 <a href="http://dev.mysql.com/downloads/mysql/" rel="external nofollow noopener noreferrer" target="_blank">MySQL</a> 的数据库，和<a href="http://dev.mysql.com/downloads/workbench/" rel="external nofollow noopener noreferrer" target="_blank">MySQL Workbench</a> 的数据库操作界面。Windows 版的在安装时记得在填写密码时一定要记住，并且选择 <code>utf-8</code> 编码。mac 版的安装很简单，但是在创建数据库的时候记得填写密码，否则会生成临时密码，如果当时没有记住临时密码就惨了。</p><p>然后在 MySQL 上新建一个数据库，并在空白区域右键 <code>create schema</code> 。</p><h2 id="创建一张表"><a href="# 创建一张表" class="headerlink" title="创建一张表"></a>创建一张表 </h2><p> 当然 JDBC 是需要掌握 SQL 语句的一般语法。</p><p>使用 JDBC 的话一般只进行 <code> 增加 (insert)</code>，<code> 删除 (delete)</code>，<code> 修改 (update)</code>，<code> 查询 (select)</code> 等操作而很少进行 <code> 创建(create)</code> 操作，所以现在需要手动创建一张表。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu <span class="token punctuation">(</span>stu_no <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    stu_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    stu_tel <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">CONSTRAINT</span> pk_stu_no <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>stu_no<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">CONSTRAINT</span> uk_stu_tel <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>stu_tel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里以学生表为例。</p><h2 id="eclipse 的安装"><a href="#eclipse 的安装" class="headerlink" title="eclipse 的安装"></a>eclipse 的安装 </h2><p> 在东软老师推荐用 MyEclipse ，因为将来的 JavaWeb 需要各种插件。但是 MyEclipse 需要花钱买，否则需要破解。破解网上教程太多，就不举例了。</p><p>而 eclipse 是开源免费的。如果只用 JDBC 的话 eclipse 完全足够。这里给出 <a href="http://www.eclipse.org/downloads/eclipse-packages/" rel="external nofollow noopener noreferrer" target="_blank"> 官网下载地址</a>。</p><p>注意选择 <code>Java EE</code> 版本，并可以选择中国镜像，下载速度更快。</p><h2 id="JDBC- 的初步实现"><a href="#JDBC- 的初步实现" class="headerlink" title="JDBC 的初步实现"></a>JDBC 的初步实现 </h2><p> 用 eclipse 新建一个 <strong>java project</strong> 起名为 <strong>jdbc</strong></p><p>在工程下新建文件夹，命名为 <strong>lib</strong> ，将 <a href="http://pan.baidu.com/s/1jIKxFlc" rel="external nofollow noopener noreferrer" target="_blank">MySQL 的驱动文件</a> 复制到该文件夹，并右键 <strong>Build Path</strong> -&gt; <strong>Add to Build Path</strong> 。这时发现在工程里出现 <strong>Referenced Libraries</strong> ，里面有和刚才同名的 <strong>jar</strong> 文件。</p><p>在 <strong>src</strong> 中新建一个包。由于包的名字一般由公司域名倒置构成，所以我起名为 <code>com.xunge.jdbc</code></p><p>在包中新建一个类，类名为 <code>JDBCDemo</code>， 并录入以下代码。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xunge<span class="token punctuation">.</span>jdbc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCDemo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 加载数据库驱动程序</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 定义数据库 URL</span>        String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;amp;characterEncoding=utf-8"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获得与数据库的连接</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数据库连接</span>        Statement st <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 语句</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>con <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建 Statement 语句</span>            st <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行 SQL 语句</span>            <span class="token keyword">int</span> result <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"insert into stu values(2014201106,'jiangxunzhi','13654505793')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">+</span> <span class="token string">" 行数已更新 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 释放数据库资源</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>st<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>代码中的 <code>try catch</code> 和 导的包是用 <strong>eclipse</strong> 自动提示添加的。</p><p>上面的代码用 <strong>executeUpdate</strong> 方法，可以进行 <code>增加 (insert)</code>， <code> 删除 (delete)</code>， <code> 修改 (update)</code> 操作，返回的是更新数据的行数。而 <code> 查询(select)</code> 语句需要用 <strong>executeQuery</strong> 方法。</p><h2 id="JDBC- 的代码重构"><a href="#JDBC- 的代码重构" class="headerlink" title="JDBC 的代码重构"></a>JDBC 的代码重构 </h2><p> 然而这个代码如果多次执行的话重复的代码过多，需要进行代码复用。现在可以看到的是 <strong>连接数据库 </strong> 和 <strong> 删除数据库</strong> 代码是不变的，可以进行代码复用。</p><p>方法是：</p><p>1. 在 <strong>src</strong> 新建一个包，包名为 <code>com.xunge.jdbc.common</code>。</p><p>2. 在该包下新建一个文件，文件名为 <code>dbmysql.properties</code>。文件内容如下</p><pre><code># MySQLdriver = com.mysql.jdbc.Driverurl = jdbc:mysql://localhost:3306/jbdc?useUnicode=true&amp;amp;characterEncoding=utf-8username = rootpassword =root</code></pre><p>这个是 <strong>MySQL</strong> 数据库的配置文件。如果用的是 <strong>Oracle</strong> 数据库，则配置文件如下</p><pre><code>#Oracledriver = oracle.jdbc.driver.OracleDriverurl = jdbc:oracle:thin:@localhost:1521:orclusername = scottpassword = tiger</code></pre><p>properties 文件为配置文件。</p><p>2. 在该包下新建一个类，类名为 <code>JDBCUtil</code>，作为 JDBC 的工具类，内容如下。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xunge<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>common<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 工具类是代码重构的一种方式</span><span class="token comment" spellcheck="true">// 他解决的是在不同类中片段重复出现的代码</span><span class="token comment" spellcheck="true">// 工具类的方法必须是声明成静态</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String driverClass<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String dbUrl<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String userName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String passWord<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 只会执行一次</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 读取配置文件信息</span>        Properties p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>p<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>JDBCUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"db.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        driverClass <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dbUrl <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userName <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        passWord <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加载驱动程序</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获得与数据库的连接</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获得连接</span>            con <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>dbUrl<span class="token punctuation">,</span> userName<span class="token punctuation">,</span> passWord<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> con<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 释放数据库的资源</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeResource</span><span class="token punctuation">(</span>Statement st<span class="token punctuation">,</span> Connection con<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>st<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 释放数据库的资源 方法的重载</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeResource</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">,</span> Statement st<span class="token punctuation">,</span> Connection con<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>st<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>之后就可以引用工具类里的函数将 JDBC 实现出来。</p><h2 id="JDBC- 的查询"><a href="#JDBC- 的查询" class="headerlink" title="JDBC 的查询"></a>JDBC 的查询 </h2><p> 由上文知 <code>增加 (insert)</code>， <code> 删除 (delete)</code>， <code> 修改(update)</code> 操作用 <strong>executeUpdate</strong> 方法，返回的是更新数据的行数。</p><p>而 <code>查询(select)</code> 操作需要用 <strong>executeQuery</strong> 方法，需要用 <strong>executeQuery</strong> 方法，用 <strong>ResultSet</strong> 接收数据并输出。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xunge<span class="token punctuation">.</span>jdbc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xunge<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>JDBCUtil<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCDemo_select</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement st <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 结果集，用于保存查询到的数据</span>        con <span class="token operator">=</span> JDBCUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>st <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// executeQuery 有一个返回值 ResultSet</span>            rs <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"select * from stu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 处理结果集，取出数据</span>            <span class="token comment" spellcheck="true">// 先判断有没有数据，如果有再去数据</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 按列取，用 get XXX 方法，同事需要指定列名（有别名，按别名取）</span>                <span class="token keyword">int</span> stu_no <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"stu_no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String stu_name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"stu_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String stu_tel <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"stu_tel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu_no <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> stu_name <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> stu_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>JDBCUtil<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> st<span class="token punctuation">,</span> con<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="JDBC- 的预编译语句实现"><a href="#JDBC- 的预编译语句实现" class="headerlink" title="JDBC 的预编译语句实现"></a>JDBC 的预编译语句实现 </h2><p> 这里介绍一下 预编译语句。预编译语句 的优点是 如果遇到两条 SQL 语句除了几个参数不同，其他不变的话（尤其是插入语句！！），用 预编译语句 是再合适不过的啦。预编译不仅运行更快，而且写起来也方便很多。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xunge<span class="token punctuation">.</span>jdbc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xunge<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>JDBCUtil<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCDemo_gai</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement st <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 预编译语句</span>        con <span class="token operator">=</span> JDBCUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 预编译语句最大特点是先生成执行计划，这时具体的值用 ? 替代</span>            st <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"insert into stu values (?, ?, ?)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行之前需要将 ? 设值， 有几个 ? 就需要设值几个值</span>            <span class="token comment" spellcheck="true">// 使用 setXXX 设值, setXXX 方法需要两个参数，一个是需要代表第几个 ? ，从 1 开始，第二个是代表值</span>            st<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2014201106</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"jiangxunzhi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"13654505797"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2014201105</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"gongyuxin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"13654505796"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 以后建议使用 PreparedStatement 执行 SQL 语句</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>JDBCUtil<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> con<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>## 最后一段</p><p>以上就是 JDBC 配置的全部过程及简单的应用，相信在将来的 JavaWeb 开发中一定会用到其中的知识。</p><p>说说东软学校吧</p><p>东软老师真的很不错，很负责，也很耐心，遇到的一些问题向老师提问都会很快得到详细的解释，这样的教学方式非常值得大学老师的学习。</p><p>如果你们学校也组织来东软实训的话，我作为过来人也给出几条建议吧</p><ol><li><p>记得带网线！！！来这之前还一直担心没有网怎么熬过这个月，不过在贴吧里有很多卖账号的东软学生，比在外面办无线网卡合适多了。不过光用无线的话网速太慢，下载顶多 200K，有网线的话轻松到 1M。</p></li><li><p>如果是在东软 A 园区的话是没有独立卫浴的。</p></li></ol>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/jdbc/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在 macOS 中使用 BootCamp 安装 Windows10</title>
      <link>https://blog.xungejiang.com/mac-bootcamp-win10/</link>
      <guid>https://blog.xungejiang.com/mac-bootcamp-win10/</guid>
      <pubDate>Thu, 07 Jul 2016 01:01:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;如何在苹果电脑中安装双系统 mac + win10&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 如何在苹果电脑中安装双系统 mac + win10</p><a id="more"></a><p>## 前言 </p><p> 苹果电脑当然还是苹果系统最适合，优势最明显的是省电，当然也有美观、系统流畅等其他优点。但是也有很多劣势，比如 mac 系统学习成本比较大，很多软件不兼容。所以在硬盘空间的允许下装双系统应该是再合适不过的啦。</p><p> 博主就是因为老爸不习惯 macOS ，而博主又特别喜欢 macOS 的界面，所以权衡利弊借助 bootcamp 装了双系统。</p><p> 其实想在苹果电脑上运行 mac 还可以用虚拟机，这里推荐 <code>parlldesktop</code> 虚拟机，不过需要花钱，也有破解版。</p><p>## 准备工作 </p><p>win10 镜像， USB 2.0 。</p><p>## 开始制作 </p><p> 首先需要 win10 镜像，推荐 <a href="">MSN I tell you</a>，镜像都是原版无添加。</p><p> 然后需要一个 USB 2.0 的 U 盘。。<strong> 注意，最好！！一定！！是 2.0 的 U 盘 </strong> 因为博主试过好多 3.0 的 U 盘都不成功，后来看有人建议用 2.0 的 U 盘试试，果然成功了！！博主用的是 Kingston 的 2.0 U 盘。</p><p> 然后需要用 bootcamp 制作 win10 的启动 U 盘。</p><p> 实用工具 -&gt; bootcamp 助理 -&gt; 继续 -&gt; 打好三个对勾，然后会自动将镜像拷贝到 U 盘，并下载一些必要的驱动。之后会自动重启，安装方法和 Windows 就没有什么区别了。</p><p> 安装好 Windows 会发现没有无线网驱动，分辨率也不是很适配。这时候就需要打开 C 盘，会有一个 bootcamp 的文件夹，里头有 setup 的驱动程序，安装完成后就发现无线网卡出现了，分辨率也适配到了最佳水准。</p><hr><p>2018.10 update</p><p> 新版 BootCamp(启动转换助理) 不再需要使用 U 盘，系统会自动将硬盘的一部分分区作为系统盘，并在之后的使用中删去这个分区，使用更加方便 </p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/mac-bootcamp-win10/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sublime Text 3 设置 C/C++ 编译环境</title>
      <link>https://blog.xungejiang.com/sublime-C/</link>
      <guid>https://blog.xungejiang.com/sublime-C/</guid>
      <pubDate>Thu, 07 Jul 2016 01:01:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;本文将着重介绍 Sublime 如何配置 C++ 环境，并给出方便 ACMer 的模板使用方式。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文将着重介绍 Sublime 如何配置 C++ 环境，并给出方便 ACMer 的模板使用方式。</p><a id="more"></a><p>Sublime 作为文本编辑器的同时还可以进行一些轻量级的编程运算，由于其漂亮的界面，深得 ACMer 的喜爱。</p><p>虽然 Sublime 自带一个 C 语言的编译功能，但却无法使用，需要一定的配置才可以运行。</p><h2 id="安装 MinGW"><a href="# 安装 MinGW" class="headerlink" title="安装 MinGW"></a>安装 MinGW</h2><p>要想编译 C 语言首先要有编译器，Windows 平台主要是 <code>gcc</code> 和 <code>g++</code>，是通过安装 MinGW 实现的。</p><p>MinGW 的官网是 <a href="http://www.mingw.org/" rel="external nofollow noopener noreferrer" target="_blank">http://www.mingw.org/</a> ，但是从官网安装很麻烦，在线安装经常龟速容易失败。</p><p>博主推荐的方法是借助 <a href="http://www.codeblocks.org/downloads/binaries" rel="external nofollow noopener noreferrer" target="_blank">codeblocks</a>，选择带有 MinGW 的版本安装(100M 以上)。</p><p>博主也提供一个 <a href="http://pan.baidu.com/s/1o80CoYm" rel="external nofollow noopener noreferrer" target="_blank">codeblocks-16.01mingw-setup</a> 的百度云下载，感觉 codeblocks 官网还是下载慢。</p><p>安装后把 MinGW 文件夹复制出来放到 C 盘根目录就可以了。</p><h2 id="环境变量配置"><a href="# 环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置 </h2><p> 右键计算机 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量</p><img src="https://img.xungejiang.com/static/images/16-7-7/023.jpg"><p>把 <code>C:\MinGW\bin</code> 添加到 path 变量中，注意前后英文分号。</p><img src="https://img.xungejiang.com/static/images/16-7-7/024.jpg"><h2 id="Build-System- 配置"><a href="#Build-System- 配置" class="headerlink" title="Build System 配置"></a>Build System 配置</h2><p>Tools -&gt; Build System -&gt; New Build System</p><img src="https://img.xungejiang.com/static/images/16-7-7/025.jpg"><p>将下面代码粘贴，并保存为 <code>gcc.sublime-build</code> 。</p><p>Windows 系统代码如下</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"encoding"</span><span class="token operator">:</span> <span class="token string">"cp936"</span><span class="token punctuation">,</span>    <span class="token property">"working_dir"</span><span class="token operator">:</span> <span class="token string">"$file_path"</span><span class="token punctuation">,</span>    <span class="token property">"shell_cmd"</span><span class="token operator">:</span> <span class="token string">"g++ -Wall -std=c++0x -fexec-charset=GBK $file_name -o $file_base_name"</span><span class="token punctuation">,</span>    <span class="token property">"file_regex"</span><span class="token operator">:</span> <span class="token string">"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$"</span><span class="token punctuation">,</span>    <span class="token property">"selector"</span><span class="token operator">:</span> <span class="token string">"source.c++"</span><span class="token punctuation">,</span>    <span class="token property">"variants"</span><span class="token operator">:</span>    <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Run"</span><span class="token punctuation">,</span>            <span class="token property">"shell_cmd"</span><span class="token operator">:</span> <span class="token string">"g++ -Wall -fexec-charset=utf-8 \"$file\" -o \"$file_base_name\" &amp;&amp; start cmd /c \"\"${file_path}/${file_base_name}\" &amp; pause\""</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>MAC 系统代码如下</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"shell_cmd"</span><span class="token operator">:</span> <span class="token string">"g++ -o \"${file_path}/${file_base_name}\" \"${file}\""</span><span class="token punctuation">,</span>    <span class="token property">"file_regex"</span><span class="token operator">:</span> <span class="token string">"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$"</span><span class="token punctuation">,</span>    <span class="token property">"working_dir"</span><span class="token operator">:</span> <span class="token string">"${file_path}"</span><span class="token punctuation">,</span>    <span class="token property">"selector"</span><span class="token operator">:</span> <span class="token string">"source.c++"</span><span class="token punctuation">,</span>    <span class="token property">"variants"</span><span class="token operator">:</span>    <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Run"</span><span class="token punctuation">,</span>            <span class="token property">"shell_cmd"</span><span class="token operator">:</span> <span class="token string">"g++ -o \"${file_path}/${file_base_name}\" \"${file}\" &amp;&amp; open \"${file_path}/${file_base_name}\""</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>这样就可以用 cmd 运行，并且 scanf 也能读取。</p><h2 id="模板配置"><a href="# 模板配置" class="headerlink" title="模板配置"></a>模板配置</h2><p>sublime 我认为最方便的地方就是可以设置一些模板，比如博主参加 ACM 竞赛开头会有很多在每道题都出现的语句，头文件等，如果有模板就会非常方便。</p><pre class=" language-c++"><code class="language-c++"><snippet><content><![CDATA[#include <iostream>#include <algorithm>#include <cmath>#include <cstdio>#include <cstdlib>#include <cstring>#include <string>#include <map>#include <stack>#include <queue>#define LL long long#define INF 0x3f3f3f3using namespace std;const double eps = 1e-8;const int MAXN = (int)1e5 + 5;const LL MOD = 1000000007;int main(){#ifndef ONLINE_JUDGE    //freopen("in.txt", "r", stdin);#endif    int cas;    scanf("%d", &cas);    while(cas--)    {${1}    }    return 0;}]]></content>    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->    <!-- <tabTrigger>hello</tabTrigger> -->    <tabTrigger>acm</tabTrigger>    <!-- Optional: Set a scope to limit where the snippet will trigger -->    <!-- <scope>source.python</scope> -->    <scope>source.c++</scope></snippet></code></pre><p>中间代码的位置当然可以修改。然后保存为 <code> 文件名.sublime-snippet</code>。例如博主起名为 <code>acm.sublime-snippet</code>，之后只要用 sublime 打开 <code>.cpp</code> 文件，输入 <code>acm</code> -&gt; 回车就可以显示中间代码。是不是很方便啊~</p><p>演示效果如下：</p><img src="https://img.xungejiang.com/static/images/16-7-7/021.gif">]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/sublime-C/#disqus_thread</comments>
    </item>
    
    <item>
      <title>github 的介绍以及基本配置</title>
      <link>https://blog.xungejiang.com/github-intro/</link>
      <guid>https://blog.xungejiang.com/github-intro/</guid>
      <pubDate>Thu, 07 Jul 2016 01:01:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;git介绍以及github的基本配置&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>git 介绍以及 github 的基本配置</p><a id="more"></a><h2 id="配置 -Git- 环境"><a href="# 配置 -Git- 环境" class="headerlink" title="配置 Git 环境"></a>配置 Git 环境</h2><p><code>Linux</code> 和 <code>MAC</code> 环境下是自带 <code>GIT</code> 的，如果使用 <code>Windows</code> 的话有如下几个解决方案。</p><ul><li><a href="https://git-scm.com/download" rel="external nofollow noopener noreferrer" target="_blank">GIT 官网 </a> 下载</li><li><a href="http://cmder.net/" rel="external nofollow noopener noreferrer" target="_blank">Cmder</a>，选择 <code>Download full</code>，不仅自带 <code>GIT</code> ，而且是替代 <code>Windows</code> 自带很丑的 <code>cmd</code> 的很好选择。</li><li><a href="http://pan.baidu.com/s/1slD88nN" rel="external nofollow noopener noreferrer" target="_blank">GitHub 离线版</a>，GitHub 出品。</li></ul><p>建议大家使用命令行操作，方便快捷容易理解。</p><h2 id="配置 -Git- 用户名和邮箱"><a href="# 配置 -Git- 用户名和邮箱" class="headerlink" title="配置 Git 用户名和邮箱"></a>配置 Git 用户名和邮箱</h2><pre><code>$ git config --global user.name &quot;{username}&quot;     // 用户名替换{username}$ git config --global user.email &quot;{email}&quot;    // 邮箱替换{email}</code></pre><h2 id="配置 -SSH"><a href="# 配置 -SSH" class="headerlink" title="配置 SSH"></a>配置 SSH</h2><pre><code>ssh-keygen -t rsa -C&quot;{email}&quot;    // 邮箱替换{email}</code></pre><p>一路回车到命令完成，win 系统默认在文件夹 <code>C:\Users\{你的用户名}\.ssh</code> ，该文件夹有 <code>id_rsa</code>（私钥） 和 <code>id_rsa.pub</code>（公钥） 两个文件。</p><p>将 id_rsa.pub 内容复制到自己的 Github 主页的 Settings -&gt; SSH keys，添加完毕即可。</p><p>可以输入以下命令，来测试是否能够正确链接到 github</p><pre><code>ssh -T git@github.com</code></pre><p>若返回命令如下</p><pre><code>Hi ***! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><p>则说明连接成功。</p><h2 id="创建新的 -GIT- 仓库"><a href="# 创建新的 -GIT- 仓库" class="headerlink" title="创建新的 GIT 仓库"></a>创建新的 GIT 仓库</h2><pre><code>::GIT 仓库初始化git init:: 添加 github 仓库 SSH 链接git remote add origin {SSH url}:: 将所有项目添加进仓库git add .:: 提交所有变化文件(还没有上传)git commit -m &quot;first commit&quot;:: 上传文件git push -u origin master</code></pre><h2 id="windows 避免每次 push 都输入密码"><a href="#windows 避免每次 push 都输入密码" class="headerlink" title="windows 避免每次 push 都输入密码"></a>windows 避免每次 push 都输入密码 </h2><p> 如果你每次 push 的时候都需要输入 github 的用户名和密码，就会感到非常的麻烦。原因是我们 push 的地址使用的是 https，把它改成 ssh 就好啦，因为我们之前已经在 github 上添加 ssh 秘钥了。这里介绍一下这个方法。</p><p>首先在 git bash 输入 <code>$ git remote -v</code> 查看当前推送方法</p><p>若如下</p><pre><code>origin https://github.com/someaccount/someproject.git (fetch)origin https://github.com/someaccount/someproject.git (push)</code></pre><p>则修改</p><pre><code>git remote set-url origin git@github.com:someaccount/someproject.git</code></pre><p>其中将 https 改为 ssh 的方式，这样就可以不用输入密码进行 push 了。</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/github-intro/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用 U 盘安装 mac OS 系统</title>
      <link>https://blog.xungejiang.com/install-macOS/</link>
      <guid>https://blog.xungejiang.com/install-macOS/</guid>
      <pubDate>Mon, 04 Jul 2016 01:01:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;安装 mac 系统有很多种方法，如网上恢复、时间机器恢复、App Store在线安装等等，但是我还是推荐使用 U 盘安装，因为不仅高效，而且还可以得到干净纯粹的系统。本文安装的 macOS 版本为 El Capitan，其他 macOS 依然适用。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>安装 mac 系统有很多种方法，如网上恢复、时间机器恢复、App Store 在线安装等等，但是我还是推荐使用 U 盘安装，因为不仅高效，而且还可以得到干净纯粹的系统。本文安装的 macOS 版本为 El Capitan，其他 macOS 依然适用。</p><a id="more"></a><h2 id="前言"><a href="# 前言" class="headerlink" title="前言"></a>前言 </h2><p> 博主家里有一台 iMac 一体机，买回来的时候就是 win7（肯定是老爸要求换的），所以也一直当成 windows 电脑用着。然而博主家里还有台 MacBook Pro，被博主强行换成 mac 系统，简直不能再漂亮，再好用，所以决定将 iMac 也换成 mac 系统，再装 win10，给老爸用。</p><p>然而开机长按 option（alt）键发现原来 mac 系统一直没删，这下就好办了。不过 mac 系统有点旧，还是 lion 系统，于是想给 mac 系统做一下彻底的升级。</p><h2 id="制作 -mac- 启动 -U- 盘"><a href="# 制作 -mac- 启动 -U- 盘" class="headerlink" title="制作 mac 启动 U 盘"></a>制作 mac 启动 U 盘 </h2><p> 这里网上也有很多帖子写的很好，这里也简单说一下。</p><p>首先准备一个 8G 左右的 U 盘，当然最好 3.0。然后进入 mac 系统（如果没有 mac 系统的话看看有没有同学有用苹果本的借一下。。实在没有安一个 mac 虚拟机也可以）。进入实用工具 -&gt; 磁盘工具，将 U 盘抹掉，格式为 <code>OS X 扩展(日志式)</code> ，名字叫做 <code>Capitan</code> (最好一致，后面代码用得上)。</p><p>当然还需要 El Capitan 安装程序，可以从 App Store 上 下载 (推荐，保证最新版)。也可以<a href="http://pan.baidu.com/s/16O0I" rel="external nofollow noopener noreferrer" target="_blank"> 百度云下载 </a> 下载。</p><p>确保在应用程序里有 <strong>安装 OS X El Capitan</strong>。</p><img src="https://img.xungejiang.com/static/images/16-7-4/003.jpg"><p>之后在 <code>实用工具 </code> -&gt; <code> 终端</code> 输入下面代码</p><pre><code>sudo /Applications/Install\ OS\ X\ El\ Capitan.app/Contents/Resources/createinstallmedia --volume /Volumes/Capitan --applicationpath /Applications/Install\ OS\ X\ El\ Capitan.app --nointeraction</code></pre><p>其中 Capitan 是 U 盘名字，如若之前没听话没改名字，这里需要把 <strong>Capitan</strong> 改成你的 U 盘的名字。</p><p>做好后是这样滴</p><img src="https://img.xungejiang.com/static/images/16-7-4/007.jpg"><p>如果出现错误则重新执行一次。</p><p>这样 mac 启动 U 盘就做好啦~</p><h2 id="安装前准备"><a href="# 安装前准备" class="headerlink" title="安装前准备"></a>安装前准备 </h2><p> 在这之前最好适用 Time Machine（时间机器）备份一下。如果电脑之前安过 windows 的话可能要费劲一些了，如果你的 windows 还分了好多区的话那就更麻烦了。。非常建议将 windows 分成一个区 <code>bootcamp</code> (C 盘)，否则无法更新 mac 系统。或者像博主一样彻底一点将 windows 删除，更新完系统再重装 windows。</p><h2 id="重启安装"><a href="# 重启安装" class="headerlink" title="重启安装"></a>重启安装 </h2><p> 插上 U 盘，重启电脑，并长按 <code>Option 键</code> （alt 键），进入选盘界面（如果不成功重启再试一次）</p><img src="https://img.xungejiang.com/static/images/16-7-4/002.jpg"><p>进入后界面如下</p><img src="https://img.xungejiang.com/static/images/16-7-4/004.jpg"><p>可以先进入 <code>安装 OS X</code>，选择 mac 系统盘，并下一步即可。</p><h2 id="可能出现的问题"><a href="# 可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题 </h2><p> 下面是可能会出现的问题，如果成功安装则跳过下文。</p><ul><li>如果提示 <code>这个磁盘没有使用 GUID 分区表方案</code> 如下图的话</li></ul><img src="https://img.xungejiang.com/static/images/16-7-4/005.jpg"><p>则说明 windows 分区破坏了 GUID 分区，需要将 windows 分区删掉才能升级 mac 系统。</p><ul><li>如果删除了 windows 分区仍提示 <code>无法在此硬盘安装更新</code> 等类似字样的话，则说明只能将原来 mac 系统盘抹掉。</li></ul><p>方法是退出安装程序，在 <code>OS X 实用工具</code> 中选择磁盘工具，将 mac 系统盘抹掉, 这样就能成功安装了（一个空电脑当然能成功安装系统）。</p><ul><li>如果遇到 <code>不能验证这个“安装 OS X El Capitan”应用程序副本。它在下载过程中可能已遭破坏或篡改。</code></li></ul><img src="https://img.xungejiang.com/static/images/16-7-4/006.jpg"><p>不要真的相信程序坏掉了，解决方法是：先退出安装程序，在上面菜单栏选择 <code>终端</code>，输入下面代码</p><pre><code>date 122014102015.30</code></pre><p>这应该是系统 bug，需要改一下时间，改完之后就应该没问题了。</p><hr><p>2018.10 Update</p><p>mac 系统新推出的 <code>macOS Mojave</code> 版本依然可以使用上述方法安装系统。</p><p>在终端输入代码制作安装 U 盘时可能会报 Warning，但并不影响。</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/install-macOS/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sublime 介绍以及插件推荐</title>
      <link>https://blog.xungejiang.com/sublime-introduction/</link>
      <guid>https://blog.xungejiang.com/sublime-introduction/</guid>
      <pubDate>Sun, 03 Jul 2016 01:01:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;简单介绍一下刚开始使用 sublime 的配置方式和插件。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cat.yufan.me/asserts/spectre/styles/APlayer.min.css"><script src="https://cat.yufan.me/asserts/spectre/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>简单介绍一下刚开始使用 sublime 的配置方式和插件。</p><a id="more"></a><h2 id="前言"><a href="# 前言" class="headerlink" title="前言"></a>前言</h2><p><strong>Sublime</strong> 可是一款程序猿必知，必用，必会的一款文本编辑器，当然配有适当的插件也可以编译 <strong>C</strong>, <strong>C++</strong>, <strong>Java</strong>, <strong>Python</strong> 等所有简单程序，并且可以写 <strong>Markdown</strong> 文档，博主的博客就是用 sublime 写的哦~</p><h2 id="Sublime- 的下载"><a href="#Sublime- 的下载" class="headerlink" title="Sublime 的下载"></a>Sublime 的下载</h2><p><a href="http://www.sublimetext.com/3" rel="external nofollow noopener noreferrer" target="_blank">Sublime Text 3 官网下载</a></p><p>下载完成后字体可能太小， <code>Ctrl</code> + <code>=</code> 可以将字体调大。同理 <code>Ctrl</code> + <code>-</code> 可以调小字体。</p><p><strong>Sublime</strong> 并不是免费的软件，需要 70 刀左右。。然而博主还是个学生，比较穷，所以只好选择破解版。。不过等将来有钱了，我一定会来买正版的，现在就当为他的产品使用量做贡献吧。</p><p>怎么破解就不说了吧（网上搜该版本的注册码）</p><h2 id="Package-Control- 的安装"><a href="#Package-Control- 的安装" class="headerlink" title="Package Control 的安装"></a>Package Control 的安装 </h2><p> 既然要用 sublime 那一定是看中他的插件功能啦，然而插件的安装需要先安装 <a href="https://packagecontrol.io/installation" rel="external nofollow noopener noreferrer" target="_blank">Package Control</a>，方法如下：</p><p><code>Ctrl</code> + <code>~</code> 或者 <code>View</code> -&gt; <code>Show Console</code> 调出 <code>Console</code> ，并将下面代码粘贴执行。</p><pre><code>import urllib.request,os; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#39;wb&#39;).write(urllib.request.urlopen( &#39;http://sublime.wbond.net/&#39; + pf.replace(&#39; &#39;,&#39;%20&#39;)).read())</code></pre><p>如果安装成功，就可以在 Preferences 菜单下看到 <code>Package Settings</code> 和 <code>Package Control</code> 两个菜单。</p><p>若不能通过以上方式成功安装，可尝试以下方式手动安装：</p><p>点击 <code>Preferences</code> -&gt; <code>Browse Packages...</code> 菜单，进入打开的目录的上层目录（即 <code>Sublime Text 3</code> 目录），再打开 <code>Installed Packages</code> 目录</p><p>点击下载 <a href="https://sublime.wbond.net/Package%20Control.sublime-package" rel="external nofollow noopener noreferrer" target="_blank">Package Control.sublime-package</a> 并复制到 <code>Installed Packages</code> 目录</p><p>，之后就可以尽情的去安装插件啦~</p><h2 id="常用插件"><a href="# 常用插件" class="headerlink" title="常用插件"></a>常用插件 </h2><p> 经过上面安装了 Package Control 后，我们就可以通过快捷键 <code>Ctrl</code> + <code>Shift</code> + <code>P</code> 打开 Package Control 来安装插件了。在打开的输入框中输入 install ，会根据你的输入自动提示，选择 Package Control:Install Package，如下图。</p><img src="https://img.xungejiang.com/static/images/16-7-3/001.png"><p>等一会，便会又弹出一个输入框，输入你要安装插件的名字即可。</p><p>这里推荐几个必安插件：</p><h3 id="ConvertToUTF8"><a href="#ConvertToUTF8" class="headerlink" title="ConvertToUTF8"></a><a href="https://packagecontrol.io/packages/ConvertToUTF8" rel="external nofollow noopener noreferrer" target="_blank">ConvertToUTF8</a></h3><p>文件转码成 <code>UTF-8</code> ，避免中文乱码。</p><img src="https://img.xungejiang.com/static/images/16-7-3/004.gif"><h3 id="GBK-Encoding-Support"><a href="#GBK-Encoding-Support" class="headerlink" title="GBK Encoding Support"></a><a href="https://packagecontrol.io/packages/GBK%20Encoding%20Support" rel="external nofollow noopener noreferrer" target="_blank">GBK Encoding Support</a></h3><p>同样是解决中文乱码问题，将 <code>GBK</code> 编码转换成 <code>UTF-8</code> 编码。</p><img src="https://img.xungejiang.com/static/images/16-7-3/006.png"><img src="https://img.xungejiang.com/static/images/16-7-3/007.png"><h3 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a><a href="https://packagecontrol.io/packages/Emmet" rel="external nofollow noopener noreferrer" target="_blank">Emmet</a></h3><p>插件可以说是使用 Sublime Text 进行前端开发必不可少的插件</p><p>例如输入以下代码</p><pre><code>ul#jiang&gt;li.item$*4&gt;a{Item $}</code></pre><p>便可自动生成</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jiang<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><img src="https://img.xungejiang.com/static/images/16-7-3/005.gif"><p>详情参考 <a href="http://www.w3cplus.com/tools/emmet-cheat-sheet.html" rel="external nofollow noopener noreferrer" target="_blank">前端开发必备！Emmet 使用手册</a>，<a href="http://docs.emmet.io/abbreviations/syntax/" rel="external nofollow noopener noreferrer" target="_blank">Emmet 官方文档</a>。</p><h3 id="JsFormat"><a href="#JsFormat" class="headerlink" title="JsFormat"></a><a href="">JsFormat</a></h3><p>这是一款 JS 格式化的插件，<code>Ctrl</code> + <code>Alt</code> + <code>F</code> 对 JS 进行格式化。</p><h3 id="SideBarEnhancements"><a href="#SideBarEnhancements" class="headerlink" title="SideBarEnhancements"></a><a href="https://packagecontrol.io/packages/SideBarEnhancements" rel="external nofollow noopener noreferrer" target="_blank">SideBarEnhancements</a></h3><p>是一款很实用的右键菜单增强插件，可以对左侧文件栏进行更多的操作，更多配置请点击标题。</p><p>在安装该插件前，在 Sublime Text 左侧 FOLDERS 栏中点击右键，只有三个功能。</p><img src="https://img.xungejiang.com/static/images/16-7-3/008.png"><p>通过 Package Control 安装 SideBarEnhancements 插件后</p><img src="https://img.xungejiang.com/static/images/16-7-3/009.png"><p>可见功能增加了不少。</p><h3 id="TrailingSpaces"><a href="#TrailingSpaces" class="headerlink" title="TrailingSpaces"></a><a href="https://packagecontrol.io/packages/TrailingSpaces" rel="external nofollow noopener noreferrer" target="_blank">TrailingSpaces</a></h3><p>这款插件能高亮显示多余的空格和 Tab，并一键去除，是处女座的福音。</p><p>一键删除多余空格（需配置） <code>Ctrl</code> + <code>Alt</code> + <code>T</code></p><p>点击 <code>Preferences</code> -&gt; <code>Key Bindings – User</code> 加上代码</p><pre><code>{&quot;keys&quot;: [&quot;ctrl+alt+t&quot;], &quot;command&quot;: &quot;delete_trailing_spaces&quot; }</code></pre><img src="https://img.xungejiang.com/static/images/16-7-3/010.gif"><h3 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a><a href="https://packagecontrol.io/packages/Alignment" rel="external nofollow noopener noreferrer" target="_blank">Alignment</a></h3><p>“=” 对齐</p><p>默认快捷键 <code>Ctrl</code> + <code>Alt</code> + <code>A</code> 和 QQ 截屏冲突，可设置其他快捷键如：<code>Ctrl</code> + <code>Alt</code> + <code>Shift</code> + <code>A</code>:</p><p>点击 <code>Preferences</code> -&gt; <code>Key Bindings – User</code> 加上代码</p><pre><code>{&quot;keys&quot;: [&quot;ctrl+alt+shift+a&quot;], &quot;command&quot;: &quot;alignment&quot; }</code></pre><p>先选择要对齐的文本，如下图：</p><img src="https://img.xungejiang.com/static/images/16-7-3/011.gif"><h3 id="SublimeCodeIntel"><a href="#SublimeCodeIntel" class="headerlink" title="SublimeCodeIntel"></a><a href="https://packagecontrol.io/packages/SublimeCodeIntel" rel="external nofollow noopener noreferrer" target="_blank">SublimeCodeIntel</a></h3><p>为代码补全插件，支持 JavaScript, Mason, XBL, XUL, RHTML, SCSS, Python, HTML, Ruby, Python3, XML, Sass, XSLT, Django, HTML5, Perl, CSS, Twig, Less, Smarty, Node.js, Tcl, TemplateToolkit, PHP 等多种语言。</p><p>该插件安装时间可能较长，需要耐心等待。</p><h3 id="DocBlockr"><a href="#DocBlockr" class="headerlink" title="DocBlockr"></a><a href="https://packagecontrol.io/packages/DocBlockr" rel="external nofollow noopener noreferrer" target="_blank">DocBlockr</a></h3><p>生成优美的注释，更多配置请点击标题。<br><img src="https://img.xungejiang.com/static/images/16-7-3/012.gif"><br><img src="https://img.xungejiang.com/static/images/16-7-3/013.gif"></p><h3 id="Color​Picker"><a href="#Color​Picker" class="headerlink" title="Color​Picker"></a><a href="https://packagecontrol.io/packages/ColorPicker" rel="external nofollow noopener noreferrer" target="_blank">Color​Picker</a></h3><p>调色板，默认 <code>Ctrl</code> + <code>Alt</code> + <code>C</code> ，但与 <code>ConvertToUTF8</code> 快捷键冲突。</p><p>解决方法：更改 <code>ConvertToUTF8</code> 快捷键为 <code>Ctrl</code> + <code>Alt</code> + <code>Shift</code> + <code>C</code> 。</p><p>点击 <code>Preferences</code> -&gt; <code>Browse Packages...</code> -&gt; <code>ConvertToUTF8</code> -&gt; <code>Default (Windows).sublime-keymap</code>(根据你的操作系统，打开相应文件) -&gt; 就不用说了吧~</p><img src="https://img.xungejiang.com/static/images/16-7-3/014.png"><h3 id="FileDiffs"><a href="#FileDiffs" class="headerlink" title="FileDiffs"></a><a href="https://packagecontrol.io/packages/FileDiffs" rel="external nofollow noopener noreferrer" target="_blank">FileDiffs</a></h3><p>强大的比较代码不同工具。</p><p>右键标签页，出现 <code>FileDiffs Menu</code> 或者 <code>Diff with Tab…</code> 选择对应文件比较即可。</p><img src="https://img.xungejiang.com/static/images/16-7-3/015.gif"><h3 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a><a href="https://packagecontrol.io/packages/Tag" rel="external nofollow noopener noreferrer" target="_blank">Tag</a></h3><p>这是 HTML/XML 标签缩进、补全、排版和校验工具。使用方法如下图：</p><img src="https://img.xungejiang.com/static/images/16-7-3/003.png"><p>暂时没有快捷键。</p><h2 id="Markdown- 插件"><a href="#Markdown- 插件" class="headerlink" title="Markdown 插件"></a>Markdown 插件</h2><h3 id="Markdown-Preview"><a href="#Markdown-Preview" class="headerlink" title="Markdown Preview"></a><a href="https://packagecontrol.io/packages/Markdown%20Preview" rel="external nofollow noopener noreferrer" target="_blank">Markdown Preview</a></h3><p>Markdown Preview 可以实时将 markdown 文件在浏览器上显示。</p><p>快捷键设置如下</p><p>点击 Preferences –&gt; 选择 Key Bindings User，输入：</p><pre><code>{&quot;keys&quot;: [&quot;alt+m&quot;], &quot;command&quot;: &quot;markdown_preview&quot;, &quot;args&quot;: {&quot;target&quot;: &quot;browser&quot;, &quot;parser&quot;:&quot;markdown&quot;} }</code></pre><p><strong>Alt + M</strong> 为在浏览器显示</p><p><strong>Ctrl + B</strong> 为转换成 html 文件</p><p><strong>记得和之前的快捷键用逗号隔开</strong></p><h3 id="Markdown-Extended-Monokai-Extended"><a href="#Markdown-Extended-Monokai-Extended" class="headerlink" title="Markdown Extended  + Monokai Extended"></a><a href="https://packagecontrol.io/packages/Markdown%20Extended" rel="external nofollow noopener noreferrer" target="_blank">Markdown Extended</a>  + <a href="https://packagecontrol.io/packages/Monokai%20Extendedw" rel="external nofollow noopener noreferrer" target="_blank">Monokai Extended</a></h3><p>我最爱用的 Markdown 主题</p><h3 id="Markdown-Editing"><a href="#Markdown-Editing" class="headerlink" title="Markdown Editing"></a><a href="https://packagecontrol.io/packages/MarkdownEditing" rel="external nofollow noopener noreferrer" target="_blank">Markdown Editing</a></h3><p>输入 “mdi + tab” 会自动插入下面的图片标记</p><pre><code>![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code></pre><p>输入 “mdl + tab” 会自动生成下面的链接标记</p><pre><code>[](link)</code></pre><h2 id="Sublime- 更改字体"><a href="#Sublime- 更改字体" class="headerlink" title="Sublime 更改字体"></a>Sublime 更改字体 </h2><p>Sublime 自带的英文字体是 <code>Consola</code> ，非常好看，但是中文默认是宋体，不太协调，所以这里可以改成 <code>YaHeiConsola</code> 字体，英文是 <code>Consola</code>，中文是 <code> 微软雅黑</code>。</p><p>下载字体 <a href="http://pan.baidu.com/s/1pKgTFsv" rel="external nofollow noopener noreferrer" target="_blank">YaHeiConsola</a>，右键安装。</p><p>在 Menu 中点击 <strong>Preference</strong> -&gt; <strong>Setting-User</strong>, 添加</p><pre><code>{    &quot;font_face&quot;: &quot;YaHeiConsola&quot;,    &quot;font_size&quot;: 12}</code></pre><blockquote><p>注意：参数之间用逗号隔开</p></blockquote><h2 id="总结"><a href="# 总结" class="headerlink" title="总结"></a>总结</h2><p>Sublime 还有很多功能，例如可以编译很多编程语言。这是博主写的 <a href="http://xungejiang.com/2016/07/07/sublime-C/" rel="external nofollow noopener noreferrer" target="_blank">Sublime Text 3 设置 C/C++ 编译环境</a> 可以参考。</p>]]></content:encoded>
      
      <comments>https://blog.xungejiang.com/sublime-introduction/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
