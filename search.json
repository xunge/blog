{"title":"14 年 MacBook Pro 升级 Intel 760p NVME SSD","url":"/mac-change-ssd-760p/","content":"本教程适用于 13/14/15 年 MacBook Pro 升级非官方硬盘由于 MacBook Pro 的硬盘接口是自己设计的，所以更换硬盘有两种选择：选择 苹果 自家接口的固态硬盘。优点：兼容性好；缺点：贵，速度慢选择 M.2 接口且兼容的固态硬盘 + 转接卡。优点：便宜，速度快，兼容性也很好；缺点：自己动手有风险（很小），失去保修，不好出二手本文将介绍使用第三方 M.2 接口的固态硬盘和转接卡升级 MacBook Pro 硬盘的方案之前的准备SSD 与转接卡的选择SSD 主要是根据广大网友的前车之鉴，目前比较推荐的有三星 SM951，Intel 760P 等。博主选择的是 Intel 760P，因为 SM951 目前很难买到新款，基本上都是拆机的二手货，没有质保，而 Intel 760P 有 5 年保修，价格也差不多。转接卡在淘宝搜索 苹果 SSD 转接卡 2014 mac book，博主买的转接卡如下图所示。制作 macOS 系统盘  因为在 macOS 10.13 High Sierra 版本后系统支持了 NVME 硬盘协议，所以我们安装的 macOS 版本必须是 10.13 之后的系统。本文选择的是 macOS 10.14 Mojave 版本，具体制作 macOS 系统盘的教程可以参考 本人博客TimeMachine 备份系统  硬盘有价，数据无价！拆机时还需要 T5 的螺丝刀，这里建议购买 米家 wiha 螺丝刀更换过程  拆机等详细步骤可以参考 IFIXIT 更换 SSD 教程拆机过程要注意上面两颗螺丝和其他八颗螺丝的长度是不一样的，重新装机的时候要注意。后机盖和机身有两个卡扣固定，装机要确定卡扣卡紧再上螺丝。更换完 SSD 是这样的注意一定要将硬盘接头用力往里塞紧，并保证固定螺丝是可以拧上固定的状态。重装系统  插上刚才制作的 macOS 系统盘，按住 option 键开机，选择 install macOS 进入下面界面，选择磁盘工具，继续将新安装的 SSD 抹掉，格式为 Mac OS 扩展（日志式），方案为 GUID 分区图，如下图所示若没有检测到新硬盘，则可能是硬盘没有插紧，或者硬盘不是全新的硬盘留有分区，只需要在 Windows 系统下删除卷即可之后关闭磁盘工具，进入第二项 安装 macOS 即可成功安装。新旧硬盘测速图如下（都是刚装完系统就测试的）：sudo pmset -a hibernatemode 0 standby 0 autopoweroff 0sudo pmset -a hibernatemode 3 standby 1 autopoweroff 1休眠无法唤醒的解决办法  如果将电脑扣盖休眠 8 小时后（或者电脑休眠至没电关机）再开机发现无法唤醒电脑（电脑屏幕亮，但无反应），那么你可能需要继续往下阅读Mac 电脑默认模式下休眠时间超过 8 小时后会将内存中的资料存储在硬盘中并将内存断电，以达到更好的省电目的。可能因为转接卡或硬盘不兼容将资料从硬盘导入内存造成无法唤醒的现象。方法 1：重置 Mac 笔记本电脑上的 SMC 和 NVRAM：以下来自苹果官网：如何重置 Mac 笔记本电脑上的 SMC：如果电池不可拆卸：选取苹果菜单 &gt;“关机”。等 Mac 关机后，按下内建键盘左侧的 Shift-Control-Option，然后同时按下电源按钮。按住这些按键和电源按钮 10 秒钟。如果您的 MacBook Pro 带有触控 ID，则触控 ID 按钮也是电源按钮。松开所有按键。再次按下电源按钮以开启 Mac。如何重置 NVRAM将 Mac 关机，然后开机并立即同时按住以下四个按键：Option、Command、P 和 R。您可以在大约 20 秒后松开这些按键，在此期间您的 Mac 可能看似在重新启动。在发出启动声的 Mac 电脑上，您可以在两次启动声之后松开这些按键。在 iMac Pro 上，您可以在 Apple 标志第二次出现并消失后松开这些按键。如果您的 Mac 使用了固件密码，这个组合键将不起任何作用或导致您的 Mac 从 macOS 恢复功能启动。要重置 NVRAM，请先关闭固件密码。在您的 Mac 完成启动后，您可能需要打开“系统偏好设置”并调整已重置的任何设置，例如音量、显示屏分辨率、启动磁盘选择或时区。方法 2：","tags":["mac","ssd"],"categories":["瞎折腾"]},{"title":"我是如何在黑苹果中编译安装 TensorFlow-GPU 1.8","url":"/2018-07-06-tensorflow-gpu-mac/","content":"content{:toc}之前一直使用 Ubuntu Linux 系统作为 TensorFlow 机器学习的服务器，但是相对于 macOS 来说，无论是界面美化还是应用覆盖都是远远强于 Ubuntu 的，所以计划安装一个黑苹果作为 TensorFlow 的服务器但是因为 TensorFlow 在 1.2 版本后不再支持 macOS 的 GPU 版本，只能通过编译源代码进行安装，过程较为繁杂，所以在此记录首先确定 Mac 显卡是 NVIDIA 显卡，且 compute capabilities &gt;= 3.0，点击这里 查看你的显卡型号是否支持环境概览软件版本号macOS High Sierra10.13.4TensorFlow1.8python3.6.4NVIDIA Web-Drivers387.10.10.10.30.106CUDA-Drivers387.178CUDA Toolkit9.1cuDNN7.0.5bazel0.10.0Xcode8.3.2Command Line Tools for Xcode8.3.2环境搭建  安装 Homebrew在终端输入下面命令安装 Homebrew安装 coreutils，llvm，OpenMP安装 Python 依赖  建议使用 Anaconda 包管理和 Virtualenv 虚拟环境等安装 Python安装 bazel下载 0.10.0 版本中的 bazel-0.10.0-installer-darwin-x86_64.sh 文件需要注意，这里必须是 0.10.0 版本，新或旧都能导致编译失败在下载目录打开终端，输入下面命令进行安装\b降级 Xcode 到 8.3.2下载 Xcode 8.3.2 和 Command Line Tools for Xcode 8.3.2，Xcode 9 需要降级，因为编译 TensorFlow 只能使用 Xcode 8，官网下载需要登录苹果账号，官网下载链接，按名称排列即可快速找到。Xcode8.3.2.xip (4.49GB) 下载后解压，\b重命名为 Xcode8.3.2 并复制到 应用程序 即可CommandLineToolsforXcode8.3.2.dmg (166.1MB) 下载后\b安装即可使用下面的命令在终端激活 Xcode 8.3.2换回 Xcode 9 可以用NVIDIA(1) 安装 NVIDIA Web-Drivers下载 NVIDIA Web-Drivers 驱动，根据不同的 Mac 系统进行下载，点击这里 下载，支持 macOS 10.13.4 的版本为 387.10.10.10.30.106WebDriver-387.10.10.10.30.106.pkg (63.9MB) 下载后\b安装即可(2) 安装 CUDA-Drivers下载 CUDA-Drivers 驱动，支持 CUDA 9.1 的版本号为 387.178，官网  下载、  百度云 \b下载cudadriver_387.178_macos.dmg (39.9MB) 下载后\b安装即可(3) 安装 CUDA Toolkit 9.1下载 CUDA Toolkit 9.1，官网  下载和  百度云 下载cuda_9.1.128_mac.dmg (1.53GB) 下载后\b安装即可配置 CUDA 环境，编辑 ~/.bash_profile 文件，如果安装了 zsh 则编辑 ~/.zshrc 文件，打开终端：然后在弹出的文件中添加：执行命令重启 bash_profile检测 CUDA 能否正常运行：第一次编译时可能需要同意苹果协议，按照要求填 agree 即可最终结果为 Result = PASS 则安装正确。(4) 安装 cuDNN 7.0.5下载 cuDNN 7.0.5，该版本支持 CUDA 9.1 ，官网下载时需要登录 NVIDIA 账号，官网  下载、  百度云 下载cudnn-9.1-osx-x64-v7-ga.tgz (340.3MB) 下载后解压，切换到解压缩的 cuda 目录，输入以下命令编译准备  拉取 TensorFlow 源码 release 1.8 分支修改代码，使其与 macOS 兼容  替换掉以下三个文件的 align(sizeof(T))解决找不到 ‘protobuf.bzl’ 的问题  我还遇到了以下错误解决办法 如下：添加依赖头文件 nccl.h (如编译 1.7 不用做此步骤)下载 nccl.h，放在 third_party/nccl 文件夹内修改 tensorflow/workspace.bzl 文件搜索如上替换为如下修复 third_party/gpus/cuda/BUILD.tpl 文件 -lgomp 报错搜索如上，注释掉开始编译  编译配置  在 TensorFlow 目录下输入以下命令进行命令配置配置文件如下编译如果看到就说明编译成功创建 wheel 文件并安装本人编译完成后的文件为 tensorflow-1.8.0-cp36-cp36m-macosx_10_7_x86_64.whl 百度云下载最后提供本人 Z270 + i7-7700k 的黑苹果 EFI参考文章：【tensorflow】macOS 10.13.4 编译 GPU 版本的 TensorFlow 1.8","tags":["mac","tensorflow","gpu"],"categories":["tensorflow"]},{"title":"远程开机_网络唤醒设置方法 (WOL, Wake on Lan)","url":"/2017-12-09-wake-on-lan/","content":"content{:toc}最近在实验室想控制家里的电脑。控制很容易， TeamViewer 就好啦。但是白天家里没人，没人帮我开电脑，于是找到了 WOL 这种方法。设置主板 BIOS需要在 BIOS 中进行更改。我的是微星 BIOS，操作如下高级  -&gt;  换型事件设置  -&gt; 将 PCIE 设备唤醒 和  网络唤醒  设置为  允许 (Enable)其他 BIOS 也类似，因为网卡也属于 PCIE 设备，所以 PCIE 设备唤醒 也需要打开。设置网卡  在设备驱动管理器中，找到 网络适配器  ，在第一个驱动  右键  -&gt;  属性在 高级  菜单中的属性找到  唤醒魔包  (Wake on Magic Packet) 设置为  启用在 电源管理  中  勾选   允许此设备唤醒计算机配置路由器 DDNS (动态 DNS) 服务  由于 IPV4 地址紧张，运营商宽带都是使用的动态 IP 地址，这就需要 动态 DNS 服务 进行穿透局域网。我家的路由器是 网件 NETGEAR R7800 所以这里使用 NETGEAR 的 DDNS 服务，其他路由器基本也有自己的 DDNS 服务，大家可以自己选择。首先登录路由器控制界面，一般是浏览器输入 192.168.0.1 / 192.168.1.1 / 10.0.0.1 等进入。找到 DDNS  或者 动态 DNS ，注册 DDNS 服务商。网件提供三个 DDNS 服务商，我选择的是 www.No-IP.com。找到 端口映射 / 端口触发 ，在  端口映射  中  添加自定义服务。服务名随便填，协议：TCP/UDP，外部端口组  和  内部端口组  一致即可， 内部 IP 地址  映射到家里电脑的 IP。这样，你就可以使用 WOL 软件发送一个数据包唤醒家里的电脑了。有一个网站就可以使用 https://www.depicus.com/wake-on-lan/woli。该网站还提供了 windows, mac OS, Android, iOS 等不同平台的应用，有需要的可以自行下载。mac 地址可以在控制台输入 ipconfig /all 获取；IP 地址填 域名即可；子网掩码为 255.255.255.255；端口号为之前设的外部和内部端口号。","tags":["WOL"],"categories":["WOL"]},{"title":"Django 报错 __init__() missing 1 required positional argument 'on_delete'","url":"/2017-12-23-django-error-ondelete/","content":"content{:toc}Django 在更新到 2.0 后 报错如下  是因为在 Django 2.0 后，models.ForeignKey() 函数 和 models.OneToOneField() 中的 on_delete 参数不再默认为 CASCADE ，而是必须参数  官方文档：https://docs.djangoproject.com/en/1.11/ref/models/fields/#django.db.models.ForeignKey.on_delete 修改方法如下  修改之前  修改之后 ","tags":["Django"],"categories":["Django"]},{"title":"【翻译】 Is attacking machine learning easier than defending it?","url":"/2017-11-29-translate-blog2/","content":"content{:toc}原文：Is attacking machine learning easier than defending it?译文：攻击机器学习比防御更容易吗?原文写作日期：2017 年 3 月 15 日  译文写作日期：2017 年 11 月 29 日本文为 cleverhans-blog 的第二篇博客，作者为 Ian Goodfellow 和 Nicolas Papernot，主要讲解 对抗性训练  和  防御性蒸馏 两种防御方法之间的优势与不足。译者水平有限，存在错误，还望指出。转载请注明出处！在我们的  第一篇文章  中，我们提出了几种攻击者可以打破当前机器学习系统的方式，比如通过毒化学习算法使用的数据[BNL12]，或者制作对抗性样本迫使模型做出错误的预测[SZS13]。在本文中，我们将以对抗性样本为例说明为什么攻击机器学习似乎比防御更容易。换句话说，我们将详细介绍为什么我们还没有完全有效的防御对抗性样本的一些原因，并推测我们是否能够进行防御。对抗性样本是机器学习模型的输入，它是由攻击者设计，用来欺骗模型产生不正确的输出。例如，我们给一个熊猫图片添加一个经过计算的小扰动，使图像被认为是一个高可信度的长臂猿[GSS14]： 到目前为止，设计出这种欺骗模型的方法要比设计出不能欺骗模型的方法容易得多。我们如何使 ML 模型面对对抗性样本时更加强壮？ (How have we tried to make ML models more robust to adversarial examples?)我们先介绍下两种防御方法：对抗性训练和防御性蒸馏。防御者如何试图使机器学习模型更加强壮并减轻对抗性样本的攻击效果。对抗性训练旨在训练时主动产生对抗性样本，在测试时提取对抗性样本来改进模型的泛化。这个想法是由 Szegedy 等人首次提出的 [SZS13]，但由于产生对抗性样本的成本太高而不实用。 Goodfellow 等人展示了如何利用快速梯度符号方法低成本地产生对抗性样本，并且使得在训练过程中高计算效率地产生大批对抗性样本 [GSS14]。然后该模型被训练成将相同的标签分配给相对于原始样本的对抗性样本。例如：我们拍摄一张猫的照片，并对其进行扰动以欺骗模型，使其认为它是秃鹫，然后告诉模型这张照片仍然是一只猫。对抗训练的一个开源实现可以在cleverhans 库中找到，其使用方法在下面的  教程 中有说明。防御性蒸馏平滑模型的决策表面在对抗方向被攻击者利用。蒸馏是一种训练过程，其中一个模型被训练以预测由先前训练的另一个模型输出的概率。蒸馏最初由 Hinton 等人提出。在 [HVD15] 中，其目标是用一个小模型来模拟一个大型的、计算成本很高的模型。防御性蒸馏有一个不同的目标，即简单地使最终模型的反应更加平滑，所以即使两个模型的大小相同也能起作用。训练一个模型来预测另一个具有相同架构的模型输出看起来是违反直觉的。它的工作原理是，第一个模型是用“硬”标签（图像 100％概率是狗而不是猫）训练，然后第二个模型用“软”标签（图像 95％概率是狗而不是猫）训练。第二个蒸馏模型对于诸如快速梯度符号法 [PM16] 或基于雅可比行列式显著图法 [PMW16] 的攻击更为鲁棒。这两种攻击的实现也分别在  这里  和 这里  的cleverhans 上提供。(已经 404 。。2333)一个失败的防御：“梯度掩蔽” (A failed defense: “gradient masking”)大多数对抗性样本构建技术使用模型的梯度来进行攻击。换句话说，一张飞机的照片，他们测试在图像空间中往哪个方向移动使得图片识别为“猫”的概率增加，然后他们往那个方向进行移动（换句话说，扰乱了输入）。这样新修改后的图像被误认为是猫。但是，如果没有梯度，如果对图像进行微小的修改不会导致模型的输出发生变化呢？这似乎提供了一些防御，因为攻击者不知道怎样去“推”图像。我们可以很容易想到一些非常微不足道的方法来摆脱梯度。例如，大多数图像分类模型可以以两种模式运行：一种模式是输出最可能类别的标识，另一种模式是输出概率。如果模型的输出是“99.9％的飞机，0.1％的猫”，那么输入的一个微小的变化会给输出带来一个微小的变化，梯度告诉我们哪些变化会增加“猫”类的概率。如果我们在输出模式只是“飞机”的模式下运行模型，那么对输入的一个微小的变化根本不会改变输出，而梯度不会告诉我们任何事情。让我们做一个思考实验，如何通过以“最有可能的类”模式而不是“概率模式”运行它来防御对抗性样本。攻击者再也不能找到分类为猫的扰乱输入，所以我们可能会有一些防御。不幸的是，之前被归类为猫的图片现在仍被归类为猫。如果攻击者可以猜测哪些点是对抗性样本，这些点将仍然会被错误的分类。我们并没有使模型更加鲁棒，我们只是给了攻击者更少的线索来找出模型防御的漏洞。更不幸的是，事实证明攻击者有一个非常好的策略来猜测防御漏洞的位置。攻击者可以训练他们自己的模型，一个具有梯度的光滑模型，为他们的模型制作对抗性样本，然后将这些对抗性样本用于我们的非光滑模型。很多时候，我们的模型也会错误地分类这些样本。最后，我们的思想实验表明，隐藏梯度并没有达到我们的目的。因此，我们称之为有缺陷的防御策略梯度掩蔽，这个术语在 [PMG16] 中有介绍。执行梯度掩蔽的防御策略通常导致在特定方向和训练点的邻域中模型变得非常平滑，这使得攻击者难以找到攻击方向的梯度去扰乱输入。然而，攻击者可以训练一个替代模型：一个模仿防御模型的副本，通过观察防御模型分配给攻击者输入的标签。[PMG16]中介绍了执行这种模型提取攻击的过程。然后攻击者可以使用替代模型的梯度来找到被防御模型错误分类的对抗性样本。在下面的图中，我们再现 [PMS16] 中对梯度掩蔽的讨论，我们用一维 ML 问题来说明这种攻击策略。对于高维问题，梯度掩蔽现象会加剧，但难以描述。 令人惊讶的是，我们发现对抗性训练和防御性蒸馏都意外地表现出一种梯度掩蔽。如果我们将对抗性样本从一个模型转移到另一个模型，并且用这些防御之一进行训练，即使对第二个模型的直接攻击会失败，攻击通常也会成功[PMG16]。这表明两种训练方法都能使模型变平滑和消除梯度，而不是确保对多个点进行正确地分类。打“地鼠”游戏 (Playing a game of “whack-a-mole”)在“隐藏梯度”的游戏中，我们看到梯度掩蔽并不是很好的防御。它防御使用梯度的攻击者，但是如果攻击者知道我们正在使用这种防御，那么他们只需要切换到移植攻击。在安全术语中，这意味着梯度掩蔽不是一种自适应防御。迄今为止提出的大多数针对对抗性样本的防御措施根本不起作用，但是有效的那些并不是自适应的。这意味着就像他们在玩一个打地鼠游戏一样：他们关闭了一些漏洞，但是让其他人打开。对抗训练需要选择算法来产生对抗性样本。通常情况下，这个模型被训练成可以抵抗在一个步骤中产生的低成本对抗性样本，例如快速梯度符号方法一样。经过训练能抵制这些低成本对抗性样本，这个模型通常能成功地抵制同类低成本的新对抗性样本。如果我们使用高成本的、迭代的对抗性样本，就像 [SZS13] 中的那些例子，那么模型通常就会被愚弄。保证适应性是具有挑战性的。灵感可以从差异隐私的框架中得到，它提供了随机算法不会暴露个人用户隐私的正式保证。这一保证不会对攻击者的知识或能力做出假设，因此能够面对未来由攻击者设计的假想攻击。为什么很难防御对抗性样本？ (Why is it hard to defend against adversarial examples?)对抗性样本很难防御，因为很难构建对抗性样本制定过程的理论模型。对抗性样本是许多 ML 模型（包括神经网络）的非线性和非凸的优化问题的解决方案。由于我们没有很好的理论工具去描述这些复杂的优化问题的解决方案，所以很难做出任何一种防御理论来排除一系列对抗性样本。从另一个角度来看，对抗性样本很难防御，因为它们需要机器学习模型来为每一个可能的输入生成好的输出。大多数情况下，机器学习模型工作得很好，但只能处理遇到所有可能输入中的很少一部分。由于可能的输入的量非常巨大，设计出真正自适应的防御是非常困难的。其他攻击和防御方法 (Other attack and defense scenarios)其他几种对机器学习的攻击也是难以防御。在本文中，我们专注于试图混淆机器学习模型测试过程的输入。但是其他类型的攻击是可能的，例如基于暗中修改训练数据的攻击，使得模型学习攻击者希望它进行的行为。对抗性机器学习的一个亮点是差分隐私，我们实际上有理论上的观点，即某些训练算法可以防止攻击者从训练好的模型中恢复关于训练集的敏感信息。将机器学习与攻击和防御都可能的其他场景进行比较是有趣的。在密码学中，防御者似乎有优势。给定一系列合理的假设，例如加密算法的正确实现，防御者可以可靠地发送攻击者无法解密的消息。在物理冲突中，攻击者似乎有优势。建造核弹比建造一个能够承受核爆的城市要容易得多。热力学的第二定律似乎意味着，如果防御要求将熵维持在某个阈值以下，那么即使没有明确的攻击者有意引起这种熵的增加，防御者也必然随着时间熵增加而最终失去。监督学习的“没有免费午餐定理”[W96]指出，在所有可能的数据集进行平均，没有任何机器学习算法在测试时间的新点上比其他算法更好。乍一看，这似乎表明，所有的算法都同样容易受到对抗性样本。然而，“没有免费午餐定理”只适用于我们对问题结构不作假设的情况。当我们研究对抗性样本时，我们假设输入的小扰动不应该改变输出类别，所以一般形式的“没有免费午餐定理”并不适用。正式揭露攻击者的鲁棒性和对清洁数据的模型表现之间的矛盾关系仍然是一个活跃的研究问题。在 [PMS16] 中，针对机器学习的对抗性样本的第一个“没有免费午餐定理”表明，在从有限的数据中学习时存在这样的矛盾。结果表明，防御者可以通过转向更丰富的假设类别来阻挠对抗性样本。然而，这种矛盾关系是由于没有合适的数据和学习算法来学习高保真模型所面临的挑战。总结  对抗性样本的研究是令人兴奋的，因为许多最重要的问题在理论和应用方面都是开放的。在理论上，还没有人知道防御对抗性样本是否是一个理论上没有希望的努力（如试图找到一个通用的机器学习算法），或者是否存在一个最优策略会使防御者更有利。（如在密码学和差分隐私）。在应用方面，还没有人设计出真正强大的防御算法，可以抵抗各种对抗性样本的攻击算法。我们希望我们的读者能够得到启发，解决其中的一些问题。References[BNL12] Biggio, B., Nelson, B., &amp; Laskov, P. (2012). Poisoning attacks against support vector machines. arXiv preprint arXiv:1206.6389.[GSS14] Goodfellow, I. J., Shlens, J., &amp; Szegedy, C. (2014). Explaining and harnessing adversarial examples. arXiv preprint arXiv:1412.6572.[HVD15] Hinton, Geoffrey, Oriol Vinyals, and Jeff Dean. “Distilling the knowledge in a neural network.” arXiv preprint arXiv:1503.02531 (2015).[PM16] Papernot, N., &amp; McDaniel, P. (2016). On the effectiveness of defensive distillation. arXiv preprint arXiv:1607.05113.[PMG16] Papernot, N., McDaniel, P., Goodfellow, I., Jha, S., Berkay Celik, Z., &amp; Swami, A. (2016). Practical Black-Box Attacks against Deep Learning Systems using Adversarial Examples. arXiv preprint arXiv:1602.02697.[PMS16] Papernot, N., McDaniel, P., Sinha, A., &amp; Wellman, M. (2016). Towards the Science of Security and Privacy in Machine Learning. arXiv preprint arXiv:1611.03814.[PMW16] Papernot, N., McDaniel, P., Wu, X., Jha, S., &amp; Swami, A. (2016, May). Distillation as a defense to adversarial perturbations against deep neural networks. In the 2016 IEEE Symposium on Security and Privacy (pp. 582-597).[SZS13] Szegedy, C., Zaremba, W., Sutskever, I., Bruna, J., Erhan, D., Goodfellow, I., &amp; Fergus, R. (2013). Intriguing properties of neural networks. arXiv preprint arXiv:1312.6199.[W96] Wolpert, David H. (1996). The lack of a priori distinction between learning algorithms. Neural Computation","tags":["translate","cleverhans"],"categories":["cleverhans"]},{"title":"Windows 下 MySQL 绿色版安装详细教程","url":"/2017-10-17-mysql-install/","content":"content{:toc}MySQL 绿色版安装详细操作步骤。MySQL 绿色版优点是安装时间短，可在一部电脑兼容多个版本的 MySQL。1. 下载。下载地址：http://downloads.mysql.com/archives/get/file/mysql-5.7.11-winx64.zip可以复制链接使用迅雷下载，速度较快。2. 解压 MySQL 压缩包  解压到指定目录，我的是 “C:\\MySQL\\mysql-5.7.11-winx64”3. 修改配置文件  将解压目录中的 my-default.ini 文件重命名为 my.ini，并将内容替换为以下即可4. 安装 MySQL 服务  以管理员身份运行 cmd5. 更改默认密码  打开 MySQL 安装目录，打开 data 目录，有一个 .err 后缀名的文件，用编辑器打开如果每一行都是 [Warning]，没有 [Error]，就说明安装正确，并且最后一行应该如下后面 12 个字符为默认生成初始密码，复制打开 cmd ，输入以下命令若出现 “Welcome to the MySQL monitor.  Commands end with ; or \\g. …” 则说明密码正确若出现 “ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES)” 则说明密码错误，编辑 MySQL 配置文件 my.ini ，在 [mysqld] 这个条目下加入 skip-grant-tables，保存退出后重启 MySQL密码正确后更改默认密码newPassword 更改为新密码6. 卸载 MySQL 服务  进入 C:\\MySQL\\mysql-5.7.11-winx64\\bin 目录下，输入或者执行卸载服务。","tags":["MySQL"],"categories":["MySQL"]},{"title":"《跟老齐学 Python 轻松入门》学习笔记 --1. 基本对象类型","url":"/2017-10-05-python-easy/","content":"content{:toc}本文根据 《跟老齐学 python 轻松入门》 的知识点整理，主要是代码打了一遍做了总结，非常零基础。数和数的运算python 自动解决大整数问题加法乘法除法异常计算  浮点数十进制转化为二进制造成误差解决方法 1：使用\b decimal 模块(小数)解决方法 1：使用\b fractions 模块(分数)余数四舍五入浮点数十进制转化为二进制造成误差math 模块字符串  键盘输入原始字符串字符串切片连接字符串判断元素是否在字符串中最值和比较测量长度字符串格式化输出常用字符串方法列表  列表切片列表基本操作","tags":["Python"],"categories":["Python"]},{"title":"群晖 NAS 简单体验","url":"/2017-07-31-NAS-introduction/","content":"content{:toc}好吧，最近家人出去玩不带我，自己在家无聊买了一个 群晖（Synology）DS216play ，2017-7-29 京东购买，下午就到了，狗东物流就是快啊。买的是带 两块 希捷 4T 硬盘的套装，一共 3799 元。单买是 (2250 + 1299 * 2) = 4848 元，相当于赠了一块硬盘，还算挺合适的，当然比 618 贵 100+ 。NAS (Network Attached Storage) 网络附属存储，也叫网络存储器，是专门用来存储数据的服务器，家用的主要功能其实就是私有云、照片电影的存储等。在各大网盘都被封掉的时代，买一个 NAS 存放一些私有文件还是一个比较好的选择。传说中群晖是买软件送硬件，一是说群晖性价比低，二是说群晖软件做的确实良心，各大平台都有，插件也比较全，可玩性比较高。配置 群晖DS216play 是双硬盘位，不支持热插拔硬盘位。个人认为双盘位在家庭中使用足够了，8T (4T * 2) 的硬盘也够使好长时间了。把两个硬盘装好后，拧上螺丝，插上电源和网线(连路由器或交换机的 LAN 口)，按下电源键就可以开机啦~在连接网络的电脑浏览器输入网址 http://find.synology.com 进行初次配置，设置群晖账号密码等。之后会提示你安装推荐插件，先点取消，因为我们还要更改一下 RAID 格式。选择 RAID 类型  详细的 shr basic raid0 raid1 raid5 raid6 类型介绍参照下面的链接  http://xungejiang.com/2017/08/03/shr-raid015/安装完系统后默认为 shr 格式，双盘位时为 raid1 模式，多了数据备份功能，但是容量只有一半，也就是说 2 块 4T 的硬盘只有 4T 的容量。由于是家庭使用，没有太重要的文件，所以没必要进行数据备份，需要把 shr 模式改为 basic 模式，这样可用容量才是 8T。具体方法如下。如果 NAS 里已经有一些重要的资料不想拿另一个硬盘备份，可以参照这篇博客 如何将 raid1（SHR）降级为 basic。不过如果你已经把资料都备份了，推荐恢复出厂设置。方法如下：控制面板  -&gt;  更新和还原  -&gt;  重置  -&gt;  删除所有数据。如果你已经安装过插件，不建议你选择 删除存储空间 进行重置，因为插件容易卸载不干净，影响后续使用。所以最好的方法还是恢复出厂设置。变为新系统后，在 存储空间管理员  -&gt;  存储空间  -&gt;  删除  -&gt;  删除 将系统默认的 shr 删掉。之后点 新增  -&gt;  自定义  -&gt;  使用所有硬盘容量的存储空间  -&gt;  勾选第一个硬盘  -&gt;  确定  -&gt; Basic -&gt;  否 -&gt; 下一步  -&gt;  应用同理，第二块硬盘重复上述操作，只是在第四步勾选第二块硬盘。套件中心 初体验  群晖的软件可谓是真的良心，很多插件都已经集成，可直接下载，兼容性很强。存储空间分析器：可查看文件类型、重复文件等。Cloud Station Server：可下载 Cloud Station Drive 和 Cloud Station Backup 两个客户端，区别是 Drive 是 双向同步，保证云端和本地一致；而 Backup 只有新增才会同步，删除本地云端不会删除。Cloud Sync：可同步各大网盘，以 百度网盘  为例，配置好后，只要将文件保存至  我的应用数据 -&gt; Cloud Sync 里即可自动下载到 NAS 中，不过速度较慢Download Station：远程下载，不过速度较慢。由于迅雷取消了第三方软件的远程下载，只有迅雷的下载包和小米路由器可以使用，所以群晖的远程下载也被取消，远程下东西只能用 Download Station 和 同步云盘。","tags":["NAS"],"categories":["NAS"]},{"title":"群晖 synology 的 SHR 、raid1 、raid0 、raid1 、raid5 的区别","url":"/2017-08-03-shr-raid015/","content":"content{:toc} 转载网址 http://www.goodnas.net/forum.php?mod=viewthread&amp;tid=24 本文主要讲述群晖的 SHR 、raid1 、raid0 、raid1 、raid5 之间的区别。SHRSHR 是 Synology Hybrid RAID 的缩写；当 NAS 里面只有一颗硬盘的时候，磁盘阵列的模式为 basic ，无数据保护。当再添加为一个硬盘的时候磁盘阵列的模式自动转换成类似 raid1 模式，空间大小不变，但是多了个数据保护。当再加入一个硬盘的时候会自动转换成类似 raid5 模式（前提是你的 NAS 可以放 3 个及以上的硬盘），容量为 N-1 个硬盘的总容量，假如 3 个 3Ｔ 的硬盘，此时的 SHR 空间总容量为 (3 - 1) * 3T 为 6T 的空间，后期可以慢慢加硬盘数据也不影响的。SHR 优点 ：在于方便不熟悉磁盘阵列的玩家，傻瓜简单式的帮你组好磁盘阵列，而且还能合理利用容量大小不一的硬盘，减少浪费，raid 是按照最小的硬盘算，而 SHR 则可以合理利用减少浪费，智能 raid 推荐使用~ 附计算网址：https://www.synology.cn/zh-cn/support/RAID_calculator。basicbasic 是基本模式，一个硬盘一个独立的空间。raid0raid0：无数据保护，空间最大化利用，当在 NAS 中运行的时候就和 JBOD 属性差不多，就不再多介绍，raid0 是将多个磁盘合并成一个大的磁盘，不具有冗余，并行 I / O，速度最快。它是将多个磁盘并列起来，成为一个大磁盘。raid0 优点 ：传输速度快且空间最大化利用，传输速度理论数值是一般 raid 的 2 倍，实际速度为 1.6 倍。raid0 缺点 ：没有冗余，数据存入都是以拆分打散的方式放到不同的硬盘，所以说当一块硬盘坏掉的时候所以的数据都会丢失！慎用~raid1raid1 是镜像备份，实际容量为总空间的一半，N/2，如果有 2 块 3T 的硬盘，总容量为（3+3）/2。raid1 优点 ：有数据保护，让硬盘坏掉一个时，数据还在，硬盘还可以正常读取。rard1 缺点 ：空间折一半，放放重要数据资料，照片，放电影就不划算啦！raid5raid5 是一种既考虑到数据保护又考虑到硬盘运作成本的解决方案，raid5 不对数据进行存储，而是把奇偶校检信息存储到不同的磁盘上。损坏后，用奇偶校检信息和对应的数据去恢复损坏的数据，实际空间为 N-1 ，上面有介绍，假如有 3 块 3T 的硬盘，实际空间为 (3 - 1) * 3T 为 6T ，说直白点：就是假如 4 个硬盘，3 个放数据，1 个备份，值得强调的一点就是 4 个硬盘不分主次，可以任意坏一块硬盘。raid5 优点 ：数据安全和成本兼顾，是 4 盘位 NAS 玩家的首选。raid5 缺点 ：只有一个硬容错，当硬盘坏掉一个是要及时更换。raid6raid6 和 riad5 原理差不多，riad5 是 N - 1 可以任意坏一个硬盘，raid6 则是可以任意坏 2 个硬盘，N - 2 的模式，适合盘位很多的玩家。 还有 raid2、raid3、raid4、raid6、raid7、raid50、raid53，NAS 不支持，感兴趣的朋友可自行百度。","tags":["NAS"],"categories":["NAS"]},{"title":"SSM 框架下的 jcaptcha 验证码实例","url":"/2017-07-11-ssm-jcaptcha/","content":"content{:toc}最近把 SSM(Spring + Spring MVC + MyBatis) 的 Maven 项目搭建好了，并完成了登录和注册功能。其中注册功能使用 jcaptcha 加入了验证码，并使用 AJAX 完成了基本的验证功能。本文主要介绍一下 jcaptcha 验证码的实现 (IDEA , 附源码)。项目源码：https://github.com/xunge/SSM-jcaptcha参考：jcaptcha 官网IDEA 搭建 SSMjcaptcha 验证码由于 jcaptcha 有个缺陷，就是无法使用 AJAX 进行验证，因为一旦验证就会清除 session，这就导致如果使用 AJAX 验证后，如果输入的验证码错误，就无法重复验证，只有刷新网页才可重新使用。这里参考 这篇博客，将清除 session 的操作提取出来，便可以使用 AJAX 进行验证了。项目介绍注册页面使用 jcaptcha 实现了验证码功能，并使用 AJAX 技术实时验证。注册页面的邮箱输入完成，光标移开输入框后，使用 AJAX 技术到后台数据库进行查找，如果已经注册过则提示该邮箱已被注册。maven 依赖jcaptcha 配置文件：spring-jcaptcha.xml在 resources/spring 下新建 spring-jcaptcha.xml 。该文件主要控制验证码的样式，可根据官网适当修改。web.xml 代码  因为是在 resources/spring 下新建 spring-jcaptcha.xml ， 所以 web.xml 无需重新配置。JcaptchaImageCreater.java在 controller 下新建 JcaptchaImageCreater.java，用来生成验证码图片。CustomGenericManageableCaptchaService.java 重写 GenericManageableCaptchaService.java在 service 下新建 CustomGenericManageableCaptchaService.java，将 removeCaptcha 方法提出来，便可以使用 AJAX 进行验证。LoginController在 controller 下新建 LoginController，进行用户注册和检查验证码的方法。前端代码JS 代码  前端 AJAX 验证使用 JQuery 的 validate，进行表单的验证更美观。总结  更详细信息可以参考源码。","tags":["SSM","jcaptcha"],"categories":["jcaptcha"]},{"title":"i7-7700k 装机实录","url":"/2017-06-08-build-up-computer/","content":"content{:toc}最近感觉家里的 iMac 配置有些低，于是准备自己组装一台电脑。本文主要介绍一下自己的选购配件的过程以及装机时候的注意事项。选购  在购买前已经做了一年多的功课啦，本来上次双十一就准备买来着，不过因为某种原因没有买成。今天再看当时的配件不是换代就是降价很多，不禁感叹摩尔定律依旧成立。。买之前一直参照知乎大神的 @毅种循环 的专栏6.18，参考价值非常大，再次感谢毅神。6.1 福利最大，幸好我当天锁了两单，还是非常优惠的。下面给出我的配置单配件品牌价格CPUi7-7700k(散)2078￥显卡索泰 GTX1060 6G1899￥(-200)主板微星 Z270 gaming pro carbon1375￥(-224)内存条英睿达 DDR4 2400 8G主板赠(-339)固态硬盘三星 PM961 256G629￥机械硬盘希捷酷鱼 7200 转 2T329￥(-80)散热器九州风神 大霜塔179￥(-40)电源海韵 G-550419￥(-80)机箱先马黑洞289￥(-10)显示器戴尔 U2417h1474(-175)总计：8671￥(-1208)其中除了 CPU 和 固态是从淘宝买的之外，其余全部走的京东，可以说福利还是足够的。CPU 选购  因为 AMD 最近崛起的 Ryzen 处理器表现也相当不俗，也曾经考虑不过是否上 AMD。不过还是感觉英特尔稳妥一点，在游戏体验上英特尔也是略胜一筹，最终决定还是英特尔吧。固态硬盘选购M.2 接口的固态硬盘还是非常有必要的，读写速度也比 SATA 接口快了好几倍。下面列取市场上主流 nvme 协议的固态硬盘，容量为 256G。大家可以根据自己的钱包进行选择。品牌价钱颗粒读 / 写(MB/S)英特尔 600p660￥TLC1570/540建兴 T10680￥MLC2700/1300三星 960 evo900￥TLC3200/1800SM 961850￥MLC3200/1400PM 961680￥TLC2800/1100注：MLC 好于 TLC，价格来源于 6 月 12 日 淘宝。装机  京东买的东西就是快，下完单最晚第二天就到了。然而 CPU 和 固态 走的淘宝，第二周才送到。装机前看了几个装机视频，感觉还不错，推荐给大家 。装机视频教程  本文并没有介绍如何走背线，这篇视频介绍背线走法还是很详细的。手把手带你从零开始台式电脑的组装  同样是先马黑洞的机箱。PcPartPicker 装机教程  外国大神装机教程并且要仔细看主板的说明书！！！（x3）装机的时候要注意避免静电。因为静电很容易损坏 CPU 或 主板，可以用手经常摸一下机箱，有条件的可以戴白色手套，戴防静电手环当然更好啦。1. 装 CPU这一步算是最容易的啦。将压杆侧压掀起保护盖，将 CPU 放入。注意 Intel 的 CPU 有两个小凹槽的防呆设计，与卡槽对齐后即可将压杆归位，同时保护盖跳起。2. 装内存条  内存条的安装按道理也很简单，但是还是花了不少功夫。内存条也有个凹槽，两边距离不同，按的时候对比一下凹槽对应即可，不容易安错。不过在按内存条的时候真的是需要很大力气的。这里建议在主板底下垫一个软垫，可以更好地发力。3. 安装 M.2 固态硬盘  我买的 Z270 主板有两个 M.2 插槽，其中有一个带有散热装甲，对固态硬盘的加速还是很有帮助的。先将中间的平齐螺丝放在外侧，再将固态硬盘装好并用固定螺丝固定即可。4. 装 CPU 散热  散热的安装相对复杂一些。因为买的 CPU 想超频，低端水冷还不如高端风冷，所以买了大霜塔。说明书讲的还是很清楚的，这里简单说一下注意事项。1. 将四个固定钉插入中间孔，并套上保护胶套进行固定。（不要加矩形胶垫）2. 将 4 个固定钉从主板底下穿出。3. 套上四个胶垫。4. 固定支架，注意螺丝少量多次拧紧，对向螺丝一起拧。5. 将中间的风扇去掉，记住风扇是怎么摘的，一会还要装回去。6. 涂硅脂。往 CPU 上挤出黄豆粒大小的硅脂，用牙签涂匀。注意只需要薄薄一层，太厚了反倒不适合散热。7. 固定散热器本体。注意风扇方向是朝着内存吹的。如果挡内存可以把风扇往上移一些，或者把外侧的风扇放到相反一侧。拧螺丝时一定不要太用力，否则会压坏 CPU 或 主板。8. 将中间的风扇装好。9. 接风扇电源线。中间的风扇 (4pin) 接到 CPU_FAN1 接口上，旁边的风扇 (3pin) 接到任意 SYS_FAN 接口即可。(3pin 插到 4pin 接口就行)5. 装电源  我买的是 海韵 G-550 模组电源。首先把电源后面的模组都插好，再把电源用螺丝拧紧在机箱后面底部，注意风扇向下。6. 装 机械硬盘 / 固态硬盘 / 光驱（SATA 接口）每个机箱都不同，照着机箱说明书装就好啦。SATA 接口需要连接两根线：一根数据线，和主板相连；一根电源线，和电源相连。7. 固定主板 IO 挡板  将主板的 IO 挡板固定在机箱上。8. 固定主板到机箱  机箱在买回来的时候就有六个铜柱，在如图位置。因为我的主板是大板，所以需要把外面三个红圈的铜柱也拧上，并拧掉绿圈的铜柱（很紧，可能需要扳子）。注意没用的铜柱一定要拧下来，否则可能导致主板短路。固定螺丝如图所示。这里说明一下，如果你用的也是大霜塔等大型散热器，最好提前插上 CPU 供电线，再固定主板。因为我买的 CPU 散热器大霜塔太大，我又从背板走的线，CPU 的供电线非常难插，只有很小的空间，像我的大手根本进不去，最后没办法求助母上大人。母上大人的纤纤玉手也是勉强才伸进去。为了插这根线花了大约半个小时的时间。所以建议在固定主板前先把 CPU 的供电线插上，再固定主板，会轻松很多。9. 连接各种跳线  推荐个百度经验这一步是对新手来说最不友好的一步。需要往主板上插各种跳线。有电源线，机箱前置面板线，硬盘、风扇线等。下图为主板用到的几个接口。接口名称功能①AUD1耳机与麦克风接口②JFP1机箱开机键、指示灯等接口③JUSB1机箱前面板 USB④SATA接硬盘、光驱⑤JUSB3机箱前面板 USB⑥ATX_PWR1主板供电线⑦SYS_FAN4CPU 散热副风扇供电线⑧CPU_FAN1CPU 散热主风扇供电线⑨CPU_PWR1CPU 供电线其中 ② JFP1 接口需要连接多根跳线，下图为具体连接方式。10. 安装显卡  因为显卡比较大，容易挡住跳线接口，我们选择最后安装它。需要卸下机箱的两个挡板，将显卡插入 PCIE 接口后用卸下的螺丝固定。我买的是索泰至尊需要 6+8 pin 供电。模组电源有两个 8 pin 的显卡供电线，需要都连上，其中有一个 8 pin 线只连接 6 pin 接口。总结  至此，装机已经完成，我们需要连接电源，连接显示器（用显卡的接口连，不是主板），开机看看是否点亮。如果没有点亮也不用着急，我第一次也没有点亮，原因是机箱开关机键没有插好（可能是电源灯正负极接反了）。把 ② JFP1 接口的跳线拔下来重新插上再试试吧。装系统速度神快，坦克世界终于开了最高特效！！那效果，爽！！超频设置后面的文章会提到，敬请期待~p.s. 幸亏 6.1 就全买完了。。显卡由于被挖矿的高价买走了，显卡至少贵 500。。","tags":["装机"],"categories":["装机"]},{"title":"Java 常见面试题及答案","url":"/2017-05-04-Java-interview-questions/","content":"content{:toc}1. 什么是 Java 虚拟机？为什么 Java 被称作是“平台无关的编程语言”？Java 虚拟机是一个可以执行 Java 字节码的虚拟机进程。Java 源文件被编译成能被 Java 虚拟机执行的字节码文件。Java 被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。Java 虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性。2.JDK 和 JRE 的区别是什么？JDK: Java 开发工具包, 包含了 JRE、编译器和其它工具（如：JavaDOc、Java 调试器)JRE: Java 运行环境, 包含 Java 虚拟机和 Java 程序所需的核心类库。如果只是想跑 Java 程序，那么只需安装 JRE，如果要写 Java 程序并且运行，那就需要 JDK 了。3.”static”关键字是什么意思？Java 中是否可以覆盖一个 private 或者是 static 的方法？如果一个类的变量或者方法前面有 static 修饰，那么表明这个方法或者变量属于这个类，也就是说可以在不创建对象的情况下直接使用当父类的方法被 private 修饰时，表明该方法为父类私有，对其他任何类都是不可见的，因此如果子类定了一个与父类一样的方法，这对于子类来说相当于是一个新的私有方法，且如果要进行向上转型，然后去调用该“覆盖方法”，会产生编译错误。static 方法时编译时静态绑定的，属于类，而覆盖是运行时动态绑定的(动态绑定的多态), 因此不能覆盖。4.Java 支持的基本数据类型有哪些？什么是自动拆装箱？Java 支持的基本数据类型有以下 9 种: byte, shot, int, long, float, double, char, boolean, void 。自动拆装箱是 Java 从 jdk1.5 引用，目的是将原始类型自动的转换为相对应的对象，也可以逆向进行，即拆箱。这也体现 Java 中一切皆对象的宗旨。所谓自动装箱就是将原始类型自动的转换为对应的对象，而拆箱就是将对象类型转换为基本类型。Java 中的自动拆装箱通常发生在变量赋值的过程中，如：在 Java 中，应该注意自动拆装箱，因为有时可能因为 Java 自动装箱机制，而导致创建了许多对象，对于内存小的平台会造成压力。5. 覆盖和重载是什么?覆盖  也叫  重写 ，发生在子类与父类之间，表示子类中的方法可以与父类中的某个方法的名称和参数完全相同，通过子类创建的实例对象调用这个方法时，将调用子类中的定义方法，这相当于把父类中定义的那个完全相同的方法给覆盖了，这也是面向对象编程的多态性的一种表现。重载  是指在一个类中，可以有多个相同名称的方法，但是他们的参数列表的个数或类型不同，当调用该方法时，根据传递的参数类型调用对应参数列表的方法。 注意！！ 当参数列表相同但返回值不同时，将会出现编译错误，这并不是重载，因为 jvm 无法根据返回值类型来判断应该调用哪个方法。6.Java 支持多继承么？如果不支持，如何实现?在 Java 中是单继承的，也就是说一个类只能继承一个父类。Java 中实现多继承有两种方式, 一是接口，二是内部类。7. 什么是值传递和引用传递？java 中是值传递还是引用传递，还是都有?值传递 就是在方法调用的时候，实参是将自己的一份拷贝赋给形参，在方法内，对该参数值的修改不影响原来实参，常见的例子就是刚开始学习 c 语言的时候那个交换方法的例子了。引用传递 是在方法调用的时候，实参将自己的地址传递给形参，此时方法内对该参数值的改变，就是对该实参的实际操作。在 java 中只有一种传递方式，那就是值传递. 可能比较让人迷惑的就是 java 中的对象传递时，对形参的改变依然会影响到该对象的内容。下面这个例子来说明 Java 中是值传递.在上面这个例子中, 当前输出结果为:hello world。这并没有什么问题，可能就是大家平常所理解的引用传递，那么当然会改变 StringBuffer 的内容。但是如果把上面的注释去掉，那么就会输出:hello。此时 sb 的值并没有变成 ha hello。假如说是引用传递的话，那么形参的 s 也就是 sb 的地址，此时在方法里 new StringBuffer() ，并将该对象赋给 s ，也就是说 s 现在指向了这个新创建的对象. 按照引用传递的说法，此时对 s 的改变就是对 sb 的操作，也就是说 sb 应该也指向新创建的对象，那么输出的结果应该为 ha world。但实际上输出的仅是 hello。这说明 sb 指向的还是原来的对象，而形参 s 指向的才是创建的对象, 这也就验证了 Java 中的对象传递也是值传递。8. 接口和抽象类的区别是什么?不同点在于：接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。类可以实现很多个接口，但是只能继承一个抽象类类如果要实现一个接口，它必须要实现接口声明的所有方法。但是，类可以不实现抽象类声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的。抽象类可以在不提供接口方法实现的情况下实现接口。Java 接口中声明的变量默认都是 final 的。抽象类可以包含非 final 的变量。Java 接口中的成员函数默认是 public 的。抽象类的成员函数可以是 private，protected 或者是 public 。接口是绝对抽象的，不可以被实例化(java 8 已支持在接口中实现默认的方法)抽象类也不可以被实例化，但是，如果它包含 main 方法的话是可以被调用的。9. 构造器（constructor）是否可被重写（override）?构造方法是不能被子类重写的，但是构造方法可以重载，也就是说一个类可以有多个构造方法。10.Math.round(11.5) 等于多少? Math.round(-11.5)等于多少?Math.round(11.5)==12 Math.round(-11.5)==-11 round 方法返回与参数 最接近的长整数，参数加 1/2 后求其 floor.11. String, StringBuffer StringBuilder 的区别。String 的长度是不可变的；StringBuffer 的长度是可变的，如果你对字符串中的内容经常进行操作，特别是内容要修改时，那么使用 StringBuffer，如果最后需要 String，那么使用 StringBuffer 的 toString() 方法；线程安全；StringBuilder 是从 JDK 5 开始，为 StringBuffer 该类补充了一个单个线程使用的等价类；通常应该优先使用 StringBuilder 类，因 &gt; 为它支持所有相同的操作，但由于它不执行同步，所以速度更快。使用字符串的时候要特别小心，如果对一个字符串要经常改变的话，就一定不要用 String, 否则会创建许多无用的对象出来.来看一下比较这个时候 s 有多个字符串进行拼接，按理来说会有多个对象产生，但是 jvm 会对此进行一个优化，也就是说只创建了一个对象，此时它的执行速度要比 StringBuffer 拼接快。再看下面这个:上面这种情况，就会多创建出来三个对象，造成了内存空间的浪费。12.JVM 内存分哪几个区，每个区的作用是什么?java 虚拟机主要分为以下五个区:(1) 方法区有时候也成为永久代，在该区内很少发生垃圾回收，但是并不代表不发生 GC，在这里进行的 GC 主要是对方法区里的常量池和对类型的卸载方法区主要用来存储已被虚拟机加载的类的信息、常量、静态变量和即时编译器编译后的代码等数据。该区域是被线程共享的。方法区里有一个运行时常量池，用于存放静态编译产生的字面量和符号引用。该常量池具有动态性，也就是说常量并不一定是编译时确定，运行时生成的常量也会存在这个常量池中。(2) 虚拟机栈虚拟机栈也就是我们平常所称的栈内存, 它为 java 方法服务，每个方法在执行的时候都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接和方法出口等信息。虚拟机栈是线程私有的，它的生命周期与线程相同。局部变量表里存储的是基本数据类型、returnAddress 类型（指向一条字节码指令的地址）和对象引用，这个对象引用有可能是指向对象起始地址的一个指针，也有可能是代表对象的句柄或者与对象相关联的位置。局部变量所需的内存空间在编译器间确定操作数栈的作用主要用来存储运算结果以及运算的操作数，它不同于局部变量表通过索引来访问，而是压栈和出栈的方式每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接. 动态链接就是将常量池中的符号引用在运行期转化为直接引用。(3) 本地方法栈  本地方法栈和虚拟机栈类似，只不过本地方法栈为 Native 方法服务。(4) 堆java 堆是所有线程所共享的一块内存，在虚拟机启动时创建，几乎所有的对象实例都在这里创建，因此该区域经常发生垃圾回收操作。(5) 程序计数器  内存空间小，字节码解释器工作时通过改变这个计数值可以选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理和线程恢复等功能都需要依赖这个计数器完成。该内存区域是唯一一个 java 虚拟机规范没有规定任何 OOM 情况的区域。如和判断一个对象是否存活?(或者 GC 对象的判定方法)判断一个对象是否存活有两种方法:(1) 引用计数法  所谓引用计数法就是给每一个对象设置一个引用计数器，每当有一个地方引用这个对象时，就将计数器加一，引用失效时，计数器就减一。当一个对象的引用计数器为零时，说明此对象没有被引用，也就是“死对象”, 将会被垃圾回收。引用计数法有一个缺陷就是无法解决循环引用问题，也就是说当对象 A 引用对象 B，对象 B 又引用者对象 A，那么此时 A,B 对象的引用计数器都不为零，也就造成无法完成垃圾回收，所以主流的虚拟机都没有采用这种算法。(2) 可达性算法(引用链法) 该算法的思想是：从一个被称为 GC Roots 的对象开始向下搜索，如果一个对象到 GC Roots 没有任何引用链相连时，则说明此对象不可用。在 java 中可以作为 GC Roots 的对象有以下几种:虚拟机栈中引用的对象方法区类静态属性引用的对象方法区常量池引用的对象本地方法栈 JNI 引用的对象当一个对象不可达 GC Root 时，这个对象并不会立马被回收，而是出于一个死缓的阶段，若要被真正的回收需要经历两次标记。如果对象在可达性分析中没有与 GC Root 的引用链，那么此时就会被第一次标记并且进行一次筛选，筛选的条件是是否有必要执行 finalize() 方法。当对象没有覆盖 finalize() 方法或者已被虚拟机调用过，那么就认为是没必要的。如果该对象有必要执行 finalize() 方法，那么这个对象将会放在一个称为 F-Queue 的对队列中，虚拟机会触发一个 Finalize() 线程去执行，此线程是低优先级的，并且虚拟机不会承诺一直等待它运行完，这是因为如果 finalize() 执行缓慢或者发生了死锁，那么就会造成 F-Queue 队列一直等待，造成了内存回收系统的崩溃。 GC 对处于 F-Queue 中的对象进行第二次被标记，这时，该对象将被移除”即将回收”集合，等待回收。15.java 中垃圾收集的方法有哪些?(1) 标记 - 清除:这是垃圾收集算法中最基础的，根据名字就可以知道，它的思想就是标记哪些要被回收的对象，然后统一回收。这种方法很简单，但是会有两个主要问题：效率不高，标记和清除的效率都很低；会产生大量不连续的内存碎片，导致以后程序在分配较大的对象时，由于没有充足的连续内存而提前触发一次 GC 动作。(2) 复制算法:为了解决效率问题，复制算法将可用内存按容量划分为相等的两部分，然后每次只使用其中的一块，当一块内存用完时，就将还存活的对象复制到第二块内存上，然后一次性清楚完第一块内存，再将第二块上的对象复制到第一块。但是这种方式，内存的代价太高，每次基本上都要浪费一半的内存。于是将该算法进行了改进，内存区域不再是按照 1：1 去划分，而是将内存划分为 8:1:1 三部分，较大那份内存交 Eden 区，其余是两块较小的内存区叫 Survior 区。每次都会优先使用 Eden 区，若 Eden 区满，就将对象复制到第二块内存区上，然后清除 Eden 区，如果此时存活的对象太多，以至于 Survivor 不够时，会将这些对象通过分配担保机制复制到老年代中。(java 堆又分为新生代和老年代)(3) 标记 - 整理:该算法主要是为了解决标记 - 清除，产生大量内存碎片的问题；当对象存活率较高时，也解决了复制算法的效率问题。它的不同之处就是在清除对象的时候现将可回收对象移动到一端，然后清除掉端边界以外的对象，这样就不会产生内存碎片了。(4) 分代收集:现在的虚拟机垃圾收集大多采用这种方式，它根据对象的生存周期，将堆分为新生代和老年代。在新生代中，由于对象生存期短，每次回收都会有大量对象死去，那么这时就采用复制算法。老年代里的对象存活率较高，没有额外的空间进行分配担保，所以可以使用 标记 - 整理  或者  标记 - 清除。16.java 内存模型java 内存模型 (JMM) 是线程间通信的控制机制。 JMM 定义了主内存和线程之间抽象关系。线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读 / 写共享变量的副本。本地内存是 JMM 的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。 Java 内存模型的抽象示意图如下：从上图来看，线程 A 与线程 B 之间如要通信的话，必须要经历下面 2 个步骤：首先，线程 A 把本地内存 A 中更新过的共享变量刷新到主内存中去。然后，线程 B 到主内存中去读取线程 A 之前已更新过的共享变量。17.java 类加载过程?java 类加载需要经历以下 7 个过程：(1) 加载  加载时类加载的第一个过程，在这个阶段，将完成以下三件事情：通过一个类的全限定名获取该类的二进制流。将该二进制流中的静态存储结构转化为方法去运行时数据结构。在内存中生成该类的 Class 对象，作为该类的数据访问入口。(2) 验证  验证的目的是为了确保 Class 文件的字节流中的信息不回危害到虚拟机。在该阶段主要完成以下四钟验证:文件格式验证: 验证字节流是否符合 Class 文件的规范，如主次版本号是否在当前虚拟机范围内，常量池中的常量是否有不被支持的类型。元数据验证: 对字节码描述的信息进行语义分析，如这个类是否有父类，是否集成了不被继承的类等。字节码验证: 是整个验证过程中最复杂的一个阶段，通过验证数据流和控制流的分析，确定程序语义是否正确，主要针对方法体的验证。如: 方法中的类型转换是否正确，跳转指令是否正确等。符号引用验证: 这个动作在后面的解析过程中发生，主要是为了确保解析动作能正确执行。(3) 准备  准备阶段是为类的静态变量分配内存并将其初始化为默认值，这些内存都将在方法区中进行分配。准备阶段不分配类中的实例变量的内存，实例变量将会在对象实例化时随着对象一起分配在 Java 堆中。(4) 解析  该阶段主要完成符号引用到直接引用的转换动作。解析动作并不一定在初始化动作完成之前，也有可能在初始化之后。(5) 初始化  初始化时类加载的最后一步，前面的类加载过程，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的 Java 程序代码。18. 简述 Java 类加载机制?虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验，解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型。19. 类加载器双亲委派模型机制？当一个类收到了类加载请求时，不会自己先去加载这个类，而是将其委派给父类，由父类去加载，如果此时父类不能加载，反馈给子类，由子类去完成类的加载。20. 什么是类加载器，类加载器有哪些?实现通过类的权限定名获取该类的二进制字节流的代码块叫做类加载器。主要有一下四种类加载器:启动类加载器(Bootstrap ClassLoader): 用来加载 Java 核心类库，无法被 Java 程序直接引用。扩展类加载器(extensions class loader): 它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。系统类加载器(system class loader): 它根据 Java 应用的类路径 (CLASSPATH) 来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader() 来获取它。用户自定义类加载器，通过继承 java.lang.ClassLoader 类的方式实现。21. 简述 java 内存分配与回收策率以及 Minor GC 和 Major GC对象优先在堆的 Eden 区分配。大对象直接进入老年代。长期存活的对象将直接进入老年代。当 Eden 区没有足够的空间进行分配时，虚拟机会执行一次 Minor GC。Minor Gc 通常发生在新生代的 Eden 区，在这个区的对象生存期短，往往发生 Gc 的频率较高，回收速度比较快; Full Gc/Major GC 发生在老年代，一般情况下，触发老年代 GC 的时候不会触发 Minor GC, 但是通过配置，可以在 Full GC 之前进行一次 Minor GC 这样可以加快老年代的回收速度。22.HashMap 的工作原理是什么?HashMap 内部是通过一个数组实现的，只是这个数组比较特殊，数组里存储的元素是一个 Entry 实体 (jdk 8 为 Node) ，这个 Entry 实体主要包含 key 、 value 以及一个指向自身的 next 指针。HashMap 是基于 hashing 实现的，当我们进行 put 操作时，根据传递的 key 值得到它的 hashcode ，然后再用这个 hashcode 与数组的长度进行  模运算，得到一个 int 值，就是 Entry 要存储在数组的位置（下标）；当通过 get 方法获取指定 key 的值时，会根据这个 key 算出它的 hash 值（数组下标），根据这个 hash 值获取数组下标对应的 Entry ，然后判断 Entry 里的 key ， hash 值或者通过 equals() 比较是否与要查找的相同，如果相同，返回 value ，否则的话，遍历该链表（有可能就只有一个 Entry ，此时直接返回 null ），直到找到为止，否则返回 null。HashMap 之所以在每个数组元素存储的是一个链表，是为了解决 hash 冲突问题，当两个对象的 hash 值相等时，那么一个位置肯定是放不下两个值的，于是 hashmap 采用链表来解决这种冲突， hash 值相等的两个元素会形成一个链表。23.HashMap 与 HashTable 的区别是什么?HashTable 基于 Dictionary 类，而 HashMap 是基于 AbstractMap 。 Dictionary 是任何可将键映射到相应值的类的抽象父类，而 AbstractMap 是基于 Map 接口的实现，它以最大限度地减少实现此接口所需的工作。HashMap 的 key 和 value 都允许为 null ，而 Hashtable 的 key 和 value 都不允许为 null 。 HashMap 遇到 key 为 null 的时候，调用 putForNullKey 方法进行处理，而对 value 没有处理； Hashtable 遇到 null ，直接返回 NullPointerException。Hashtable 是同步的，而 HashMap 是非同步的，但是我们也可以通过 Collections.synchronizedMap(hashMap) , 使其实现同步。24.CorrentHashMap 的工作原理?jdk 1.6 版: ConcurrenHashMap 可以说是 HashMap 的升级版， ConcurrentHashMap 是线程安全的，但是与 Hashtable 相比，实现线程安全的方式不同。 Hashtable 是通过对 hash 表结构进行锁定，是阻塞式的，当一个线程占有这个锁时，其他线程必须阻塞等待其释放锁。 ConcurrentHashMap 是采用分离锁的方式，它并没有对整个 hash 表进行锁定，而是局部锁定，也就是说当一个线程占有这个局部锁时，不影响其他线程对 hash 表其他地方的访问。具体实现: ConcurrentHashMap 内部有一个 Segment&lt;K,V&gt; 数组, 该 Segment 对象可以充当锁。 Segment 对象内部有一个 HashEntry&lt;K,V&gt; 数组，于是每个 Segment 可以守护若干个桶 (HashEntry) , 每个桶又有可能是一个 HashEntry 连接起来的链表，存储发生碰撞的元素。每个 ConcurrentHashMap 在默认并发级下会创建包含 16 个 Segment 对象的数组，每个数组有若干个桶，当我们进行 put 方法时，通过 hash 方法对 key 进行计算，得到 hash 值，找到对应的 segment ，然后对该 segment 进行加锁，然后调用 segment 的 put 方法进行存储操作，此时其他线程就不能访问当前的 segment ，但可以访问其他的 segment 对象，不会发生阻塞等待。jdk 1.8 版: 在 jdk 8 中， ConcurrentHashMap 不再使用 Segment 分离锁，而是采用一种乐观锁 CAS 算法来实现同步问题，但其底层还是 “数组 + 链表 -&gt; 红黑树” 的实现。25. 遍历一个 List 有哪些不同的方式？26.fail-fast 与 fail-safe 有什么区别？Iterator 的 fail-fast 属性与当前的集合共同起作用，因此它不会受到集合中任何改动的影响。 Java.util 包中的所有集合类都被设计为 fail-&gt;fast 的，而 java.util.concurrent 中的集合类都为 fail-safe 的。当检测到正在遍历的集合的结构被改变时， Fail-fast 迭代器抛出 ConcurrentModificationException ，而 fail-safe 迭代器从不抛出 ConcurrentModificationException。27.Array 和 ArrayList 有何区别？Array 可以容纳基本类型和对象，而 ArrayList 只能容纳对象。Array 是指定大小的，而 ArrayList 大小是固定的28. 哪些集合类提供对元素的随机访问？ArrayList、HashMap、TreeMap 和 HashTable 类提供对元素的随机访问。29.HashSet 的底层实现是什么?通过看源码知道 HashSet 的实现是依赖于 HashMap 的，HashSet 的值都是存储在 HashMap 中的。在 HashSet 的构造法中会初始化一个 HashMap 对象， HashSet 不允许值重复，因此， HashSet 的值是作为 HashMap 的 key 存储在 HashMap 中的，当存储的值已经存在时返回 false。30.LinkedHashMap 的实现原理?LinkedHashMap 也是基于 HashMap 实现的，不同的是它定义了一个 Entry header ，这个 header 不是放在 Table 里，它是额外独立出来的。 LinkedHashMap 通过继承 hashMap 中的 Entry , 并添加两个属性 Entry before , after , 和 header 结合起来组成一个双向链表，来实现按插入顺序或访问顺序排序。 LinkedHashMap 定义了排序模式 accessOrder ，该属性为 boolean 型变量，对于访问顺序，为 true ；对于插入顺序，则为 false 。一般情况下，不必指定排序模式，其迭代顺序即为默认为插入顺序。31.LinkedList 和 ArrayList 的区别是什么?ArrayList 是基于数组实现，LinkedList 是基于链表实现ArrayList 在查找时速度快，LinkedList 在插入与删除时更具优势32. 什么是线程？进程和线程的关系是什么？线程可定义为进程内的一个执行单位，或者定义为进程内的一个可调度实体。 在具有多线程机制的操作系统中，处理机调度的基本单位不是进程而是线程。一个进程可以有多个线程，而且至少有一个可执行线程。打个比喻: 进程好比工厂 (计算机) 里的车间，一个工厂里有多个车间 (进程) 在运转, 每个车间里有多个工人（线程）在协同工作，这些工人就可以理解为线程。线程和进程的关系:线程是进程的一个组成部分。进程的多个线程都在进程地址空间活动。系统资源是分配给进程的，线程需要资源时，系统从进程的资源里分配给线程。处理机调度的基本单位是线程。33.Thread 类中的 start() 和 run() 方法有什么区别？start() 方法被用来启动新创建的线程，而且 start() 内部调用了 run() 方法，这和直接调用 run() 方法的效果不一样。当你调用 run() 方法的时候，只会是在原来的线程中调用，没有新的线程启动，start() 方法才会启动新线程。34. 什么是线程安全?当多个线程访问某个类时，不管运行时环境采用何种调度方式或者线程将如何交替执行，并且在主调代码中不需要任何额外的同步或协同，这个类都能表现出正确的行为。线程安全的核心是 “正确性” ，也就是说当多个线程访问某个类时，能够得到预期的结果，那么就是线程安全的。35.Java 中有哪几种锁?自旋锁: 自旋锁在 JDK1.6 之后就默认开启了。基于之前的观察，共享数据的锁定状态只会持续很短的时间，为了这一小段时间而去挂起和恢复线程有点浪费，所以这里就做了一个处理，让后面请求锁的那个线程在稍等一会，但是不放弃处理器的执行时间，看看持有锁的线程能否快速释放。为了让线程等待，所以需要让线程执行一个忙循环也就是自旋操作。在 jdk6 之后，引入了自适应的自旋锁，也就是等待的时间不再固定了，而是由上一次在同一个锁上的自旋时间及锁的拥有者状态来决定偏向锁: 目的是消除数据在无竞争情况下的同步原语。进一步提升程序的运行性能。 偏向锁就是偏心的偏，意思是这个锁会偏向第一个获得他的线程，如果接下来的执行过程中，该锁没有被其他线程获取，则持有偏向锁的线程将永远不需要再进行同步。偏向锁可以提高带有同步但无竞争的程序性能，也就是说他并不一定总是对程序运行有利，如果程序中大多数的锁都是被多个不同的线程访问，那偏向模式就是多余的，在具体问题具体分析的前提下，可以考虑是否使用偏向锁。轻量级锁 : 为了减少获得锁和释放锁所带来的性能消耗，引入了“偏向锁”和“轻量级锁”，所以在 Java SE1.6 里锁一共有四种状态， 无锁状态 ， 偏向锁状态 ， 轻量级锁状态  和重量级锁状态，它会随着竞争情况逐渐升级。锁可以升级但不能降级，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。这种锁升级却不能降级的策略，目的是为了提高获得锁和释放锁的效率。36.synchronized 内置锁java 中以 synchronize 的形式, 为防止资源冲突提供了内置支持。当任务要执行被 synchronize 关键字保护的代码段时, 它将检查锁是否可用, 然后获取锁–执行代码–释放锁。所有对象都自动含有单一的锁。当一个线程正在访问一个对象的 synchronized 方法, 那么其他线程不能访问该对象的其他 synchronized 方法, 但可以访问非 synchronized 方法。因为一个对象只有一把锁, 当一个线程获取了该对象的锁之后, 其他线程无法获取该对象的锁, 所以无法访问该对象的其他 synchronized 方法。synchronized 代码块当在某个线程中执行这段代码块，该线程会获取对象 synObject 的锁，从而使得其他线程无法同时访问该代码块。 synObject 可以是 this , 代表获取当前对象的锁, 也可以是类中的一个属性, 代表获取该属性的锁。针对每一个类, 也有一个锁, 所以 static synchronize 方法可以在类的范围内防止对 static 数据的并发访问。如果一个线程执行一个对象的非 static synchronized 方法，另外一个线程需要执行这个对象所属类的 static synchronized 方法，此时不会发生互斥现象，因为访问 static synchronized 方法占用的是类锁，而访问非 static synchronized 方法占用的是对象锁，所以不存在互斥现象。对于 synchronized 方法或者 synchronized 代码块，当出现异常时，JVM 会自动释放当前线程占用的锁，因此不会由于异常导致出现死锁现象。37.ThreadLocal 理解ThreadLocal 是一个创建线程局部变量的类。通常情况下我们创建的变量, 可以被多个线程访问并修改, 通过 ThreadLocal 创建的变量只能被当前线程访问。ThreadLocal 内部实现：ThreadLocal 提供了 set 和 get 方法。set 方法会先获取当前线程, 然后用当前线程作为句柄, 获取 ThreadLocaMap 对象, 并判断该对象是否为空, 如果为空则创建一个, 并设置值, 不为空则直接设置值。ThreadLocal 的值是放入了当前线程的一个 ThreadLocalMap 实例中，所以只能在本线程中访问，其他线程无法访问。ThreadLocal 并不会导致内存泄露, 因为 ThreadLocalMap 中的 key 存储的是 ThreadLocal 实例的弱引用, 因此如果应用使用了线程池, 即便之前的线程实例处理完之后出于复用的目的依然存活, 也不会产生内存泄露。38. 为什么 wait, notify 和 notifyAll 这些方法不在 thread 类里面?这是个设计相关的问题，它考察的是面试者对现有系统和一些普遍存在但看起来不合理的事物的看法。回答这些问题的时候，你要说明为什么把这些方法放在 Object 类里是有意义的，还有不把它放在 Thread 类里的原因。一个很明显的原因是 JAVA 提供的锁是对象级的而不是线程级的，每个对象都有锁，通过线程获得。如果线程需要等待某些锁那么调用对象中的 wait() 方法就有意义了。如果 wait() 方法定义在 Thread 类中，线程正在等待的是哪个锁就不明显了。简单的说，由于 wait ， notify 和 notifyAll 都是锁级别的操作，所以把他们定义在 Object 类中因为锁属于对象。","tags":["Java"],"categories":["Java"]},{"title":"正则表达式简介","url":"/2017-05-02-regular-expression/","content":"content{:toc}正则表达式是一种特殊的字符串模式，用于匹配一组字符串。本文将介绍正则表达式的简单规则。正则表达式通用匹配符号正则表达式说明正确示例错误示例.匹配任何单个符号，包括所有字符(“..”, “a%”) – true(“..”, “a”) – false^xxx在开头匹配正则 xxx(“^a.c.”, “abcd”) – true(“^a”, “ac”) – falsexxx\\$在结尾匹配正则 xxx(“..cd\\$”, “abcd”) – true(“a\\$”, “aca”) – false[abc]能够匹配字母 a,b 或 c(“^[abc]d.”, “ad9”) – true(“[ab]x”, “cx”) – false[^abc]当 ^ 是 [] 中的第一个字符时代表取反(“[^ab][^12].”, “c3#”) – true(“[^ab][^12]“, “c2″) – false[a-e1-8]匹配 a 到 e 或者 1 到 8 之间的字符(“[a-e1-3].”, “d#”) – true(“[a-e1-3]“, “f2″) – falsexx\\yy匹配正则 xx 或者 yy(“x.\\y”, “xa”) – true(“x.\\y”, “yz”) – false正则表达式元字符正则表达式说明\\d任意数字，等同于[0-9]\\D任意非数字，等同于[^0-9]\\s任意空白字符，等同于[\\t\\n\\x0B\\f\\r]\\S任意非空白字符，等同于[^\\s]\\w任意英文字符，等同于[a-zA-Z_0-9]\\W任意非英文字符，等同于[^\\w]\\b单词边界\\B非单词边界有两种方法可以在正则表达式中像一般字符一样使用元字符。在元字符前添加反斜杠()将元字符置于 \\Q(开始引用)和 \\E(结束引用)间正则表达式量词正则表达式说明x?x 没有出现或者只出现一次X*X 出现 0 次或更多X+X 出现 1 次或更多X{n}X 正好出现 n 次X{n,}X 出席 n 次或更多X{n,m}X 出现至少 n 次但不多于 m 次原文链接： journaldev 翻译： ImportNew.com - ImportNew 读者  译文链接： http://www.importnew.com/6810.html[转载请保留原文出处、译者和译文链接。]","tags":["正则"],"categories":["正则"]},{"title":"快速排序 C++","url":"/2017-05-03-quick-sort/","content":"content{:toc} 快速排序由于排序效率在同为 O(N*logN) 的几种排序方法中效率较高，因此经常被采用，再加上快速排序思想–分治法也确实实用，因此很多软件公司的笔试面试，包括像腾讯，微软等知名 IT 公司都喜欢考这个，还有大大小的程序方面的考试如软考，考研中也常常出现快速排序的身影。 快速排序是 C.R.A.Hoare 于 1962 年提出的一种划分交换排序。它采用了一种分治的策略，通常称其为分治法  该方法的基本思想是： 先从数列中取出一个数作为基准数。 分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。 再对左右区间重复第二步，直到各区间只有一个数。 对挖坑填数进行总结 i =L; j = R; 将基准数挖出形成第一个坑 a[i]。j–由后向前找比它小的数，找到后挖出此数填前一个坑 a[i] 中。i++ 由前向后找比它大的数，找到后也挖出此数填到前一个坑 a[j] 中。 再重复执行 2，3 二步，直到 i==j，将基准数填入 a[i] 中。 照着这个总结很容易实现挖坑填数的代码： 快速排序还有很多改进版本，如随机选择基准数，区间内数据较少时直接用另的方法排序以减小递归深度。有兴趣的筒子可以再深入的研究下。 转载请标明出处，原文地址：http://blog.csdn.net/morewindows/article/details/6684558","tags":["快速排序"],"categories":["快速排序"]},{"title":"MI5 刷 MIUI 国际版","url":"/2017-04-09-MIUI-global-install/","content":"content{:toc}MIUI 是基于 Android 开发的手机系统，非常适合国人使用。然而由于国内的某些原因， MIUI 并不支持 Google 全家桶，这对谷歌应用有强烈需求的小伙伴们来说是不能忍的。MIUI 国际版很好的解决了这点不足。MIUI 国际版是自带 Google 全家桶的，不仅 MIUI 的功能大部分都有保留，而且还能享受完整的 Google 服务，岂不完美？本文将介绍小米手机（米 5）如何刷 MIUI 国际版，以及一些踩坑经历。MIUI 国际版的优点和不足MIUI 国际版优点自然不必多说，不仅可以享受完整的 Google 服务，而且所有被人诟病的 MIUI 系统广告全都消失，相当干净，这对广告过敏者是一个非常棒的选择。当然，在使用了一周后，发现一些在 国行版 很方便的功能在 国际版 进行了阉割，如自动和运营商校准流量（仍能显示已使用流量），小米钱包（MiPay，公交卡）下方方法已解决 ， 小米应用商店(底部有旧版 apk) 等都因为国界问题消失了。如果您很依赖上述功能，那么在刷国际版之前一定要三思啊！！当然你也可以通过在国行版中安装 Google 框架服务 使用 Google 套件，但是因为 Android 升级到了 7.0 ，博主试了好多种方法都没有成功，无奈只好安装 MIUI 国际版啦…刷机教程 MIUI 国际版官方其实是有官方教程的，  链接如下 ， 一共有三种方法，在这里因为安装包更新，recovery 系统更新等原因，前两种方法楼主都没有尝试成功，于是只好使用第三种  线刷法。首先需要下载线刷包。因为线刷包和卡刷包不同，不太好找，博主找线刷包的链接找了好久，可算被我找到了~~ 链接如下， 该链接附带线刷法教程，这里简单翻译一下。1. 解除 BootLoader 锁目前，小米全线手机已经加上了 BL 锁，必须解除 BL 锁才能刷机。想要解除 BL 锁可以参考 这个帖子，写的很详细。2. 下载 MiFlash 刷机工具。解压后点击 MiFlash.exe 安装。中间可能会出现提示条，始终点击继续安装就可以正常安装完毕。3. 下载线刷包，链接同 上方教程链接 ，下载对应手机版本的线刷包并解压。注意  不要 在官网的 Download 里下载。4. 关机。同时按住 音量 - 和 电源键  , 进入 Fastboot 模式，界面是一个  正在修安卓机器人的米兔。5. 用数据线连结电脑，将解压后的路径复制到 MiFlash 的路径中，点击刷新，列表中会出现你的设备。注意一定要选中底下的 清除所有数据！！（都刷机了就别抱幻想保留用户数据了。。博主当时就选择的保留用户数据，结果卡在开机界面一个多小时，后来没办法进入 Recovery 模式 清除所有数据，马上就开机了）然后点击刷机就成功了。因为刷完机后只能使用 Google Play 商店，所以建议之前先准备好 VPN 或 Shadowsocks 等翻墙软件。使用中的一些问题 Google Play 商店下载应用始终显示 正在等待连接 WLAN 博主在使用 Google Play 商店时发现下载应用时出现 正在等待连接 WLAN 提示。。然而我已经连上 WLAN 了。。解决办法是 设置  -&gt;  更多应用  -&gt; Google Play 商店 -&gt;  卸载更新 。 之后再打开 Google Play 商店 就可以下载软件了。不过过几天下载就又提示  正在等待连接 WLAN，还需要重复上述操作。这应该是系统 Bug，应该会解决的。MIUI 国际版无法使用 小米钱包（MiPay，公交卡）无需 Root 权限，只需要安装两个 apk 就可以啦。 下载链接小米应用商店旧版下载  旧版小米应用商店 下载链接不过由于是旧版，风格与 MIUI8 格格不入，所以推荐 酷安 应用商店，很全，不流氓。","tags":["MIUI"],"categories":["MIUI"]},{"title":"计算机网络面试常考点 -- 参照 谢希仁 (第 6 版)","url":"/2017-04-01-computer-network/","content":"content{:toc}本篇计算机网络面试常考点，参照《计算机网络（第 6 版） 谢希仁》教材，希望对大家有所帮助。这是我总结的两个知识点，对于期末复习的小伙伴很有帮助。知识点 1知识点 2下文主要写的是在笔试或面试中常问的知识点OSI，TCP/IP，五层协议的体系结构，以及各层协议OSI 分层（7 层）：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。TCP/IP 分层（4 层）：网络接口层、网际层、运输层、应用层。五层协议（5 层）：物理层、数据链路层、网络层、运输层、应用层。每一层的协议如下：物理层：RJ45、CLOCK、IEEE802.3    （中继器，集线器，网关）数据链路：PPP、FR、HDLC、VLAN、MAC  （网桥，交换机）网络层：IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP、 （路由器）传输层：TCP、UDP、SPX会话层：NFS、SQL、NETBIOS、RPC表示层：JPEG、MPEG、ASII应用层：FTP、DNS、Telnet、SMTP、HTTP、WWW、NFS每一层的作用如下：物理层：通过媒介传输比特, 确定机械及电气规范（比特 Bit）数据链路层：将比特组装成帧和点到点的传递（帧 Frame）网络层：负责数据包从源到宿的传递和网际互连（包 Packet）传输层：提供端到端的可靠报文传递和错误恢复（段 Segment）会话层：建立、管理和终止会话（会话协议数据单元 SPDU）表示层：对数据进行翻译、加密和压缩（表示协议数据单元 PPDU）应用层：允许访问 OSI 环境的手段（应用协议数据单元 APDU）IP 地址的分类类别最大网络数IP 地址范围最大主机数A126（2^7-2)0.0.0.0-127.255.255.25516777214B16384(2^14)128.0.0.0-191.255.255.25565534C2097152(2^21)192.0.0.0-223.255.255.255254A 类地址：以 0 开头；B 类地址：以 10 开头；C 类地址：以 110 开头；10.0.0.0~10.255.255.255， 172.16.0.0~172.31.255.255， 192.168.0.0~192.168.255.255。（Internet 上保留地址用于内部）IP 地址与子网掩码相与得到主机号ARP 是地址解析协议，简单语言解释一下工作原理。首先，每个主机都会在自己的 ARP 缓冲区中建立一个 ARP 列表，以表示 IP 地址和 MAC 地址之间的对应关系。当源主机要发送数据时，首先检查 ARP 列表中是否有对应 IP 地址的目的主机的 MAC 地址，如果有，则直接发送数据，如果没有，就向本网段的所有主机发送 ARP 数据包，该数据包包括的内容有：源主机 IP 地址，源主机 MAC 地址，目的主机的 IP 地址。当本网络的所有主机收到该 ARP 数据包时，首先检查数据包中的 IP 地址是否是自己的 IP 地址，如果不是，则忽略该数据包，如果是，则首先从数据包中取出源主机的 IP 和 MAC 地址写入到 ARP 列表中，如果已经存在，则覆盖，然后将自己的 MAC 地址写入 ARP 响应包中，告诉源主机自己是它想要找的 MAC 地址。源主机收到 ARP 响应包后。将目的主机的 IP 和 MAC 地址写入 ARP 列表，并利用此信息发送数据。如果源主机一直没有收到 ARP 响应数据包，表示 ARP 查询失败。广播发送 ARP 请求，单播发送 ARP 响应。各种协议ICMP 协议： 因特网控制报文协议。它是 TCP/IP 协议族的一个子协议，用于在 IP 主机、路由器之间传递控制消息。TFTP 协议： 是 TCP/IP 协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，提供不复杂、开销不大的文件传输服务。HTTP 协议： 超文本传输协议，是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。DHCP 协议： 动态主机配置协议，是一种让系统得以连接到网络上，并获取所需要的配置参数手段。NAT 协议： 网络地址转换属接入广域网 (WAN) 技术，是一种将私有（保留）地址转化为合法 IP 地址的转换技术，DHCP 协议： 一个局域网的网络协议，使用 UDP 协议工作，用途：给内部网络或网络服务供应商自动分配 IP 地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段。描述：RARPRARP 是逆地址解析协议，作用是完成硬件地址到 IP 地址的映射，主要用于无盘工作站，因为给无盘工作站配置的 IP 地址不能保存。工作流程：在网络中配置一台 RARP 服务器，里面保存着 IP 地址和 MAC 地址的映射关系，当无盘工作站启动后，就封装一个 RARP 数据包，里面有其 MAC 地址，然后广播到网络上去，当服务器收到请求包后，就查找对应的 MAC 地址的 IP 地址装入响应报文中发回给请求者。因为需要广播请求报文，因此 RARP 只能用于具有广播能力的网络。TCP 三次握手和四次挥手的全过程  三次握手：第一次握手：客户端发送 syn 包 (syn=x) 到服务器，并进入 SYN_SEND 状态，等待服务器确认；第二次握手：服务器收到 syn 包，必须确认客户的 SYN （ack=x+1） ，同时自己也发送一个 SYN 包 （syn=y） ，即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态；第三次握手：客户端收到服务器的 SYN＋ACK 包，向服务器发送确认包 ACK (ack=y+1) ，此包发送完毕，客户端和服务器进入 ESTABLISHED 状态，完成三次握手。握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP 连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。四次握手与建立连接的 三次握手 类似，断开一个 TCP 连接则需要 四次握手 。第一次挥手：主动关闭方发送一个 FIN ，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在 fin 包之前发送出去的数据，如果没有收到对应的 ack 确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可以接受数据。第二次挥手：被动关闭方收到 FIN 包后，发送一个 ACK 给对方，确认序号为收到序号 +1 （与 SYN 相同，一个 FIN 占用一个序号）。第三次挥手：被动关闭方发送一个 FIN ，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。第四次挥手：主动关闭方收到 FIN 后，发送一个 ACK 给被动关闭方，确认序号为收到序号 +1，至此，完成四次挥手。在浏览器中输入 www.baidu.com 后执行的全部过程客户端浏览器通过 DNS 解析到 www.baidu.com 的 IP 地址 220.181.27.48 ，通过这个 IP 地址找到客户端到服务器的路径。客户端浏览器发起一个 HTTP 会话到 220.161.27.48 ，然后通过 TCP 进行封装数据包，输入到网络层。在客户端的传输层，把 HTTP 会话请求分成报文段，添加源和目的端口，如服务器使用 80 端口监听客户端的请求，客户端由系统随机选择一个端口如 5000 ，与服务器进行交换，服务器把相应的请求返回给客户端的 5000 端口。然后使用 IP 层的 IP 地址查找目的端。客户端的网络层不用关系应用层或者传输层的东西，主要做的是通过查找路由表确定如何到达服务器，期间可能经过多个路由器，这些都是由路由器来完成的工作，我不作过多的描述，无非就是通过查找路由表决定通过那个路径到达服务器。客户端的链路层，包通过链路层发送到路由器，通过邻居协议查找给定 IP 地址的 MAC 地址，然后发送 ARP 请求查找目的地址，如果得到回应后就可以使用 ARP 的请求应答交换的 IP 数据包现在就可以传输了，然后发送 IP 数据包到达服务器的地址。TCP 和 UDP 的区别–TCPUDP连接性面向连接无连接可靠性可靠不可靠报文面向字节流面向报文应用场合传输大量的数据少量数据速度慢快流量控制有无拥塞控制有无TCP 对应的协议和 UDP 对应的协议TCP 对应的协议：（1） FTP：定义了文件传输协议，使用 21 端口。（2） Telnet：一种用于远程登陆的端口，使用 23 端口，用户可以以自己的身份远程连接到计算机上，可提供基于 DOS 模式下的通信服务。（3） SMTP：邮件传送协议，用于发送邮件。服务器开放的是 25 端口。（4） POP3：它是和 SMTP 对应， POP3 用于接收邮件。POP3 协议所用的是 110 端口。（5）HTTP：是从 Web 服务器传输超文本到本地浏览器的传送协议，使用 80 端口。UDP 对应的协议：（1） DNS：用于域名解析服务，将域名地址转换为 IP 地址。 DNS 用的是 53 端口。（2） SNMP：简单网络管理协议，使用 161 端口，是用来管理网络设备的。由于网络设备很多，无连接的服务就体现出其优势。（3） TFTP (Trival File Transfer Protocal)，简单文件传输协议，该协议在熟知端口 69 上使用 UDP 服务。DNS 域名系统，简单描述其工作原理。当 DNS 客户机需要在程序中使用名称时，它会查询 DNS 服务器来解析该名称。客户机发送的每条查询信息包括三条信息，包括：指定的 DNS 域名，指定的查询类型，DNS 域名的指定类别。基于 UDP 服务，端口 53 。 该应用一般不直接为用户使用，而是为其他应用服务，如 HTTP， SMTP 等在其中需要完成主机名到 IP 地址的转换。面向连接和非面向连接的服务的特点是什么？面向连接的服务，通信双方在进行通信之前，要先在双方建立起一个完整的可以彼此沟通的通道，在通信过程中，整个连接的情况一直可以被实时地监控和管理。非面向连接的服务，不需要预先建立一个联络两个通信节点的连接，需要通信的时候，发送节点就可以往网络上发送信息，让信息自主地在网络上去传，一般在传输的过程中不再加以监控。TCP 的三次握手过程？为什么会采用三次握手，若采用二次握手可以吗？答：建立连接的过程是利用客户服务器模式，假设主机 A 为客户端，主机 B 为服务器端。（1）TCP 的三次握手过程：主机 A 向 B 发送连接请求；主机 B 对收到的主机 A 的报文段进行确认；主机 A 再次对主机 B 的确认进行确认。（2）采用三次握手是为了防止失效的连接请求报文段突然又传送到主机 B ，因而产生错误。失效的连接请求报文段是指：主机 A 发出的连接请求没有收到主机 B 的确认，于是经过一段时间后，主机 A 又重新向主机 B 发送连接请求，且建立成功，顺序完成数据传输。考虑这样一种特殊情况，主机 A 第一次发送的连接请求并没有丢失，而是因为网络节点导致延迟达到主机 B ，主机 B 以为是主机 A 又发起的新连接，于是主机 B 同意连接，并向主机 A 发回确认，但是此时主机 A 根本不会理会，主机 B 就一直在等待主机 A 发送数据，导致主机 B 的资源浪费。（3）采用两次握手不行，原因就是上面说的实效的连接请求的特殊情况。端口及对应的服务服务端口号服务端口号FTP21SSH22telnet23SMTP25Domain(域名服务器)53HTTP80POP3110NTP（网络时间协议）123MySQL 数据库服务3306Shell 或 cmd514POP-2109SQL Server1433了解交换机、路由器、网关的概念，并知道各自的用途1）交换机在计算机网络系统中，交换机是针对共享工作模式的弱点而推出的。交换机拥有一条高带宽的背部总线和内部交换矩阵。交换机的所有的端口都挂接在这条背 部总线上，当控制电路收到数据包以后，处理端口会查找内存中的地址对照表以确定目的 MAC （网卡的硬件地址）的 NIC （网卡）挂接在哪个端口上，通过内部 交换矩阵迅速将数据包传送到目的端口。目的 MAC 若不存在，交换机才广播到所有的端口，接收端口回应后交换机会“学习”新的地址，并把它添加入内部地址表中。交换机工作于 OSI 参考模型的第二层，即数据链路层。交换机内部的 CPU 会在每个端口成功连接时，通过 ARP 协议学习它的 MAC 地址，保存成一张 ARP 表。在今后的通讯中，发往该 MAC 地址的数据包将仅送往其对应的端口，而不是所有的端口。因此，交换机可用于划分数据链路层广播，即冲突域；但它不能划分网络层广播，即广播域。交换机被广泛应用于二层网络交换，俗称 二层交换机 。交换机的种类有：二层交换机、三层交换机、四层交换机、七层交换机分别工作在 OSI 七层模型中的第二层、第三层、第四层盒第七层，并因此而得名。2）路由器路由器（Router）是一种计算机网络设备，提供了路由与转送两种重要机制，可以决定数据包从来源端到目的端所经过 的路由路径（host 到 host 之间的传输路径），这个过程称为路由；将路由器输入端的数据包移送至适当的路由器输出端(在路由器内部进行)，这称为转 送。路由工作在 OSI 模型的第三层 即网络层，例如网际协议。路由器的一个作用是连通不同的网络，另一个作用是选择信息传送的线路。 路由器与交换器的差别，路由器是属于 OSI 第三层的产品，交换器是 OSI 第二层的产品(这里特指二层交换机)。3）网关网关  （Gateway），  网关 顾名思义就是连接两个网络的设备，区别于路由器（由于历史的原因，许多有关 TCP/IP 的文献曾经把网络层使用的路由器（Router）称为网关，在今天很多局域网采用都是路由来接入网络，因此现在通常指的网关就是路由器的 IP），经常在家 庭中或者小型企业网络中使用，用于连接局域网和 Internet。 网关也经常指把一种协议转成另一种协议的设备，比如语音网关。在传统 TCP/IP 术语中，网络设备只分成两种，一种为网关（gateway），另一种为主机（host）。网关能在网络间转递数据包，但主机不能转送数据包。在主机（又称终端系统，end system）中，数据包需经过 TCP/IP 四层协议处理，但是在网关（又称中介系 统，intermediate system）只需要到达网际层（Internet layer），决定路径之后就可以转送。在当时，网关 （gateway）与路由器（router）还没有区别。在现代网络术语中，网关（gateway）与路由器（router）的定义不同。网关（gateway）能在不同协议间移动数据，而路由器（router）是在不同网络间移动数据，相当于传统所说的 IP 网关（IP gateway）。网关  是连接两个网络的设备，对于语音网关来说，他可以连接 PSTN 网络和以太网，这就相当于 VOIP ，把不同电话中的模拟信号通过网关而转换成数字信号，而且加入协议再去传输。在到了接收端的时候再通过  网关 还原成模拟的电话信号，最后才能在电话机上听到。对于以太网中的 网关  只能转发三层以上数据包，这一点和路由是一样的。而不同的是  网关 中并没有路由表，他只能按照预先设定的不同网段来进行转发。网关最重要的一点就是端口映射，子网内用户在外网看来只是外网的 IP 地址对应着不同的端口，这样看来就会保护子网内的用户。子网掩码及网络划分  随着互连网应用的不断扩大，原先的 IPv4 的弊端也逐渐暴露出来，即网络号占位太多，而主机号位太少，所以其能提供的主机地址也越来越稀缺，目前除了使用 NAT 在企业内部利用保留地址自行分配以外，通常都对一个高类别的 IP 地址进行再划分，以形成多个子网，提供给不同规模的用户群使用。这里主要是为了在网络分段情况下有效地利用 IP 地址，通过对主机号的高位部分取作为子网号，从通常的网络位界限中扩展或压缩子网掩码，用来创建某类地址的更多子网。但创建更多的子网时，在每个子网上的可用主机地址数目会比原先减少。什么是子网掩码？子网掩码是标志两个 IP 地址是否同属于一个子网的，也是 32 位二进制地址，其每一个为 1 代表该位是网络位，为 0 代表主机位。它和 IP 地址一样也是使用点式十进制来表示的。如果两个 IP 地址在子网掩码的按位与的计算下所得结果相同，即表明它们共属于同一子网中。在计算子网掩码时，我们要注意 IP 地址中的保留地址，即“0”地址和广播地址，它们是指主机地址或网络地址全为“0”或“1”时的 IP 地址，它们代表着本网络地址和广播地址，一般是不能被计算在内的。子网掩码的计算：对于无须再划分成子网的 IP 地址来说，其子网掩码非常简单，即按照其定义即可写出：如某 B 类 IP 地址为 10.12.3.0 ，无须再分割子网，则该 IP 地址的子网掩码 255.255.0.0 。如果它是一个 C 类地址，则其子网掩码为 255.255.255.0 。其它类推，不再详述。下面我们关键要介绍的是一个 IP 地址，还需要将其高位主机位再作为划分出的子网网络号，剩下的是每个子网的主机号，这时该如何进行每个子网的掩码计算。下面总结一下有关子网掩码和网络划分常见的面试考题：1）利用子网数来计算在求子网掩码之前必须先搞清楚要划分的子网数目，以及每个子网内的所需主机数目。(1) 将子网数目转化为二进制来表示;如欲将 B 类 IP 地址 168.195.0.0 划分成 27 个子网：27 = 11011；(2) 取得该二进制的位数，为 N ；该二进制为五位数，N = 5(3) 取得该 IP 地址的类子网掩码，将其主机地址部分的的前 N 位，置 1 ，即得出该 IP 地址划分子网的子网掩码。将 B 类地址的子网掩码 255.255.0.0 的主机地址前 5 位，置 1，得到 255.255.248.02）利用主机数来计算如欲将 B 类 IP 地址 168.195.0.0 划分成若干子网，每个子网内有主机 700 台：(1) 将主机数目转化为二进制来表示；700 = 1010111100；(2) 如果主机数小于或等于 254（注意去掉保留的两个 IP 地址），则取得该主机的二进制位数，为 N，这里肯定 N &lt; 8。如果大于 254，则 N &gt; 8 ，这就是说主机地址将占据不止 8 位；该二进制为十位数，N=10；(3) 使用 255.255.255.255 来将该类 IP 地址的主机地址位数全部置 1 ，然后从后向前的将 N 位全部置为 0，即为子网掩码值。将该 B 类地址的子网掩码 255.255.0.0 的主机地址全部置 1，得到 255.255.255.255，然后再从后向前将后 10 位置 0, 即为： 11111111.11111111.11111100.00000000 ，即 255.255.252.0 。这就是该欲划分成主机为 700 台的 B 类 IP 地址 168.195.0.0 的子网掩码。3）还有一种题型，要你根据每个网络的主机数量进行子网地址的规划和计算子网掩码。这也可按上述原则进行计算。比如一个子网有 10 台主机，那么对于这个子网需要的 IP 地址是：10 ＋ 1 ＋ 1 ＋ 1 ＝ 13注意：加的第一个 1 是指这个网络连接时所需的网关地址，接着的两个 1 分别是指 网络地址  和  广播地址 。因为 13 小于 16 （ 16 等于 2 的 4 次方），所以主机位为 4 位。而 256 － 16 ＝ 240，所以该子网掩码为 255.255.255.240 。如果一个子网有 14 台主机，不少人常犯的错误是：依然分配具有 16 个地址空间的子网，而忘记了给网关分配地址。这样就错误了，因为 14 ＋ 1 ＋ 1 ＋ 1 ＝ 17，17 大于 16，所以我们只能分配具有 32 个地址（32 等于 2 的 5 次方）空间的子网。这时子网掩码为： 255.255.255.224。","tags":["计算机网络"],"categories":["计算机网络"]},{"title":"MyBatis 的简单案例","url":"/2017-02-14-MyBatis-demo/","content":"content{:toc}一个稍复杂的 MyBatis 连结数据库的案例，涉及多表查询，以及稍复杂的 SQL 语句共三张表：学生表 student，班级表 class，分数表 score案例为1. 查询 张三  的  数学  成绩2. 查询  三班  全体成员成绩3. 查询  数学  第 4，5，6 名的  学生姓名导入 jar 包  博主使用的是 MySQL 数据库，所以需要导一些 jar 包新建一个 java project , 在工程下新建文件夹，命名为 lib ，将MySQL 的驱动文件 和 MyBatis 的驱动文件 复制到该文件夹，并右键 Build Path -&gt; Add to Build Path 。这时发现在工程里出现 Referenced Libraries ，里面有和刚才同名的 jar 文件。创建数据库  建表  建表的 sql 语句如下(为了方便没有外键)插入数据  插入数据的 sql 语句如下配置文件连接数据库 db.properties 首先配置连结数据库文件，在 src 下新建文件，名称为 db.properties ，内容如下，其中 20170214 为数据库名称，需要改成你自己的数据库名字。SqlMapConfig.xml在 src 下新建一个 SqlMapConfig.xml 文件，内容为：新建 pojo 对象类  在 src 下新建一个包，包名为 pojo，然后根据数据库列名新建 student, class, score 三个类，注意列名与对象名应一致，并进行 set, get 方法Class.javaStudent.javaScore.java配置接口映射StudentMapper.java新建 SQL 语句映射文件 StudentMapper.xml由 SQL 语句得知这是两个表的查询语句  传入参数有 studentname, object,传出参数有 a.studentname, b.object, b.score。以上数据因为都是从两个表中获取，所以需要再写两个 pojo 类：FirstParameter.java 和 FirstResult.javaFirstParameter.javaFirstResult.java测试类","tags":["MyBatis"],"categories":["MyBatis"]},{"title":"Markdown 简明语法手册","url":"/2017-02-07-markdown-introduction/","content":"content{:toc}Markdown 是文本  在此，我们总结 Markdown 的优点如下：纯文本，所以兼容性极强，可以用所有文本编辑器打开。让你专注于文字而不是排版。格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。Markdown 的标记语法有极好的可读性。粗体，斜体，删除线  代码如下：显示效果：粗体斜体删除线分级标题  可以行首加井号表示不同级别的标题 (H1-H6)，代码如下：因为该代码会加入目录里，所以不做演示了。外链接  代码如下：显示效果：本人博客  本人博客链接后的 title 需要用引号括起来，可以选填，效果是鼠标放到链接上会有提示。如果安装了 MarkdownExtended 插件的话，可以使用 mdl + tab 键需要注意的是，使用 Markdown 方法，默认是在本网页打开新网页，如果想在新的标签页上打开链接，只能使用 HTML 语言实现，代码如下：显示效果：本人博客插入图片  普通 markdown 语法  代码如下：显示效果：如果安装了 MarkdownExtended 插件的话，可以使用 mdi + tab 键需要注意的是，使用 Markdown 方法，图片将不能调整大小，有以下两种方式可以调整大小HTML 语法  使用 HTML 语言实现，代码如下：显示效果：使用支持参数的图床  可以使用支持参数的图床，例如七牛，可参考  七牛图片基本处理。例如代码为：显示效果：imageView2/2/w/200 的意义为 宽度固定为 200px，高度等比缩小。代码块  行内代码  用反引号将短代码框住，代码如下：显示效果：这是 行内代码多行代码  多行代码有两种表示方式。一种是用前后两个 ``` 把代码包围起来，并在第一行后面标注哪种语言，即可实现代码高亮。注意 ` 不是单引号而是左上角的 ESC 下面~ 中的 `代码如下：显示效果：另一种是把代码选中后按一下 tab 键，缺点是无法识别代码语言，无法高亮。列表  无序列表  使用 *，+，- 任意一种表示无序列表，代码如下：显示效果：无序列表项 一无序列表项 二无序列表项 三无序列表项 四无序列表项 五无序列表项 六无序列表项 七有序列表  代码如下：显示效果：有序列表项 一有序列表项 二有序列表项 三引用  代码如下：显示效果：引用文字 一表格  第一行为表头，第二行分隔表头和主体部分，默认 - 左对齐， :-: 居中对齐， -: 右对齐，第三行开始每一行为一个表格行，代码如下：显示效果：这是第一列 左对齐这是第二列 中间对齐这是第三列 右对齐小姜男99小宫女100小刘男98分割线  三个以上的星号、减号、底线线来建立一个分隔线，效果相同，代码如下：显示效果：上下角标&lt;sub&gt; 和 &lt;/sub&gt; 中间的为下角标&lt;sup&gt; 和 &lt;/sup&gt; 中间的为上角标显示效果：H2OE=mc2也可以用下面介绍的 LaTex 公式，更方便。LaTeX 公式 $ 表示行内公式： 代码：显示效果：质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。$$ 表示整行公式：代码：显示效果：$$\\sum_{i=1}^n a_i=0$$$$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2$$$$\\sum^{j-1}{k=0}{\\widehat{\\gamma}{kj} z_k}$$查看 Sublime 如何配置 LaTex 可参考 我写的这篇文章以上。","tags":["Markdown"],"categories":["Markdown"]},{"title":"jQuery 的基本使用方法","url":"/2017-02-07-jquery/","content":"content{:toc}jQuery 是一个 JavaScript 库，极大地简化了 JavaScript 编程。本文对 jQuery 知识点进行总结，更多的知识点请查看 官方文档 或 W3School 教程推荐一个 HTML 的编辑器 HBuilder , 当然 sublime 也是极好的。安装 jQuery可以通过多种方法在网页中添加 jQuery。 您可以使用以下方法：从 jquery.com 下载 jQuery 库从 CDN 中载入 jQuery下载 jQuery将下载的文件放在网页的同一目录下，并用 &lt;script&gt; 标签引用他，就可以使用 jQuery。CDN 加载  国内网站推荐百度国外网站推荐谷歌JavaScript 和 jQuery 执行时方法的区别————window.onload$(document).ready()执行时机必须等待网页中所有的内容加载完毕后（包括图片）才能执行网页中所有 DOM 结构绘制完毕后就执行，可能 DOM 元素关联的东西并没有加载完编写个数不能同时编写多个能同时编写多个简化写法无$(document).ready(function(){}); 可以简写成 $(function(){});选择网页元素jQuery 的基本设计和主要用法，就是”选择某个网页元素，然后对其进行某种操作”。这是它区别于其他函数库的根本特点。使用 jQuery 的第一步，往往就是将一个选择表达式，放进构造函数 jQuery()（简写为$），然后得到被选中的元素。选择表达式可以是 CSS 选择器：也可以是 jQuery 特有的表达式：改变结果集  如果选中多个元素，jQuery 提供过滤器，可以缩小结果集：有时候，我们需要从结果集出发，移动到附近的相关元素，jQuery 也提供了在 DOM 树上的移动方法：链式操作  选中网页元素以后，就可以对它进行某种操作。jQuery 允许将所有操作连接在一起，以链条的形式写出来，比如：$(&#39;div&#39;).find(&#39;h3&#39;).eq(2).html(&#39;Hello&#39;);分解开来，就是下面这样：这是 jQuery 最令人称道、最方便的特点。它的原理在于每一步的 jQuery 操作，返回的都是一个 jQuery 对象，所以不同操作可以连在一起。jQuery 还提供了.end()方法，使得结果集可以后退一步, 回到最近的一个”破坏性”操作之前。如果之前没有破坏性操作，则返回一个空集。所谓的”破坏性”就是指任何改变所匹配的 jQuery 元素的操作。示例描述：选取所有的 p 元素，查找并选取 span 子元素，然后再回过来选取 p 元素HTML 代码:jQuery 代码:结果:元素的操作：取值和赋值  操作网页元素，最常见的需求是取得它们的值，或者对它们进行赋值。jQuery 使用同一个函数，来完成取值（getter）和赋值（setter）。到底是取值还是赋值，由函数的参数决定。常见的取值和赋值函数如下：需要注意的是，如果结果集包含多个元素，那么赋值的时候，将对其中所有的元素赋值；取值的时候，则是只取出第一个元素的值（.text()例外，它取出所有元素的 text 内容）。元素的操作：移动.insertAfter()，把 div 元素移动 p 元素后面：$(&#39;div&#39;).insertAfter(&#39;p&#39;);.after()，把 p 元素加到 div 元素前面：　$(&#39;p&#39;).after(&#39;div&#39;);使用这种模式的操作方法，一共有四对(1) .after():描述:在所有段落中后插入一个 jQuery 对象(类似于一个 DOM 元素数组)。HTML 代码:jQuery 代码:结果:(2) .insertAfter()：描述:把所有段落插入到一个元素之后。与 $(&quot;#foo&quot;).after(&quot;p&quot;) 相同HTML 代码:jQuery 代码:结果:(3) .before()：描述:在所有段落中前插入一个 jQuery 对象(类似于一个 DOM 元素数组)。HTML 代码:jQuery 代码:结果:(4) .append()：描述：向所有段落中追加一些 HTML 标记。HTML 代码:jQuery 代码:结果:(5) .appendTo()描述：新建段落追加 div 中并加上一个 classHTML 代码:jQuery 代码:结果:(6) .prepend()描述：向所有段落中前置一个 jQuery 对象(类似于一个 DOM 元素数组)。HTML 代码:jQuery 代码:结果:(7) .prependTo()描述：把所有段落追加到 ID 值为 foo 的元素中。HTML 代码:jQuery 代码:结果:元素的操作：复制、删除和创建  复制元素使用.clone()删除元素使用.remove()和.detach()。两者的区别在于，前者不保留被删除元素的事件，后者保留，有利于重新插入文档时使用。清空元素内容（但是不删除该元素）使用.empty()。创建新元素的方法非常简单，只要把新元素直接传入 jQuery 的构造函数就行了：工具方法  除了对选中的元素进行操作以外，jQuery 还提供一些工具方法（utility），不必选中元素，就可以直接使用。常用的工具方法有以下几种：事件操作jQuery 可以对网页元素绑定事件。根据不同的事件，运行相应的函数。目前，jQuery 主要支持以下事件：以上这些事件在 jQuery 内部，都是.bind()的便捷方式。使用.bind()可以更灵活地控制事件，比如为多个事件绑定同一个函数：有时，你只想让事件运行一次，这时可以使用.one()方法。unbind()用来解除事件绑定。所有的事件处理函数，都可以接受一个事件对象 (event object) 作为参数，比如下面例子中的 e：这个事件对象有一些很有用的属性和方法：在事件处理函数中，可以用 this 关键字，返回事件针对的 DOM 元素：有两种方法，可以自动触发一个事件。一种是直接使用事件函数，另一种是使用.trigger()或.triggerHandler()。特殊效果jQuery 允许对象呈现某些特殊效果。常用的特殊效果如下：除了.show()和.hide()，所有其他特效的默认执行时间都是 400ms(毫秒)，但是你可以改变这个设置。在特效结束后，可以指定执行某个函数。更复杂的特效，可以用.animate()自定义。.stop()和.delay()用来停止或延缓特效的执行。$.fx.off 如果设置为 true，则关闭所有网页特效。几个常见的筛选选择器：filter()：筛选出与指定表达式匹配的元素集合。这个方法用于缩小匹配的范围。用逗号分隔多个表达式描述：保留子元素中不含有 ol 的元素。HTML 代码:jQuery 代码:结果:silce()：选取一个匹配的子集描述：选择第一个 p 元素HTML 代码:jQuery 代码:结果:","tags":["jQuery"],"categories":["jQuery"]},{"title":"本地配置 Jekyll","url":"/2017-01-28-jekyll-install/","content":"本文主要是为了让博客系统在本地跑起来，如果不想在本地运行，可以无视本文，但我还是强烈建议试着先在本地跑起来，没有什么问题后再推送的 GitHub 上。Jekyll 是一个开源的博客生成工具，类似 WordPress。但与之不同的是，jekyll 只生成静态网页，并不需要数据库支持。通常配合第三方评论系统使用，例如 有言 , Disqus（由于众所周知的原因上不去）,  多说（已倒闭）。GitHub Pages 原生支持 jekyll，而且可以绑定自己的域名。关于 GithubPages 绑定自定义域名 可以参考这篇文章。安装 RubyJekyll 是用 ruby 语言编写的，所以我们首先要在 windows 上装好 ruby 环境。下载 RubyInstaller注意选择对应的操作系统版本为 64 位 还是 32 位。安装 Ruby记得要勾选 Add Ruby executables to your PATH，其作用是绑定 ruby 环境变量，另外安装目录不可以包含空格。下载 DevKit与 RubyInstller 同一链接，页面稍下方有“DEVELOPMENT KIT”， 注意：DevKit 版本要与上面的 ruby 版本是匹配的。安装 DevKit解压 DevKit 完成后打开 CMD 窗口，回到 Devkit 根目录，输入：返回的分别是安装 Jekyll更换源  无翻墙软件，可使用国内淘宝提供的源有翻墙软件，可以使用如下源安装 Jekyll安装 paginate使用 jekyll网上找个模板好看的 github pages 的博客， Clone 下来。Clone 有两种方法第一种是 https 方法，通过直接输入账号密码的格式提交代码；第二种是 ssh 的方式，需要提前配置 SSH ，之后可直接 push 代码。Git 的基本操作参考 git 介绍 github 的基本配置 这篇文章。启动 jekyll 服务提交文章","tags":["Jekyll"],"categories":["瞎折腾"]},{"title":"如何将 Matplotlib 图像展示在 web 页面上","url":"/2018-08-04-matplotlib-html/","content":"我们知道 Matplotlib 是一个非常强大的 Python 画图工具，其不仅可以画条形图、饼状图等统计图，也可以画以像素构成的图像。MATLAB 能画的图像，Matplotlib 通过 Python 语言也能画。做项目的时候遇到一个需求，就是如何将网页后端生成的 Matplotlib 图像展示在前端页面上。尝试使用了如下几种方法，在此记录一下。使用 mpld3 包  这是一个相对简单并且改动较小的方法，只需要在后端改一下 import 就可以，具体使用方法参照  官方教程。但是实现的时候遇到了一些问题不适合大数据可视化的处理，当图像超过几千个元素时，前端展示的图像会有一定的模糊；使用时必须联网；一些 Matplotlib 的方法在 mpld3 中缺失。保存在网页服务器的 static 目录下  该方法易于实现，首先将网页后端的图像保存到后端服务器的 static 目录下，前端再从 static 目录下读取图片进行展示。但是依然存在一些问题无法判断响应时间。因为后端生成图片的时间未知，所以只能采用在前端延时展示，这样也浪费时间资源；前后端分离的项目中，前端访问后端 static 目录路径时不方便。使用请求的方式将图像传到前端  该方法将图像以请求的方式传到前端，前端只需将 \\ 标签的 src 属性赋值为后端的请求路径即可。该方法可以在后端生成完图像后再发送给前端，无需设置延时获取图像，但也遇到一些问题项目中后端获取前端的请求后需要返回两个请求，一个是表格数据，一个是图像，这样代码就比较冗余；由于 Matplotlib 生成的图像有白边，而只有加上 fig.savefig(&#39;a.png&#39;, bbox_inches=&#39;tight&#39;, pad_inches=0.0) 这句代码时才能去除白边，而发送请求只能发送 fig ，所以前端显示的图像有白边。将图像以 Base64 格式发送给前端  该方法也是本人最终采取的方法。原理是在调用 savefig 方法时不存储为图像，而是存储为二进制格式，二进制格式再转化为 Base64 格式，并将其发送给前端，前端只需要将 \\ 标签的 src 属性赋值为后端发送的 Base64 字符串即可。后端代码如下所示将最后一行的 src 传到前端即可展示。该方法优点如下该方法可以在后端生成完图像后再发送给前端，无需设置延时获取图像；该方法只需要往前端发送一次请求，代码更加精简；调用了 savefig 方法，可以去除白边。所以几乎解决了之前方法的所有痛点","tags":["Django","Matplotlib","python"],"categories":["Matplotlib"]},{"title":"使用 Markdown + MathJax 在博客里插入数学公式","url":"/2017-03-03-markdown-mathjax/","content":"content{:toc}在书写数值计算类文章，难免需要插入复杂的数学公式。一种是用图片在网页上展示，另外一种是使用 MathJax 来展示复杂的数学公式。它直接使用 Javascript 使用矢量字库或 SVG 文件来显示数学公式。优点是效果好，比如在 Retina 屏幕上也不会变得模糊。并且可以直接把公式写在 Markdown 文章里。本文介绍在 Sublime 中使用 MathJax 在 Markdown 文件里直接插入数学公式。并且附带一个简单的书写数学公式的 LaTex 教程。工具  配置 Markdown Preview 来支持 MathJax使用 Sublime + Markdown Preview 插件来写博客时。需要开启 Markdown Preview 对 MathJax 的支持，这样在预览界面才能正确地显示数学公式。方法是打开在 Markdown Preview 的用户配置文件 (Package Settings -&gt; Markdown Preview -&gt; Setting - User) 里添加如下内容：配置 Pelican 主题模板来支持 MathJax如果博客不支持 MathJax 可以在模板中添加如下脚本LaTex 简明教程  规则  关于在 Markdown 书写 LaTex 数学公式有几个规则常用规则需要记住：行内公式  行内公式使用 $ 号作为公式的左右边界，如 $h(x) = \\theta_0 + \\theta_1 x$ 公式的 LaTex 内容如下行间公式  公式需要独立显示一行时，使用 $$ 来作为公式的左右边界，如$$\\theta_i = \\theta_i - \\alpha\\frac\\partial{\\partial\\theta_i}J(\\theta)$$的 LaTex 代码为：常用 LaTex 代码  需要记住的几个常用的符号，这样书写起来会快一点编码说明示例\\frac分子分母之间的横线$\\frac1x$_用下划线来表示下标$x_i$^次方运算符来表示上标$x^i$\\sum累加器，上下标用上面介绍的编码来书写$\\sum$\\alpha希腊字母 alpha$y := \\alpha x$要特别注意公式里空格和 {} 的运用规则。基本原则是，空格可加可不加，但如果会引起歧义，最好加上空格。{} 是用来组成群组的。比如写一个分式时，分母是一个复杂公式时，可以用 {} 包含起来，这样整个复杂公式都会变成分母了。几个非常有用的资源这是一篇质量很高的  介绍 MathJax 的中文博客文章，需要注意的是如果是用 markdown 编写 MathJax 公式，当公式里需要两个斜杠 \\ 时要写四个斜杠 \\。因为 \\ 会被 markdown 转义一次。Github 上有个  在线 Markdown MathJax 编辑器，可以在这里练习，平时写公式时也可以在这里先写好再拷贝到文章里这是 LaTex 完整教程，包含完整的 LaTex 数学公式的内容，包括更高级的格式控制等这是一份 PDF 格式的 MathJax 支持的数学符号表，当需要书写复杂数学公式时，一些非常特殊的符号的转义字符可以从这里查到好啦，这样差不多就可以写出优美的数学公式啦。本文参考 kamidox.com","tags":["Markdown","MathJax"],"categories":["折腾"]},{"title":"GithubPages 绑定自定义域名","url":"/github-domain-name/","content":"本文将着重介绍如何将 GithubPages 的博客绑定自定义域名。域名的好处  域名除了为了装 B，给人留下深刻的印象，博主认为最大的好处是能访问的运营商更多了。博主使用的是 GithubPages 作为博客的平台，带来的问题是 由于 IP 访问限制，只有使用电信运营商时才能访问，而移动运营商不能访问（联通没试过）。而绑定域名后，因为使用 DNS 解析，移动运营商的网络也可以访问了。购买域名  域名购买有多种渠道。这里推荐用国外的 Godaddy 进行域名注册。Godaddy 有很多的优惠码，并且可以使用支付宝付款，非常方便。博主 2017 年买的一年域名花了 55￥。购买域名很简单，一步步来就行，如果不能使用支付宝付款，说明使用的优惠码不支持支付宝，可以选择使用国际银行卡支付或者换个优惠码。配置 DNS 解析  配置 DNSPOD 解析  在 Godaddy 上购买域名后，域名会自动使用 Godaddy 自己的 DNS 解析器进行解析，不过容易被墙，所以建议使用国内的 DNS 解析器。这里推荐免费的 DNSPOD 进行 DNS 解析。DNSPOD 支持 QQ 账号登录，非常方便。进入 域名解析  -&gt;  添加域名 ，输入你注册的域名，进入后将记录改为如图所示主机记录记录类型记录值TTL@A192.30.252.153600@A192.30.252.154600@NSf1g1ns1.dnspod.net.86400@NSf1g1ns2.dnspod.net.86400其中下面两个 NS 记录类型是不能更改的。这里建议使用 A 记录进行解析。当然也可以使用 CNAME 解析，但是博主使用 CNAME 进行解析有时出现错误。。所以不如把解析地址指向 GitHub，让 Github 进行域名解析。配置 Godaddy 解析  在 我的账户  中选择  我的产品在 域名  处点击  管理点击域名旁边的箭头，选择 设置域名服务器将 标准  改为  定制 ，并填写 DNSPOD 的解析服务器Github 的 CNAME 配置GithubPages 是支持域名绑定的，只需要在主目录里添加一个名字为 CNAME 文件，注意没有后缀名。文件内容为你所购买的域名，注意没有 www 前缀，例如你申请的 xiaoming.com , 那么 CNAME 的内容为 xiaoming.com。这样的话当你输入 xiaoming.github.io 时会自动跳转到 xiaoming.com。至此 GitHub 域名绑定完毕，你已经通过域名访问你的网站啦~","tags":["github"],"categories":["瞎折腾"]},{"title":"2012 款 21.5 寸 iMac 添加 7+17pin 接口固态硬盘","url":"/iMac-21.5-change-SSD/","content":"2012 年款 21.5 寸 的 iMac 标准版是 8G 内存 + 1T 机械硬盘。在这个没有固态硬盘活不了的时代，又怎么能忍受机械硬盘的卡慢烂。。于是我考虑给我的 iMac 加装固态硬盘。加装固态硬盘有两种方案：方案一：把机械硬盘换成固态硬盘。这样的优点是操作简单，缺点是大容量的固态硬盘成本较高，而 iMac 没有其他多余的硬盘位。方法二：利用主板背面的固态硬盘接口加装固态硬盘，并保留原来的机械硬盘。优点是性价比高，缺点是操作复杂，需要把整个主板卸下来，要求动手能力强。这个主板后面的 SSD 接口为 7+17pin ，是苹果自己专用的，只有专门为苹果固态硬盘提供配货的厂家才卖，价格贵的惊人。所以我的解决方案是买一个 msata 转 7+17pin 接口的转换器，再买一个 msata 的固态硬盘就好啦~需要注意的是 2012 款 ssd 接口与之后年份的接口不同，买的时候需要向卖家确认。准备工作msata 转 7+17pin 接口的转换器  ，在某宝搜索关键字：macbook， 2012， msata； 这就是上文提到的接口转换器。注意一下这是 2012 款的接口，之后年份的接口与之不同，不过也是苹果独家，与市面上不兼容。msata 接口的固态硬盘 ，这个牌子很多，自己选吧。我买的是 256G 三星 850evo；21.5 寸 iMac 双面胶  ，在某宝搜索关键字：imac， 21.5，  双面胶 ； 因为 iMac 的屏幕与机身是由双面胶固定的，所以在还原过程中需要重新粘贴双面胶。某宝上卖的有两款，贵的那款在边缘处理上和原厂更相近。当然两款都能粘住，不过淘宝的胶粘性过强，再想起开屏幕会比较费事。两款口径的六角螺丝刀  ，在某宝搜索关键字： 六角梅花螺丝刀套装 ； 一共需要 T10 ， T8 两款口径的六角螺丝刀，所以建议买螺丝刀套装。拆解  推荐一个 iFixit 加装固态硬盘的视频，非常详细，有这个视频基本就不用往下看了，在此只是总结一下注意事项。这个是 iFixit 加装固态硬盘的文字教程，也非常详细，需要科学上网才能查看。本篇博客的部分图片为该网站原图，侵删。拆卸屏幕  需要挑选硬实点的卡片，废弃的会员卡、银行卡都是不错的选择。买双面胶淘宝可能会赠送拆屏拨片，不过实际使用体验不如前者好。一般从屏幕侧面下方开始切入，之后就是力气活啦，暴力出奇迹吧。放心，轻易不会损坏屏幕，注意的是需要跳过上部中间摄像头部分，避免胶蹭到摄像头部分。以下部分尤其重要！！因为屏幕有两跟数据线和主板连结，所以当屏幕已经分离后，需要将屏幕翘起 15 度左右，从主板将两根数据线拔掉后方可把屏幕拿下。拆解方法如图之后在清除底部双面胶后便可将屏幕拿下。拆卸底部支架条  在 iMac 下部有 5 个螺丝，如图，拧下后便可把底部的支架条拿下来。不拿下来的话主板和音频主板都相当难拿下来。。不要问博主是怎么知道的。。拆卸机械硬盘固定架  拧下如图所示四颗螺丝。这时已可以拆下整个机械硬盘，不过本教程选择先拆解音频主板。拆卸音频主板  首先将 2 个连接线拔出。拧下底部固定的两个螺丝。这时可以将音频主板的一侧拿出，比较困难，一定不要暴力，因为另一侧还有两根线连结在主板和音箱。然后便可将两根连接线取下，方法如图，也比较费力。拆卸风扇  首先取下电源线。然后拧下如图所示三颗螺丝即可取下。拆卸机械硬盘  机械硬盘就非常好拆啦，拆下 SATA 接口连接线即可。拆卸机械硬盘支撑架  拧下如图螺丝即可取下。取下与主板连结的所有连接线拆卸出风口  这里需要拧下四颗螺丝，如图，注意该型螺丝型号为 T8，而之前型号为 T10 ，要小一些。该出风口与主板是连接在一起的。拆卸右侧扩音器  拧下如图所示两颗螺丝。扩音器不必要完全拆卸，只需将扩音器往右挪一挪即可。拆卸主板  拧下如图所示四颗螺丝。即可拿掉主板。比较费力，因为是和 USB 等接口对应的，需要耐心。安装固态硬盘  在主板背面就能找到我们期待已久的 SSD 接口啦，安装比较容易。后续工作  再按之前的步骤倒序依次安装即可。开机后进入 Windows 系统，系统会自动识别到新安装的固态硬盘，并提醒你分区。至此固态硬盘安装完毕，剩下的就是在固态硬盘上重装系统了。速度飞起~~","tags":["mac"],"categories":["瞎折腾"]},{"title":"米家 LED 智能台灯移动电源供电","url":"/Mijia-lamp-portable-source/","content":"米家 LED 智能台灯设计简洁美观，然而只能使用插座供电，对于晚上停电的学生党来说真是一大遗憾。本文将介绍如何使用移动电源为米家 LED 智能台灯供电。12V USB 升压线  首先需要在淘宝上买一条 12V 的 USB 升压线。关键词：12v； usb 升压线。一定要管客服要接口是 4mm 的！！一定要管客服要接口是 4mm 的！！一定要管客服要接口是 4mm 的！！（事重三）因为卖家一般只卖 3.5mm 的和 5.5mm 接口的，当时我拿格尺量感觉差不多 3.5mm 就下单了，不过客服特别负责，问我能不能把插头插入耳机孔，能插入的才是 3.5mm 的，而米家台灯的插头并不能插入，所以是 4mm 的。最后卖家给我发了一个 5.5mm 的接口配了一个 4mm 的转接头。转接头如下图最终完美适配~为什么买 12V 的 升压线？米家 LED 智能台灯的插座标示的是 12V 0.5A ，而我是用的移动电源最高电压输出只有 5V ，所以需要 12V 的升压线。台灯适配器如下图推荐一下  作为 Miboy 强推一下这款台灯吧，此款台灯设计简洁，美观，并且护眼，亮度、冷暖色无级调节（有一个旋钮，按下拧调冷暖色，不按下拧调亮度），可以连接手机选择不同模式（没什么用，喜欢自己调），总之非常适合学习和办公使用，配合本文中的移动电源使用方法简直无黑点。暖色冷色","tags":["xiaomi"],"categories":["瞎折腾"]},{"title":"PPT 中插入高亮代码的踩坑历程","url":"/PPT-highlight-code/","content":"转载作者：snovey如果你是一名小白，又梦想有朝一日成为一代大 PPT 工程师，或许你会需要这篇文章。PPT 中插入高亮代码的踩坑历程  如何在 PPT 中插入高亮的代码？少量代码大可以手调，但是当代码多起来就力不从心了。一个显然的办法是用 HTML 对代码高亮，然后粘贴过去，HTML 高亮的方法有很多，一搜一大堆，但是 HTML 格式的代码粘贴到 Word 是高亮的，但是粘贴到 PPT（即使是从 Word 粘贴过去）都会出现问题，至少我这里会出现问题。怎么办呢？查了一下，微软自家的产品内部通用 RTF (Rich Text Format) 格式，接下来就是如何得到 RTF 格式的高亮代码了。我手头用的 Sublime，有一款插件叫做 Highlight，选中代码，右键 -&gt; Copy as RTF，然后粘贴到 PPT 就好了。然后发现代码高亮有坑（诸如左右括号不一样颜色之类的 bug）。Notepad++ 也有这个功能，下载最新的 Notepad++ 7.0 版本，安装插件，连个 plugin manager 都没有，手动安装出错，遂退回到 6.9 版本，然后 Copy as RTF 粘贴到 PPT，结果连背景色都带上了，RTF 那个语法，简直了，看着就想吐，别说改了，卒。最后我选择了 Pygments，安装：执行：粘贴到 PPT，OK。结束了 PPT 中代码高亮的噩梦。参考：How can I embed programming source code in Powerpoint slide and keep code highlighting?Pygments DocsHow to add syntax-highlighted code to PowerPoint slides (Mac OS)","tags":["PPT"],"categories":["瞎折腾"]},{"title":"HTML 表单的验证","url":"/form-confirm/","content":"表单的验证在实际生活中很常见，比如注册页面要求用户名长度 6-12 位，如果不在这个范围内会报错的。表单的验证一般使用 JavaScript 实现，博主在这里简单介绍一下。表单的创建  表单经常是由输入框组成。这里介绍几个常用的输入框。执行后的效果大概如此这里以注册用户名为例，要求 6-30 位字母、数字或“_”, 字母开头将改代码片段放入  标签下，最后执行结果如图所示：onblur 介绍  这里需要用到一个 event 对象 onblur ，定义为 onblur 事件会在对象失去焦点时发生，及当我光标离开输入框时触发事件发生，这非常适用于检查输入框内容的格式是否符合要求。当然还有很多 events ，若想了解更多可到 w3school 查询。span 介绍&lt;span&gt; 标签被用来组合文档中的行内元素。这里主要用来显示错误信息。JavaScript 实现由代码可以很容易理解 JavaScript 语法需要先用 document.getElementById(&quot;&quot;) 获取输入框，然后用 .value 得到输入框的内容。错误分三种情况：1. 如果输入为空，则错误信息为“请输入用户名！”2. 如果输入少于 6 个字符，则错误信息为“用户名长度不能少于 6 个字符！”3. 如果输入不满足由 由字母，数字，下划线组成，须以字母开头  这个条件，则错误信息为  用户名只能由字母，数字，下划线组成，须以字母开头三种错误方式分别如图所示正确方式如图所示其中最后的条件限制使用了正则表达式。placeholder 介绍placeholder 是 html5 &lt;input&gt; 里的属性，提供可描述输入字段预期值的提示信息（hint）。为了具体代码如下，以下代码基于 12306 网上购票用户注册","tags":["HTML","JS"],"categories":["知识点"]},{"title":"wordpress 使用 highlight.js 添加语法高亮","url":"/highlight/","content":"wordpress 使用 highlight.js 添加语法高亮转载作者博客：snoveyhighlight.js 简介wordpress 有强大的 Crayon Syntax Highlighter，因为太过强大，很多功能用不上，用这个插件会拖慢网站速度，于是找到了这个插件：highlight.js，如果你只是想给代码添加简单的高亮而不需要添加行号、复制按钮之类的功能，那么这款插件刚好适合你。下面简单的介绍一下：highlight.js 是一款强大的代码高亮插件。官方给出描述如下：支持 166 种语言，有 77 种样式自动识别语言同时支持多种语言支持 node.js 平台支持各种标记兼容任何 js 框架该项目已在 Github 开源，项目地址：highlight.js安装的思路非常简单：导入 CSS 文件导入 JS 文件加载 JS导入 highlight.js最简单粗暴的方法如下，在 header.php 中加入如下代码：注意修改路径！当然，这个办法非常不可取，JS 应当放在 &lt;body&gt; 中而非 &lt;head&gt; 中，所以改进后的办法是将移至 footer.php 中 &lt;/body&gt; 标签之前。为了插件化我更推荐你这样做：在 function.php 中添加如下代码然后在 footer.php 中添加设置触发函数。关于安装路径  如果是下载至本地，那么在网站的 /wp-content/plugins/ 目录下新建 highlight 文件夹，然后将压缩包解压至该文件夹，将上述的修改为即可。如果想要提高网站的速度，也可以不从本地加载，转而使用第三方提供的 CDN，下面贴几个。cdnjsyandex:Bootstrap注意 cdnjs 不提供 CSS，而 yandex 貌似没有 8.2 以后的版本，根据自己的情况选择 CDN 吧。如果你想自定义代码高亮，不妨从 CDN 加载 JS，从本地加载 CSS，这里不啰嗦了。使用 highlight.jshljs.initHighlightingOnLoad() 会寻找 &lt;pre&gt;&lt;code&gt; 标签，所以使用 highlight.js 时应当这样写代码：记得在 class 中填写语言的类型。啥？介绍时不是说可以自动识别么？即便如此，标记语言类型是一种良好的编码习惯。参考链接：highlight.jshighlight.js如何正确引用 JavaScript 和 CSS 文件","tags":["wordpress"],"categories":["瞎折腾"]},{"title":"macOS 如何显示隐藏文件","url":"/mac-show-hidden-files/","content":"mac 为了系统安全会将一些文件夹隐藏，避免用户误删除造成的系统崩溃，但是在安装配置文件时经常需要到隐藏目录下操作，所以这里介绍两种方法，将隐藏的文件显示出来。第一种方法 命令行  命令方式最简单，键入如下两行命令你就可以实现对文件的现实和隐藏功能了。然后 重启 Finder !!!! 很重要!!!! 楼主就是试了好多次最后发现栽在这上面了方法如图第二种方法 Finder 中设置  在 Finder 中进入任意文件夹，按快捷键Command + F 调出搜索窗口，点击”种类”选项卡，在下面找到”其他”，如图所示在弹出的窗口里 找到”文件可见性” 选项(可通过搜索快速查找)，勾选后面的方框, 点击”好”保存设置。当然！！仍然需要重启 Finder ！！方法同上。","tags":["mac"],"categories":["瞎折腾"]},{"title":"macOS 如何安装 tomcat","url":"/mac-install-tomcat/","content":"Tomcat 服务器是一个免费的开放源代码的 Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试 JSP 程序的首选。博主是在学习 JavaWeb 的时候接触到 tomcat 的，这里介绍一下在 mac 系统安装 tomcat 的过程下载 tomcat首先到 tomcat 官网 下载 tomcat ，版本既然是新版兼容旧版当然是越新越好啦。选择 zip 或者 tar.gz 下载即可。下载后解压，更名为 tomcat ，并复制到 /Library (就是 finder 中的资源库)。当时博主将文件夹重命名为 tomcat 后居然带后缀名 tomcat.M9 。。文件夹居然带后缀名！！后缀名居然删不掉！！也不知道那个 .M9 是咋出来的。。在表面看是看不到的啊！！修改授权tomcat 中的几个运行服务程序都是以 *.sh 结尾的，在运行之前需要授权。打开终端输入如下命令:其中 tomcat 为你的文件夹名。(博主当时很无奈的将 tomcat 换成了 tomcat.M9)回车出现要输入密码：请输入本机账户密码启动 tomcat 服务  先使用 cd 命令进入 tomcat 的 bin 目录, 命令如下:cd /Library/tomcat/bin/启动服务命令:启动成功, 会出现如下结果:如果出现如上结果，说明 tomcat 启动成功。这个时候输入 http://localhost:8080/ 应该就可以访问了。","tags":["mac","tomcat"],"categories":["瞎折腾"]},{"title":"HTML 标签总结","url":"/html-tab/","content":"HTML (HyperText Markup Language) 超文本标记语言，超文本 就是指页面内可以包含图片、链接，甚至音乐、程序等非文字元素。超文本标记语言的结构包括 头  部分（英语：Head）、和  主体  部分（英语：Body），其中  头 部提供关于网页的信息，主体 部分提供网页的具体内容。前言HTML 标签很多，都记住有一定的困难。所以这里推荐 Dreamweaver ，很强大，标签有很多的提示。当然也有推荐初学者使用记事本编辑 html 文件的，不过仁者见仁智者见智吧，大家自己选择。这里推荐两个网站，是专门查询标签的功能，并且可以在线查看效果的1.http://www.w3school.com.cn/tags/2.http://www.runoob.com/html/html-tutorial.htmlHTML 的基本标签 ## 表单","tags":["HTML"],"categories":["知识点"]},{"title":"JDBC 基本使用方法","url":"/jdbc/","content":"JDBC（Java Data Base Connectivity,java 数据库连接）是一种用于执行 SQL 语句的 Java API，可以为多种关系数据库提供统一访问，它由一组用 Java 语言编写的类和接口组成。其优点是不论使用何种数据库，只需要更改配置文件即可。前言2016-07-10 学校组织来大连东软实训，我选择的是 JavaWeb 方向，经过 20 天的学习收获还是蛮大的。第一个知识点是 jdbc 。为了留点纪念，所以想把老师讲的知识全部复述一下，可以说是详细版教程。在东软，老师把 MySQL 和 Oracle 的使用方法都介绍了，但是由于 Oracle 过大，占内存，卸载不干净，所以在这里只介绍 MySQL 数据库的操作。MySQL 的安装  首先到官网下载 MySQL 的数据库，和MySQL Workbench 的数据库操作界面。Windows 版的在安装时记得在填写密码时一定要记住，并且选择 utf-8 编码。mac 版的安装很简单，但是在创建数据库的时候记得填写密码，否则会生成临时密码，如果当时没有记住临时密码就惨了。然后在 MySQL 上新建一个数据库，并在空白区域右键 create schema 。创建一张表  当然 JDBC 是需要掌握 SQL 语句的一般语法。使用 JDBC 的话一般只进行  增加 (insert)， 删除 (delete)， 修改 (update)， 查询 (select) 等操作而很少进行  创建(create) 操作，所以现在需要手动创建一张表。这里以学生表为例。eclipse 的安装  在东软老师推荐用 MyEclipse ，因为将来的 JavaWeb 需要各种插件。但是 MyEclipse 需要花钱买，否则需要破解。破解网上教程太多，就不举例了。而 eclipse 是开源免费的。如果只用 JDBC 的话 eclipse 完全足够。这里给出  官网下载地址。注意选择 Java EE 版本，并可以选择中国镜像，下载速度更快。JDBC 的初步实现  用 eclipse 新建一个 java project 起名为 jdbc在工程下新建文件夹，命名为 lib ，将 MySQL 的驱动文件 复制到该文件夹，并右键 Build Path -&gt; Add to Build Path 。这时发现在工程里出现 Referenced Libraries ，里面有和刚才同名的 jar 文件。在 src 中新建一个包。由于包的名字一般由公司域名倒置构成，所以我起名为 com.xunge.jdbc在包中新建一个类，类名为 JDBCDemo， 并录入以下代码。代码中的 try catch 和 导的包是用 eclipse 自动提示添加的。上面的代码用 executeUpdate 方法，可以进行 增加 (insert)，  删除 (delete)，  修改 (update) 操作，返回的是更新数据的行数。而  查询(select) 语句需要用 executeQuery 方法。JDBC 的代码重构  然而这个代码如果多次执行的话重复的代码过多，需要进行代码复用。现在可以看到的是 连接数据库  和  删除数据库 代码是不变的，可以进行代码复用。方法是：1. 在 src 新建一个包，包名为 com.xunge.jdbc.common。2. 在该包下新建一个文件，文件名为 dbmysql.properties。文件内容如下这个是 MySQL 数据库的配置文件。如果用的是 Oracle 数据库，则配置文件如下properties 文件为配置文件。2. 在该包下新建一个类，类名为 JDBCUtil，作为 JDBC 的工具类，内容如下。之后就可以引用工具类里的函数将 JDBC 实现出来。JDBC 的查询  由上文知 增加 (insert)，  删除 (delete)，  修改(update) 操作用 executeUpdate 方法，返回的是更新数据的行数。而 查询(select) 操作需要用 executeQuery 方法，需要用 executeQuery 方法，用 ResultSet 接收数据并输出。JDBC 的预编译语句实现  这里介绍一下 预编译语句。预编译语句 的优点是 如果遇到两条 SQL 语句除了几个参数不同，其他不变的话（尤其是插入语句！！），用 预编译语句 是再合适不过的啦。预编译不仅运行更快，而且写起来也方便很多。## 最后一段以上就是 JDBC 配置的全部过程及简单的应用，相信在将来的 JavaWeb 开发中一定会用到其中的知识。说说东软学校吧东软老师真的很不错，很负责，也很耐心，遇到的一些问题向老师提问都会很快得到详细的解释，这样的教学方式非常值得大学老师的学习。如果你们学校也组织来东软实训的话，我作为过来人也给出几条建议吧记得带网线！！！来这之前还一直担心没有网怎么熬过这个月，不过在贴吧里有很多卖账号的东软学生，比在外面办无线网卡合适多了。不过光用无线的话网速太慢，下载顶多 200K，有网线的话轻松到 1M。如果是在东软 A 园区的话是没有独立卫浴的。","tags":["jdbc"],"categories":["知识点"]},{"title":"在 macOS 中使用 BootCamp 安装 Windows10","url":"/mac-bootcamp-win10/","content":" 如何在苹果电脑中安装双系统 mac + win10## 前言  苹果电脑当然还是苹果系统最适合，优势最明显的是省电，当然也有美观、系统流畅等其他优点。但是也有很多劣势，比如 mac 系统学习成本比较大，很多软件不兼容。所以在硬盘空间的允许下装双系统应该是再合适不过的啦。 博主就是因为老爸不习惯 macOS ，而博主又特别喜欢 macOS 的界面，所以权衡利弊借助 bootcamp 装了双系统。 其实想在苹果电脑上运行 mac 还可以用虚拟机，这里推荐 parlldesktop 虚拟机，不过需要花钱，也有破解版。## 准备工作 win10 镜像， USB 2.0 。## 开始制作  首先需要 win10 镜像，推荐 MSN I tell you，镜像都是原版无添加。 然后需要一个 USB 2.0 的 U 盘。。 注意，最好！！一定！！是 2.0 的 U 盘  因为博主试过好多 3.0 的 U 盘都不成功，后来看有人建议用 2.0 的 U 盘试试，果然成功了！！博主用的是 Kingston 的 2.0 U 盘。 然后需要用 bootcamp 制作 win10 的启动 U 盘。 实用工具 -&gt; bootcamp 助理 -&gt; 继续 -&gt; 打好三个对勾，然后会自动将镜像拷贝到 U 盘，并下载一些必要的驱动。之后会自动重启，安装方法和 Windows 就没有什么区别了。 安装好 Windows 会发现没有无线网驱动，分辨率也不是很适配。这时候就需要打开 C 盘，会有一个 bootcamp 的文件夹，里头有 setup 的驱动程序，安装完成后就发现无线网卡出现了，分辨率也适配到了最佳水准。2018.10 update 新版 BootCamp(启动转换助理) 不再需要使用 U 盘，系统会自动将硬盘的一部分分区作为系统盘，并在之后的使用中删去这个分区，使用更加方便 ","tags":["mac"],"categories":["瞎折腾"]},{"title":"Sublime Text 3 设置 C/C++ 编译环境","url":"/sublime-C/","content":"本文将着重介绍 Sublime 如何配置 C++ 环境，并给出方便 ACMer 的模板使用方式。Sublime 作为文本编辑器的同时还可以进行一些轻量级的编程运算，由于其漂亮的界面，深得 ACMer 的喜爱。虽然 Sublime 自带一个 C 语言的编译功能，但却无法使用，需要一定的配置才可以运行。安装 MinGW要想编译 C 语言首先要有编译器，Windows 平台主要是 gcc 和 g++，是通过安装 MinGW 实现的。MinGW 的官网是 http://www.mingw.org/ ，但是从官网安装很麻烦，在线安装经常龟速容易失败。博主推荐的方法是借助 codeblocks，选择带有 MinGW 的版本安装(100M 以上)。博主也提供一个 codeblocks-16.01mingw-setup 的百度云下载，感觉 codeblocks 官网还是下载慢。安装后把 MinGW 文件夹复制出来放到 C 盘根目录就可以了。环境变量配置  右键计算机 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量把 C:\\MinGW\\bin 添加到 path 变量中，注意前后英文分号。Build System 配置Tools -&gt; Build System -&gt; New Build System将下面代码粘贴，并保存为 gcc.sublime-build 。Windows 系统代码如下MAC 系统代码如下这样就可以用 cmd 运行，并且 scanf 也能读取。模板配置sublime 我认为最方便的地方就是可以设置一些模板，比如博主参加 ACM 竞赛开头会有很多在每道题都出现的语句，头文件等，如果有模板就会非常方便。中间代码的位置当然可以修改。然后保存为  文件名.sublime-snippet。例如博主起名为 acm.sublime-snippet，之后只要用 sublime 打开 .cpp 文件，输入 acm -&gt; 回车就可以显示中间代码。是不是很方便啊~演示效果如下：","tags":["sublime","C++"],"categories":["瞎折腾"]},{"title":"github 的介绍以及基本配置","url":"/github-intro/","content":"git 介绍以及 github 的基本配置配置 Git 环境Linux 和 MAC 环境下是自带 GIT 的，如果使用 Windows 的话有如下几个解决方案。GIT 官网  下载Cmder，选择 Download full，不仅自带 GIT ，而且是替代 Windows 自带很丑的 cmd 的很好选择。GitHub 离线版，GitHub 出品。建议大家使用命令行操作，方便快捷容易理解。配置 Git 用户名和邮箱配置 SSH一路回车到命令完成，win 系统默认在文件夹 C:\\Users\\{你的用户名}\\.ssh ，该文件夹有 id_rsa（私钥） 和 id_rsa.pub（公钥） 两个文件。将 id_rsa.pub 内容复制到自己的 Github 主页的 Settings -&gt; SSH keys，添加完毕即可。可以输入以下命令，来测试是否能够正确链接到 github若返回命令如下则说明连接成功。创建新的 GIT 仓库windows 避免每次 push 都输入密码  如果你每次 push 的时候都需要输入 github 的用户名和密码，就会感到非常的麻烦。原因是我们 push 的地址使用的是 https，把它改成 ssh 就好啦，因为我们之前已经在 github 上添加 ssh 秘钥了。这里介绍一下这个方法。首先在 git bash 输入 $ git remote -v 查看当前推送方法若如下则修改其中将 https 改为 ssh 的方式，这样就可以不用输入密码进行 push 了。","tags":["github"],"categories":["瞎折腾"]},{"title":"使用 U 盘安装 mac OS 系统","url":"/install-macOS/","content":"安装 mac 系统有很多种方法，如网上恢复、时间机器恢复、App Store 在线安装等等，但是我还是推荐使用 U 盘安装，因为不仅高效，而且还可以得到干净纯粹的系统。本文安装的 macOS 版本为 El Capitan，其他 macOS 依然适用。前言  博主家里有一台 iMac 一体机，买回来的时候就是 win7（肯定是老爸要求换的），所以也一直当成 windows 电脑用着。然而博主家里还有台 MacBook Pro，被博主强行换成 mac 系统，简直不能再漂亮，再好用，所以决定将 iMac 也换成 mac 系统，再装 win10，给老爸用。然而开机长按 option（alt）键发现原来 mac 系统一直没删，这下就好办了。不过 mac 系统有点旧，还是 lion 系统，于是想给 mac 系统做一下彻底的升级。制作 mac 启动 U 盘  这里网上也有很多帖子写的很好，这里也简单说一下。首先准备一个 8G 左右的 U 盘，当然最好 3.0。然后进入 mac 系统（如果没有 mac 系统的话看看有没有同学有用苹果本的借一下。。实在没有安一个 mac 虚拟机也可以）。进入实用工具 -&gt; 磁盘工具，将 U 盘抹掉，格式为 OS X 扩展(日志式) ，名字叫做 Capitan (最好一致，后面代码用得上)。当然还需要 El Capitan 安装程序，可以从 App Store 上 下载 (推荐，保证最新版)。也可以 百度云下载  下载。确保在应用程序里有 安装 OS X El Capitan。之后在 实用工具  -&gt;  终端 输入下面代码其中 Capitan 是 U 盘名字，如若之前没听话没改名字，这里需要把 Capitan 改成你的 U 盘的名字。做好后是这样滴如果出现错误则重新执行一次。这样 mac 启动 U 盘就做好啦~安装前准备  在这之前最好适用 Time Machine（时间机器）备份一下。如果电脑之前安过 windows 的话可能要费劲一些了，如果你的 windows 还分了好多区的话那就更麻烦了。。非常建议将 windows 分成一个区 bootcamp (C 盘)，否则无法更新 mac 系统。或者像博主一样彻底一点将 windows 删除，更新完系统再重装 windows。重启安装  插上 U 盘，重启电脑，并长按 Option 键 （alt 键），进入选盘界面（如果不成功重启再试一次）进入后界面如下可以先进入 安装 OS X，选择 mac 系统盘，并下一步即可。可能出现的问题  下面是可能会出现的问题，如果成功安装则跳过下文。如果提示 这个磁盘没有使用 GUID 分区表方案 如下图的话则说明 windows 分区破坏了 GUID 分区，需要将 windows 分区删掉才能升级 mac 系统。如果删除了 windows 分区仍提示 无法在此硬盘安装更新 等类似字样的话，则说明只能将原来 mac 系统盘抹掉。方法是退出安装程序，在 OS X 实用工具 中选择磁盘工具，将 mac 系统盘抹掉, 这样就能成功安装了（一个空电脑当然能成功安装系统）。如果遇到 不能验证这个“安装 OS X El Capitan”应用程序副本。它在下载过程中可能已遭破坏或篡改。不要真的相信程序坏掉了，解决方法是：先退出安装程序，在上面菜单栏选择 终端，输入下面代码这应该是系统 bug，需要改一下时间，改完之后就应该没问题了。2018.10 Updatemac 系统新推出的 macOS Mojave 版本依然可以使用上述方法安装系统。在终端输入代码制作安装 U 盘时可能会报 Warning，但并不影响。","tags":["mac","OS"],"categories":["瞎折腾"]},{"title":"Sublime 介绍以及插件推荐","url":"/sublime-introduction/","content":"简单介绍一下刚开始使用 sublime 的配置方式和插件。前言Sublime 可是一款程序猿必知，必用，必会的一款文本编辑器，当然配有适当的插件也可以编译 C, C++, Java, Python 等所有简单程序，并且可以写 Markdown 文档，博主的博客就是用 sublime 写的哦~Sublime 的下载Sublime Text 3 官网下载下载完成后字体可能太小， Ctrl + = 可以将字体调大。同理 Ctrl + - 可以调小字体。Sublime 并不是免费的软件，需要 70 刀左右。。然而博主还是个学生，比较穷，所以只好选择破解版。。不过等将来有钱了，我一定会来买正版的，现在就当为他的产品使用量做贡献吧。怎么破解就不说了吧（网上搜该版本的注册码）Package Control 的安装  既然要用 sublime 那一定是看中他的插件功能啦，然而插件的安装需要先安装 Package Control，方法如下：Ctrl + ~ 或者 View -&gt; Show Console 调出 Console ，并将下面代码粘贴执行。如果安装成功，就可以在 Preferences 菜单下看到 Package Settings 和 Package Control 两个菜单。若不能通过以上方式成功安装，可尝试以下方式手动安装：点击 Preferences -&gt; Browse Packages... 菜单，进入打开的目录的上层目录（即 Sublime Text 3 目录），再打开 Installed Packages 目录点击下载 Package Control.sublime-package 并复制到 Installed Packages 目录，之后就可以尽情的去安装插件啦~常用插件  经过上面安装了 Package Control 后，我们就可以通过快捷键 Ctrl + Shift + P 打开 Package Control 来安装插件了。在打开的输入框中输入 install ，会根据你的输入自动提示，选择 Package Control:Install Package，如下图。等一会，便会又弹出一个输入框，输入你要安装插件的名字即可。这里推荐几个必安插件：ConvertToUTF8文件转码成 UTF-8 ，避免中文乱码。GBK Encoding Support同样是解决中文乱码问题，将 GBK 编码转换成 UTF-8 编码。Emmet插件可以说是使用 Sublime Text 进行前端开发必不可少的插件例如输入以下代码便可自动生成详情参考 前端开发必备！Emmet 使用手册，Emmet 官方文档。JsFormat这是一款 JS 格式化的插件，Ctrl + Alt + F 对 JS 进行格式化。SideBarEnhancements是一款很实用的右键菜单增强插件，可以对左侧文件栏进行更多的操作，更多配置请点击标题。在安装该插件前，在 Sublime Text 左侧 FOLDERS 栏中点击右键，只有三个功能。通过 Package Control 安装 SideBarEnhancements 插件后可见功能增加了不少。TrailingSpaces这款插件能高亮显示多余的空格和 Tab，并一键去除，是处女座的福音。一键删除多余空格（需配置） Ctrl + Alt + T点击 Preferences -&gt; Key Bindings – User 加上代码Alignment“=” 对齐默认快捷键 Ctrl + Alt + A 和 QQ 截屏冲突，可设置其他快捷键如：Ctrl + Alt + Shift + A:点击 Preferences -&gt; Key Bindings – User 加上代码先选择要对齐的文本，如下图：SublimeCodeIntel为代码补全插件，支持 JavaScript, Mason, XBL, XUL, RHTML, SCSS, Python, HTML, Ruby, Python3, XML, Sass, XSLT, Django, HTML5, Perl, CSS, Twig, Less, Smarty, Node.js, Tcl, TemplateToolkit, PHP 等多种语言。该插件安装时间可能较长，需要耐心等待。DocBlockr生成优美的注释，更多配置请点击标题。Color​Picker调色板，默认 Ctrl + Alt + C ，但与 ConvertToUTF8 快捷键冲突。解决方法：更改 ConvertToUTF8 快捷键为 Ctrl + Alt + Shift + C 。点击 Preferences -&gt; Browse Packages... -&gt; ConvertToUTF8 -&gt; Default (Windows).sublime-keymap(根据你的操作系统，打开相应文件) -&gt; 就不用说了吧~FileDiffs强大的比较代码不同工具。右键标签页，出现 FileDiffs Menu 或者 Diff with Tab… 选择对应文件比较即可。Tag这是 HTML/XML 标签缩进、补全、排版和校验工具。使用方法如下图：暂时没有快捷键。Markdown 插件Markdown PreviewMarkdown Preview 可以实时将 markdown 文件在浏览器上显示。快捷键设置如下点击 Preferences –&gt; 选择 Key Bindings User，输入：Alt + M 为在浏览器显示Ctrl + B 为转换成 html 文件记得和之前的快捷键用逗号隔开Markdown Extended  + Monokai Extended我最爱用的 Markdown 主题Markdown Editing输入 “mdi + tab” 会自动插入下面的图片标记输入 “mdl + tab” 会自动生成下面的链接标记Sublime 更改字体 Sublime 自带的英文字体是 Consola ，非常好看，但是中文默认是宋体，不太协调，所以这里可以改成 YaHeiConsola 字体，英文是 Consola，中文是  微软雅黑。下载字体 YaHeiConsola，右键安装。在 Menu 中点击 Preference -&gt; Setting-User, 添加注意：参数之间用逗号隔开总结Sublime 还有很多功能，例如可以编译很多编程语言。这是博主写的 Sublime Text 3 设置 C/C++ 编译环境 可以参考。","tags":["sublime","plugin"],"categories":["瞎折腾"]}]